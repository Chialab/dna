{"version":3,"sources":["../src/dna-event-component.next.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;IAOA,iBAAiB;WAAjB,iBAAiB;;UAAjB,iBAAiB;wBAAjB,iBAAiB;;6BAAjB,iBAAiB;;;cAAjB,iBAAiB;;;;;;;;SAMb,0BAAC,MAAM,EAAE,QAAQ,EAAE;AAClC,OAAI,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,KAAK,WAAW,EAAE;AAC3D,WAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IACpE,MAAM,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,KAAK,WAAW,EAAE;AAC7D,WAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,MAAM,EAAE,QAAQ,CAAC,CAAC;IACtE;GACD;;;;;;;;;;;SAQM,iBAAC,MAAM,EAAE,IAAI,EAAqC;OAAnC,OAAO,yDAAG,IAAI;OAAE,UAAU,yDAAG,IAAI;;AACtD,OAAI,EAAE,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC;AACzC,OAAI,EAAE,EAAE;AACP,QAAI,OAAO,EAAE,CAAC,SAAS,KAAK,WAAW,EAAE;AACxC,OAAE,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;KAC1C;AACD,MAAE,CAAC,MAAM,GAAG,IAAI,CAAC;AACjB,QAAI,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,KAAK,WAAW,EAAE;AACxD,YAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;KACnD,MAAM,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,KAAK,WAAW,EAAE;AAC3D,YAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,MAAM,EAAE,EAAE,CAAC,CAAC;KAC9D;IACD;GACD;;;;;;;;;SAMiB,uBAAiB;OAAhB,IAAI,yDAAG,OAAO;;AAChC,OAAI,OAAO,QAAQ,CAAC,WAAW,KAAK,WAAW,EAAE;AAChD,WAAO,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAClC,MAAM,IAAI,OAAO,QAAQ,CAAC,iBAAiB,KAAK,WAAW,EAAE;AAC7D,WAAO,QAAQ,CAAC,iBAAiB,EAAE,CAAC;IACpC;GACD;;;QA7CW,iBAAiB;GAAS,YAAY","file":"dna-event-component.next.js","sourcesContent":["'use strict';\n\nimport DNAComponent from 'dna-component.next.js'\n\n/**\n * Simple Custom Component with `addEventListener` polyfill and a `dispatchEvent` wrapper named `trigger`.\n */\nexport class DNAEventComponent extends DNAComponent {\n\t/**\n\t * `Node.prototype.addEventListener` polyfill.\n\t * @param {String} evName The name of the event to listen.\n\t * @param {Function} callback The callback for the event.\n\t */\n\taddEventListener(evName, callback) {\n\t\tif (typeof Node.prototype.addEventListener !== 'undefined') {\n\t\t\treturn Node.prototype.addEventListener.call(this, evName, callback);\n\t\t} else if (typeof Node.prototype.attachEvent !== 'undefined') {\n\t\t\treturn Node.prototype.attachEvent.call(this, 'on' + evName, callback);\n\t\t}\n\t}\n\t/**\n\t * `Node.prototype.dispatchEvent` wrapper.\n\t * @param {String} evName The name of the event to fire.\n\t * @param {Object} data A set of custom data to pass to the event.\n\t * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n\t * @param {Boolean} cancelable Can be the event cancel by a callback.\n\t */\n\ttrigger(evName, data, bubbles = true, cancelable = true) {\n\t\tvar ev = DNAEventComponent.createEvent();\n\t\tif (ev) {\n\t\t\tif (typeof ev.initEvent !== 'undefined') {\n\t\t\t\tev.initEvent(evName, bubbles, cancelable);\n\t\t\t}\n\t\t\tev.detail = data;\n\t\t\tif (typeof Node.prototype.dispatchEvent !== 'undefined') {\n\t\t\t\treturn Node.prototype.dispatchEvent.call(this, ev);\n\t\t\t} else if (typeof Node.prototype.fireEvent !== 'undefined') {\n\t\t\t\treturn Node.prototype.fireEvent.call(this, 'on' + evName, ev);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Create an Event instance.\n\t * @param {String} type The event type.\n\t * @return {Event} The created event.\n\t */\n\tstatic createEvent(type = 'Event') {\n\t\tif (typeof document.createEvent !== 'undefined') {\n\t\t\treturn document.createEvent(type);\n\t\t} else if (typeof document.createEventObject !== 'undefined') {\n\t\t\treturn document.createEventObject();\n\t\t}\n\t}\n}\n"]}