{"version":3,"sources":["../src/dna-base-component.next.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;IAKP,gBAAgB;cAAhB,gBAAgB;;aAAhB,gBAAgB;8BAAhB,gBAAgB;;mCAAhB,gBAAgB;;;iBAAhB,gBAAgB;;;;;;;eAKH,2BAAU;;AAErB,gBAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;AAC1B,oBAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;aAChD;;AAED,gBAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;AAC3B,oBAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,IAAI,EAAE,CAAC;aAC9D;AACD,gBAAI,OAAO,IAAI,CAAC,OAAO,IAAI,UAAU,EAAE;AACnC,oBAAI,CAAC,OAAO,MAAA,CAAZ,IAAI,YAAiB,CAAC;aACzB;SACJ;;;;;;;;eAKe,4BAAU;AACtB,gBAAI,OAAO,IAAI,CAAC,QAAQ,IAAI,UAAU,EAAE;AACpC,oBAAI,CAAC,QAAQ,MAAA,CAAb,IAAI,YAAkB,CAAC;aAC1B;SACJ;;;;;;;;;;;eAQuB,kCAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE;AAC/C,gBAAI,OAAO,IAAI,CAAC,gBAAgB,IAAI,UAAU,EAAE;AAC5C,oBAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;aACnD;SACJ;;;;;;;eAIM,mBAAG,EAAE;;;;;;;eAIJ,oBAAG,EAAE;;;;;;;;;;eAOG,0BAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;;;;;;;;eAKlC,gBAAc;gBAAb,GAAG,yDAAG,KAAK;;AACnB,gBAAI,EAAE,GAAG,IAAI;gBACT,OAAO,GAAG;AACN,yBAAS,EAAE,EAAE,CAAC,SAAS;aAC1B,CAAC;AACN,gBAAI,GAAG,EAAE;AACL,uBAAO,WAAQ,GAAG,GAAG,CAAC;aACzB;;AAED,gBAAI,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC;AACzB,gBAAI,CAAC,OAAO,EAAE;AACV,kBAAE,CAAC,OAAO,GAAG,OAAO,GAAG,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;aAC9D;AACD,gBAAI;AACA,wBAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAC9C,CAAC,OAAO,EAAE,EAAE;;aAEZ,SAAS;AACN,kBAAE,CAAC,QAAQ,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC;aAChD;SACJ;;;;;;;;eAKiB,uBAAG;AACjB,gBAAI,GAAG,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACpD,mBAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;SACtC;;;;;;;;;eAMiB,uBAAG;AACjB,gBAAI,QAAQ,CAAC,aAAa,IAAI,QAAQ,CAAC,aAAa,CAAC,UAAU,EAAE;AAC7D,uBAAO,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aACtE;SACJ;;;;;;;;;eAMoB,wBAAC,EAAE,EAAE;AACtB,mBAAO,EAAE,CAAC,IAAI,CACT,OAAO,CAAC,QAAQ,EAAE,UAAS,KAAK,EAAE;AAC/B,uBAAO,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;aACpC,CAAC,CACD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAC3B;;;WA5GC,gBAAgB;GAAS,WAAW","file":"dna-base-component.next.js","sourcesContent":["'use strict';\n\n/**\n * This is the base model to use to create DNA Custom Components.\n */\nclass DNABaseComponent extends HTMLElement {\n    /**\n     * Fires when an instance of the element is created.\n     * @private\n     */\n    createdCallback(...args) {\n        // Add scope style class\n        if (this.constructor.tagName) {\n            this.classList.add(this.constructor.tagName);\n        }\n        // Render the template\n        if (this.constructor.template) {\n            this.innerHTML = this.constructor.template.innerHTML || '';\n        }\n        if (typeof this.created == 'function') {\n            this.created(...args);\n        }\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @private\n     */\n    attachedCallback(...args) {\n        if (typeof this.attached == 'function') {\n            this.attached(...args);\n        }\n    }\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @private\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attrName, oldVal, newVal) {\n        if (typeof this.attributeChanged == 'function') {\n            this.attributeChanged(attrName, oldVal, newVal);\n        }\n    }\n    /**\n     * Abstract `created` callback. Extend in your component!\n     */\n    created() {}\n    /**\n     * Abstract `attached` callback. Extend in your component!\n     */\n    attached() {}\n    /**\n     * Abstract `attributeChanged` callback. Extend in your component!\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChanged(attrName, oldVal, newVal) {}\n    /**\n     * Register the custom element.\n     * @param {String} ext The name of an Element to extend (optional).\n     */\n    static init(ext = false) {\n        let fn = this,\n            options = {\n                prototype: fn.prototype,\n            };\n        if (ext) {\n            options.extends = ext;\n        }\n        // Retrieve the Custom Element tag name.\n        var tagName = fn.tagName;\n        if (!tagName) {\n            fn.tagName = tagName = DNABaseComponent.classToElement(fn);\n        }\n        try {\n            document.registerElement(tagName, options);\n        } catch (ex) {\n            //\n        } finally {\n            fn.template = DNABaseComponent.getTemplate();\n        }\n    }\n    /**\n     * Instantiate an element.\n     * This is a sort of constructor.\n     */\n    static instantiate() {\n        var tag = this.tagName || this.classToElement(this);\n        return document.createElement(tag);\n    }\n    /**\n     * Get current component template.\n     * Uses `document.currentScript`, so use only on initialization!\n     * @return {HTMLTemplateElement} The template element of the component.\n     */\n    static getTemplate() {\n        if (document.currentScript && document.currentScript.parentNode) {\n            return document.currentScript.parentNode.querySelector('template');\n        }\n    }\n    /**\n     * Convert a Class name to HTML tag.\n     * @param {Class} fn Grab the tag name from this class.\n     * @return {String} The tag name for the Custom Element.\n     */\n    static classToElement(fn) {\n        return fn.name\n            .replace(/[A-Z]/g, function(match) {\n                return '-' + match.toLowerCase();\n            })\n            .replace(/^\\-/, '');\n    }\n}\n"]}