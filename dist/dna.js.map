{"version":3,"file":null,"sources":["src/helpers/typeof.js","src/helpers/polyfill.js","src/helpers/strings.js","src/helpers/set-attribute.js","src/helpers/property.js","src/dna-properties-component.js","src/helpers/delegate.js","src/helpers/style.js","node_modules/incremental-dom/src/util.js","node_modules/incremental-dom/src/node_data.js","node_modules/incremental-dom/src/context.js","node_modules/skin-template/src/render.js","node_modules/skin-template/src/template.js","src/helpers/tree-observer.js","src/helpers/define.js","src/helpers/mixins.js","src/helpers/registry.js","src/dna-component.js","src/dna-events-component.js","src/dna-style-component.js","node_modules/incremental-dom/src/nodes.js","node_modules/incremental-dom/src/notifications.js","node_modules/incremental-dom/src/assertions.js","node_modules/incremental-dom/src/dom_util.js","node_modules/incremental-dom/src/core.js","node_modules/incremental-dom/src/symbols.js","node_modules/incremental-dom/src/attributes.js","node_modules/incremental-dom/src/virtual_elements.js","node_modules/skin-template/src/parser.js","src/dna-template-component.js","src/dna-base-component.js","src/dna.js"],"sourcesContent":["export function isFunction(fn) {\n    return typeof fn === 'function';\n}\n\nexport function isString(str) {\n    return typeof str === 'string';\n}\n\nexport function isObject(obj) {\n    return typeof obj === 'object';\n}\n\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n","import { registry } from './registry.js';\nimport { isString } from './typeof.js';\n\nfunction isNew(node) {\n    try {\n        return !isString(node.outerHTML);\n    } catch (ex) {\n        return true;\n    }\n}\n\nexport function polyfill(name) {\n    const Original = self[name];\n    const Modified = function() {\n        if (this.constructor) {\n            if (!isNew(this)) {\n                return this;\n            }\n            let desc = registry.get(this.is);\n            let config = desc.config;\n            // Find the tagname of the constructor and create a new element with it\n            let element = document.createElement(\n                config.extends ? config.extends : this.is\n            );\n            if (config.extends) {\n                element.setAttribute('is', this.is);\n            }\n            element.__proto__ = desc.Ctr.prototype;\n            return element;\n        }\n        return null;\n    };\n    self[name] = Modified;\n    self[name].prototype = Object.create(Original.prototype, {\n        constructor: {\n            value: self[name],\n            configurable: true,\n            writable: true,\n        },\n    });\n    return self[name];\n}\n","const DASH = /\\W+/g;\nconst CAMEL_TO_DASH = /([a-z\\d])([A-Z])/g;\nconst DASH_TO_CAMEL = /\\W+(.)/g;\n\n/**\n * Convert a string from camelCase to dash-case.\n * @param {string} str The string to convert.\n * @return {string} The converted string.\n */\nexport function camelToDash(str) {\n    return str.replace(DASH, '-').replace(CAMEL_TO_DASH, '$1-$2').toLowerCase();\n}\n/**\n * Convert a string from dash-case to camelCase.\n * @param {string} str The string to convert.\n * @return {string} The converted string.\n */\nexport function dashToCamel(str) {\n    return str.replace(DASH_TO_CAMEL, (x, chr) => chr.toUpperCase());\n}\n","export function setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            let type = typeof value;\n            if (type === 'string' || type === 'number') {\n                context.setAttribute(attr, value);\n            } else if (type === 'boolean') {\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n","import { isUndefined, isFunction, isArray, isObject } from './typeof.js';\n\nconst define = Object.defineProperty;\n\nclass ObserverMixin {\n    constructor() {\n        this.callbacks = [];\n    }\n\n    observe(fn) {\n        if (isFunction(fn)) {\n            this.callbacks.push(fn);\n        }\n        return this;\n    }\n\n    unobserve(fn) {\n        let io = this.callbacks.indexOf(fn);\n        if (io !== -1) {\n            this.callbacks.splice(io, 1);\n        }\n        return this;\n    }\n\n    changed(newValue, oldValue) {\n        let ress = [];\n        for (let i = 0, len = this.callbacks.length; i < len; i++) {\n            let res = this.callbacks[i](newValue, oldValue);\n            if (res === false) {\n                return ress;\n            }\n            ress.push(res);\n        }\n        return ress;\n    }\n}\n\nclass Property extends ObserverMixin {\n    constructor(ctrs) {\n        super();\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.required = false;\n        this.validator = () => true;\n        this.beforeSet = (val) => val;\n        this.getter = () => this.value;\n        this.setter = (val) => {\n            val = this.beforeSet(val);\n            if (this.validateType(val)) {\n                if (this.validator(val)) {\n                    if (this.value !== val) {\n                        let oldValue = this.value;\n                        this.value = val;\n                        this.changed(val, oldValue);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n\n    default(initValue) {\n        this.value = initValue;\n        return this;\n    }\n\n    scoped(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getter.bind(this),\n            set: this.setter.bind(this),\n            configurable: true,\n        });\n        return this;\n    }\n\n\n    require() {\n        this.required = true;\n        return this;\n    }\n\n    before(callback) {\n        if (isFunction(callback)) {\n            this.beforeSet = callback;\n        }\n        return this;\n    }\n\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        // eslint-disable-next-line\n        throw new TypeError(\n            `Invalid \"${val}\" value for \"${this.name}\" property for ${this.scope.is} components.`\n        );\n    }\n\n    init(value) {\n        if (!isUndefined(value)) {\n            if (!this.setter(value)) {\n                if (this.required) {\n                    throw new Error(\n                        `\"${this.name}\" property is required for ${this.scope.is} components.`\n                    );\n                }\n            }\n        }\n    }\n}\n\nexport class PropertyList extends ObserverMixin {\n    constructor(props) {\n        super();\n        this.props = [];\n        this.add(props);\n    }\n\n    add(property) {\n        if (property instanceof Property) {\n            this.props.push(\n                property.observe((newValue, oldValue) =>\n                    this.changed(newValue, oldValue)\n                )\n            );\n        } else if (isObject(property)) {\n            for (let k in property) {\n                if (property.hasOwnProperty(k)) {\n                    let p = property[k];\n                    if (!(p instanceof Property)) {\n                        p = new Property(p);\n                    }\n                    p.name = k;\n                    this.add(p);\n                }\n            }\n        }\n    }\n\n    has(name) {\n        return !!this.iterate((property) => {\n            if (property.name === name) {\n                return true;\n            }\n            return undefined;\n        });\n    }\n\n    get(name) {\n        let res = this.iterate((property) => {\n            if (property.name === name) {\n                return property;\n            }\n            return undefined;\n        });\n        if (res) {\n            return res;\n        }\n        throw new Error('Property not found.');\n    }\n\n    iterate(callback) {\n        for (let i = 0, len = this.props.length; i < len; i++) {\n            let res = callback(this.props[i]);\n            if (!isUndefined(res)) {\n                return res;\n            }\n        }\n        return false;\n    }\n}\n\nexport function prop(ctrs) {\n    return new Property(ctrs);\n}\n\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { camelToDash, dashToCamel } from './helpers/strings.js';\nimport { setAttribute } from './helpers/set-attribute.js';\nimport { PropertyList } from './helpers/property.js';\nimport { isArray } from './helpers/typeof.js';\n\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, PropertiesMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(PropertiesMixin) {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * On `created` callback, apply attributes to properties.\n     */\n    constructor() {\n        super();\n        let props = this.properties || new PropertyList();\n        if (!(props instanceof PropertyList)) {\n            let list = new PropertyList();\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props.forEach((partialProps) => {\n                list.add(partialProps);\n            });\n            props = list;\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n        });\n\n        let attributes = Array.prototype.slice.call(this.attributes || [], 0);\n        let initProps = {};\n        for (let i = 0, len = attributes.length; i < len; i++) {\n            let attr = attributes[i];\n            let propName = dashToCamel(attr.name);\n            if (props.has(propName)) {\n                initProps[propName] = getValue(props.get(propName), attr.value);\n            }\n        }\n        props.iterate((prop) => {\n            let attrName = camelToDash(prop.name);\n            prop.scoped(this);\n            prop.observe((newValue) => {\n                setAttribute(this, attrName, newValue);\n            });\n            prop.init(initProps[prop.name]);\n        });\n    }\n    /**\n     * On `attributeChanged` callback, sync attributes with properties.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let propName = dashToCamel(attr);\n        if (this.properties.has(propName)) {\n            this[propName] = getValue(this.properties.get(propName), newVal);\n        }\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        this.properties.get(propName).observe(callback);\n    }\n    /**\n     * Create a listener for node's properties changes.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperties(callback) {\n        return this.properties.observe(callback);\n    }\n};\n","export function delegate(element, evName, selector, callback) {\n    element.addEventListener(evName, (event) => {\n        let target = event.target;\n        while (target && target !== element) {\n            if (target.matches(selector)) {\n                if (callback.call(element, event, target) === false) {\n                    return;\n                }\n            }\n            target = target.parentNode;\n        }\n    });\n}\n","import { isFunction } from './typeof.js';\n\nfunction createStyle(id) {\n    let styleElem = document.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', id);\n    return styleElem;\n}\n\n/**\n * Add `<style>` tag for the component.\n * @param {String} id The CSS element unique id.\n * @param {Array|Function|String}\n * style An array of styles or a css generator function or a CSS string.\n * @return {HTMLStyleElement} the style tag created.\n */\nexport function importStyle(id, styles) {\n    let styleElem = document.getElementById(id);\n    if (!styleElem) {\n        let css = '';\n        if (!Array.isArray(styles)) {\n            styles = [styles];\n        }\n        styles.forEach((style) => {\n            if (isFunction(style)) {\n                style = style();\n            }\n            css += style;\n        });\n        id = `style-${id}`;\n        styleElem = createStyle(id);\n        styleElem.textContent = css;\n        if (!styleElem.parentNode) {\n            let head = document.head;\n            if (head.firstElementChild) {\n                head.insertBefore(styleElem, head.firstElementChild);\n            } else {\n                head.appendChild(styleElem);\n            }\n        }\n    }\n    return styleElem;\n}\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","import {\n    elementVoid,\n    elementOpen,\n    elementOpenStart,\n    elementOpenEnd,\n    elementClose,\n    text,\n} from '../../incremental-dom/index.js';\nimport { Parser } from './parser.js';\n\nfunction iterateProps(props, callback) {\n    if (props) {\n        // eslint-disable-next-line\n        for (let k in props) {\n            let res = callback(k, props[k]);\n            if (res) {\n                return res;\n            }\n        }\n    }\n    return false;\n}\n\nfunction handleProps(props) {\n    let res = [];\n    iterateProps(props, (key, value) => {\n        if (value === true) {\n            value = '';\n        }\n        res.push(key, value);\n    });\n    return res;\n}\n\nexport class Render {\n    addChunk(str) {\n        let parser = new Parser(str);\n        let data = parser.next();\n        while (data) {\n            switch (data.type) {\n            case Parser.OPEN_ELEMENT:\n                if (data.continue) {\n                    this.elementOpenStart(data);\n                    this.setElementOpen(data.tag);\n                } else {\n                    this.elementOpen(data);\n                }\n                break;\n            case Parser.OPEN_ELEMENT_END:\n                this.elementOpenEnd(data);\n                this.clearElementOpen();\n                break;\n            case Parser.CLOSE_ELEMENT:\n                this.elementClose(data);\n                break;\n            case Parser.CONTENT:\n                if (this.isElementOpen()) {\n                    let props = Parser.convertProps(data.content);\n                    if (props) {\n                        iterateProps(props, (key, value) => {\n                            if (value === false) {\n                                if (this.hasLastAttr()) {\n                                    this.fillLastAttr(key);\n                                } else {\n                                    this.setLastAttr(key);\n                                }\n                            } else {\n                                this.addProperty(key, value);\n                            }\n                        });\n                    }\n                } else {\n                    this.addText(data);\n                }\n                break;\n            default:\n                break;\n            }\n            data = parser.next();\n        }\n    }\n\n    elementOpen(data) {\n        if (data.props) {\n            iterateProps(data.props, (key, value) => {\n                if (value === false) {\n                    this.setLastAttr(key);\n                    delete data.props[key];\n                }\n            });\n        }\n        let props = handleProps(data.props);\n        if (data.selfClosing) {\n            elementVoid(data.tag, null, null, ...props);\n        } else {\n            elementOpen(data.tag, null, null, ...props);\n        }\n    }\n\n    elementOpenStart(data) {\n        if (data.props) {\n            iterateProps(data.props, (key, value) => {\n                if (value === false) {\n                    this.setLastAttr(key);\n                    delete data.props[key];\n                }\n            });\n        }\n        let props = handleProps(data.props);\n        elementOpenStart(data.tag, null, null, ...props);\n    }\n\n    elementOpenEnd(data) {\n        elementOpenEnd();\n        if (data.selfClosing || Parser.isSelfClosing(this.getElementOpen())) {\n            this.elementClose(data);\n        }\n    }\n\n    elementClose(data) {\n        elementClose(data.tag);\n        this.clearLastAttr();\n    }\n\n    addText(data) {\n        text(data.content);\n    }\n\n    addProperty(attr, val) {\n        attr(attr, val);\n    }\n\n    fillLastAttr(val) {\n        this.addProperty(this.getLastAttr(), val);\n        this.clearLastAttr();\n    }\n\n    setLastAttr(name) {\n        if (this.hasLastAttr()) {\n            this.fillLastProperty(this.getLastAttr(), true);\n        }\n        this.lastAttr = name;\n    }\n\n    clearLastAttr() {\n        this.lastAttr = null;\n    }\n\n    getLastAttr() {\n        return this.lastAttr;\n    }\n\n    hasLastAttr() {\n        return !!this.lastAttr;\n    }\n\n    setElementOpen(tag) {\n        this.lastElement = tag;\n    }\n\n    getElementOpen() {\n        return this.lastElement;\n    }\n\n    isElementOpen() {\n        return !!this.lastElement;\n    }\n\n    clearElementOpen() {\n        this.lastElement = null;\n    }\n}\n","import { patchInner } from '../../incremental-dom/index.js';\nimport { Render } from './render.js';\n\nfunction normalizeValue(value) {\n    if (Array.isArray(value)) {\n        value = value.join('');\n    } else if (typeof value === 'object') {\n        try {\n            value = JSON.stringify(value);\n        } catch (ex) {\n            value = value.toString();\n        }\n    }\n    return value;\n}\n\nexport class Template {\n    constructor(renderFunction) {\n        this.reset();\n        this.renderFunction = renderFunction;\n    }\n\n    render(node, ...args) {\n        return patchInner(\n            node,\n            () => this.renderFunction(this.t.bind(this), ...args)\n        );\n    }\n\n    reset() {\n        this.renderFactory = new Render();\n    }\n\n    t(strings, ...values) {\n        if (!Array.isArray(strings)) {\n            strings = [strings];\n        }\n        strings.forEach((str, index) => {\n            this.renderFactory.addChunk(str);\n            if (index < values.length) {\n                if (this.renderFactory.hasLastAttr()) {\n                    this.renderFactory.fillLastAttr(values[index]);\n                } else {\n                    this.t(normalizeValue(values[index]));\n                }\n            }\n        });\n    }\n}\n","import { notifications, attributes, symbols } from '../../node_modules/incremental-dom/index.js';\nimport { isUndefined } from './typeof.js';\nimport { registry } from './registry.js';\n\nconst CUSTOM_ELEMENTS = self.customElements;\nconst HAS_REGISTRY = !isUndefined(CUSTOM_ELEMENTS);\nlet _created = notifications.nodesCreated;\nlet _removed = notifications.nodesDeleted;\nlet _changed = attributes[symbols.default];\n\nfunction getDescriptor(node) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n        let is = node.getAttribute('is') || node.tagName;\n        if (!HAS_REGISTRY || !CUSTOM_ELEMENTS.get(is)) {\n            let desc = registry.get(is);\n            if (desc) {\n                return desc;\n            }\n        }\n    }\n    return null;\n}\n\nfunction createNode(node, desc) {\n    desc = desc || getDescriptor(node);\n    if (desc) {\n        node.__proto__ = desc.Ctr.prototype;\n        Object.defineProperty(node, 'constructor', {\n            value: desc.Ctr,\n            configurable: true,\n            writable: true,\n        });\n        desc.Ctr.prototype.constructor.call(node);\n        node.connectedCallback();\n    }\n}\n\nnotifications.nodesCreated = function(nodes) {\n    nodes.forEach((node) => createNode(node));\n    if (_created) {\n        _created(nodes);\n    }\n};\n\nnotifications.nodesDeleted = function(nodes) {\n    nodes.forEach((node) => {\n        let desc = getDescriptor(node);\n        if (desc) {\n            node.disconnectedCallback();\n        }\n    });\n    if (_removed) {\n        _removed(nodes);\n    }\n};\n\nattributes[symbols.default] = function(node, attrName, attrValue) {\n    let desc = getDescriptor(node);\n    if (desc) {\n        if (!node.is) {\n            createNode(node, desc);\n        }\n        let oldValue = node.getAttribute(attrName);\n        if (desc.Ctr.observedAttributes &&\n            desc.Ctr.observedAttributes.indexOf(attrName) !== -1) {\n            node.attributeChangedCallback(attrName, oldValue, attrValue);\n        }\n    }\n    if (_changed) {\n        _changed(node, attrName, attrValue);\n    }\n};\n","import { registry } from './registry.js';\nimport { isUndefined } from './typeof.js';\nimport './tree-observer.js';\n\n/**\n * Create the Component constructor.\n * @param {String} tagName The nickname of the Component.\n * @param {Function} Component The definition of the Component.\n * @param {Object} config A set of options for the registration of the Component.\n * @return {Function} The Component constructor.\n */\nexport function define(tagName, Component, config) {\n    config = config || {};\n    Object.defineProperty(Component.prototype, 'is', {\n        configurable: false,\n        get: () => tagName,\n    });\n    registry.define(tagName, Component, config);\n    if (!isUndefined(self.customElements)) {\n        self.customElements.define(tagName, Component, config);\n    }\n    return Component;\n}\n","/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nclass Mixin {\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n\n    with() {\n        // eslint-disable-next-line\n        return Array.from(arguments).reduce((c, m) => m(c), this.superclass);\n    }\n}\n\nexport const mix = (superClass) => new Mixin(superClass);\n","class Registry {\n    constructor() {\n        this.components = {};\n    }\n\n    define(name, Ctr, config) {\n        this.components[name.toLowerCase()] = {\n            Ctr,\n            config,\n        };\n    }\n\n    get(name) {\n        return this.components[name.toLowerCase()];\n    }\n}\n\nexport const registry = new Registry();\n","import { polyfill } from './helpers/polyfill.js';\n\nconst Element = polyfill('HTMLElement');\n\n/**\n * This is the model to use to create DNA Custom Components.\n * @class Component\n * @extends HTMLElement\n *\n * @example\n * my-component.js\n * ```js\n * import { Component } from 'dna/component';\n * export class MyComponent extends Component {\n *   get constructor() {\n *     console.log('Created a MyComponent instance!!!');\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent(); // logs \"Created a MyComponent instance!!!\"\n * ```\n */\nexport class Component extends Element {\n    /**\n     * Fires when an instance was inserted into the document.\n     */\n    connectedCallback() {}\n    /**\n     * Fires when an instance was detached from the document.\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n}\n","import { delegate } from './helpers/delegate.js';\nimport { isString, isFunction } from './helpers/typeof.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n *\n * @example\n * my-component.js\n * ```js\n * import { EventsMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(EventsMixin) {\n *   static get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        // bind events\n        let events = this.constructor.events || {};\n        for (let k in events) {\n            if (events.hasOwnProperty(k)) {\n                let callback = isString(events[k]) ?\n                    this[events[k]] :\n                    events[k];\n                if (isFunction(callback)) {\n                    let rule = k.match(SPLIT_SELECTOR);\n                    let evName = rule[1];\n                    let selector = (rule[2] || '').trim();\n                    if (selector) {\n                        delegate(this, evName, selector, (ev, target) => {\n                            callback.call(this, ev, target);\n                        });\n                    } else {\n                        this.addEventListener(evName, (ev) => {\n                            callback.call(this, ev, this);\n                        });\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        if (!evName) {\n            throw new Error('Event name is undefined');\n        }\n        let ev = new CustomEvent(evName, {\n            detail: data,\n            bubbles,\n            cancelable,\n        });\n        return this.dispatchEvent(ev);\n    }\n};\n","import { importStyle } from './helpers/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { StyleMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(StyleMixin) {\n *   static get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (this.is) {\n            // Add <style>\n            let Ctr = this.constructor;\n            let style = Ctr.css;\n            if (style) {\n                importStyle(this.is, style);\n            }\n            // Add scope style class\n            this.classList.add(this.is);\n        }\n    }\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nlet inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nconst assertInPatch = function(functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nconst assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nconst assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nconst assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nconst assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nconst assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nconst assertCloseMatchesOpenTag = function(nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close \"' + tag + '\" but \"' +\n        nodeName + '\" was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nconst assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nconst assertPatchElementNoExtras = function(\n    startNode,\n    currentNode,\n    expectedNextNode,\n    expectedPrevNode) {\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInAttributes = function(value) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInSkip = function(value) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","/**\n * Match initial spaces in a string.\n * @private\n * @type {RegExp}\n */\nconst START_SPACES_REGEX = /^\\s*/g;\n/**\n * Match spaces between tags.\n * @private\n * @type {RegExp}\n */\nconst TAG_SPACES = /\\>\\s+\\</g;\n/**\n * Match text until tag.\n * @private\n * @type {RegExp}\n */\nconst TEXT_REGEX = /([^<]*)/m;\n/**\n * Match opening and closing tags.\n * @private\n * @type {RegExp}\n */\nconst TAG_REGEX = /(<\\/?([a-zA-Z1-9\\-]*)([^>]*)>?)/m;\n/**\n * Match tag attributes.\n * @private\n * @type {RegExp}\n */\nconst PROPS_REGEX = /([^><]*)>?/m;\n/**\n * Match unwanted characters in tag attribute definition.\n * @private\n * @type {RegExp}\n */\nconst CLEAN_PROPS_STR = /[\\'\\\"\\/\\s]/;\n/**\n * A list of self closing HTML tags.\n * @private\n * @type {Array}\n */\nconst SELF_CLOSING_TAGS = [\n    'area',\n    'base',\n    'br',\n    'col',\n    'command',\n    'embed',\n    'hr',\n    'img',\n    'input',\n    'keygen',\n    'link',\n    'meta',\n    'param',\n    'source',\n    'track',\n    'wbr',\n];\n/**\n * Match self closing tags.\n * @private\n * @type {RegExp}\n */\nconst CLOSED_TAG = /\\/>$/;\n\n/**\n * String HTML parser for Incremental DOM rendering.\n * @class Parser\n */\nexport class Parser {\n    /**\n     * Check if a string matches a self closing tag.\n     * @param {String} str The string to check.\n     * @return {Boolean}\n     */\n    static isSelfClosing(str) {\n        return SELF_CLOSING_TAGS.indexOf(\n            str.toLowerCase()\n        ) !== -1 || !!str.match(CLOSED_TAG);\n    }\n\n    static convertProps(str = '', defaultEmpty = false) {\n        if (str) {\n            str = str.trim();\n            let isOpenAttr = false;\n            let isOpenApix = false;\n            let isString = false;\n            let isOpenValue = false;\n            let attrName = null;\n            let res = {};\n            for (let i = 0, len = str.length; i < len; i++) {\n                let ch = str[i];\n                if (ch === '=') {\n                    if (isOpenAttr) {\n                        res[attrName] = false;\n                        isOpenAttr = false;\n                        isOpenValue = true;\n                    }\n                } else if (ch.match(/[\\s|\\n]/)) {\n                    if (isOpenApix) {\n                        res[attrName] = res[attrName] || '';\n                        res[attrName] += ch;\n                    } else if (isOpenAttr) {\n                        if (attrName) {\n                            res[attrName] = true;\n                            attrName = null;\n                            isOpenAttr = false;\n                        }\n                    } else if (isOpenValue) {\n                        if (!isString) {\n                            if (res[attrName] === 'undefined') {\n                                res[attrName] = undefined;\n                            } else if (res[attrName] === 'null') {\n                                res[attrName] = null;\n                            }\n                        }\n                        attrName = null;\n                        isOpenValue = false;\n                        isString = false;\n                    }\n                } else if ((ch === '\"' || ch === '\\'') && attrName) {\n                    if (isOpenValue && res[attrName] !== false) {\n                        attrName = null;\n                        isOpenAttr = false;\n                        isOpenApix = false;\n                    } else {\n                        isOpenApix = true;\n                        isString = true;\n                        res[attrName] = res[attrName] || '';\n                    }\n                } else if (isOpenValue) {\n                    res[attrName] = res[attrName] || '';\n                    res[attrName] += ch;\n                } else {\n                    isOpenAttr = true;\n                    attrName = attrName || '';\n                    if (attrName !== '' || !ch.match(CLEAN_PROPS_STR)) {\n                        attrName += ch;\n                    }\n                }\n            }\n            if (isOpenAttr && attrName) {\n                res[attrName] = defaultEmpty;\n            } else if (isOpenValue && !isString) {\n                if (res[attrName] === 'undefined') {\n                    res[attrName] = undefined;\n                } else if (res[attrName] === 'null') {\n                    res[attrName] = null;\n                }\n            } else if (isOpenApix) {\n                res[attrName] = false;\n            }\n            return res;\n        }\n        return {};\n    }\n\n    constructor(data) {\n        this.data = data;\n        this.restart();\n    }\n    /**\n     * Reset parser index.\n     */\n    restart() {\n        this.setCurrent(this.data);\n    }\n    /**\n     * Set data for the next parsing step.\n     * @private\n     * @param {String} data\n     */\n    setCurrent(data) {\n        if (typeof data === 'string') {\n            this.current = data\n                .replace(START_SPACES_REGEX, '')\n                .replace(TAG_SPACES, '><');\n        }\n    }\n    /**\n     * Check if all data has been parsed.\n     * @return {Boolean}\n     */\n    ended() {\n        return !this.current;\n    }\n\n    next() {\n        let res = false;\n        if (!this.ended()) {\n            let match;\n            let current = this.current;\n            if (current[0] !== '<') {\n                if (current[0] === '>') {\n                    match = [current, '>'];\n                    res = {\n                        chunk: current,\n                        type: Parser.OPEN_ELEMENT_END,\n                    };\n                } else {\n                    match = current.match(PROPS_REGEX);\n                    if (!match) {\n                        match = current.match(TEXT_REGEX);\n                    }\n                    res = {\n                        chunk: current,\n                        type: Parser.CONTENT,\n                        content: match[1],\n                    };\n                }\n            } else {\n                match = current.match(TAG_REGEX);\n                if (current[1] === '/') {\n                    res = {\n                        chunk: current,\n                        type: Parser.CLOSE_ELEMENT,\n                        tag: match[2],\n                    };\n                } else {\n                    let longMatch = match[1];\n                    if (longMatch[longMatch.length - 1] === '>') {\n                        res = {\n                            chunk: current,\n                            type: Parser.OPEN_ELEMENT,\n                            continue: false,\n                            tag: match[2],\n                            selfClosing: Parser.isSelfClosing(match[2]) ||\n                                Parser.isSelfClosing(longMatch),\n                            props: Parser.convertProps(match[3], true),\n                        };\n                    } else {\n                        res = {\n                            chunk: current,\n                            type: Parser.OPEN_ELEMENT,\n                            continue: true,\n                            tag: match[2],\n                            selfClosing: Parser.isSelfClosing(match[2]),\n                            props: Parser.convertProps(match[3]),\n                        };\n                    }\n                }\n            }\n            if (match && match[1] !== current) {\n                this.setCurrent(current.substring(match[1].length));\n            } else {\n                this.setCurrent('');\n            }\n        }\n        return res;\n    }\n}\n\n/**\n * Opening element state key.\n * @type {String}\n */\nParser.OPEN_ELEMENT = 'OPEN_ELEMENT';\n/**\n * Closing element definition state key.\n * @type {String}\n */\nParser.OPEN_ELEMENT_END = 'OPEN_ELEMENT_END';\n/**\n * Close element state key.\n * @type {String}\n */\nParser.CLOSE_ELEMENT = 'CLOSE_ELEMENT';\n/**\n * Content state key.\n * @type {String}\n */\nParser.CONTENT = 'CONTENT';\n","import { Template } from '../node_modules/skin-template/src/template.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, TemplateMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(TemplateMixin) {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        if (this.template) {\n            this.observeProperties(() => {\n                this.render();\n            });\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @return Promise The render promise.\n     */\n    render() {\n        let tpl = this.template;\n        if (tpl instanceof Template) {\n            tpl.render(this);\n        } else {\n            throw new Error('Invalid template property.');\n        }\n    }\n};\n","import { mix } from './helpers/mixins.js';\nimport { Component } from './dna-component.js';\nimport { StyleMixin } from './dna-style-component.js';\nimport { EventsMixin } from './dna-events-component.js';\nimport { PropertiesMixin } from './dna-properties-component.js';\nimport { TemplateMixin } from './dna-template-component.js';\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends Component\n *\n * @example\n * my-component.js\n * ```js\n * import { BaseComponent } from 'dna/component';\n * export class MyComponent extends BaseComponent {\n *   static get css() {\n *     return '...';\n *   }\n *   static get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get template() {\n *     return `...`;\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n */\nconst MixinComponent = mix(Component).with(\n    PropertiesMixin,\n    StyleMixin,\n    EventsMixin,\n    TemplateMixin\n);\n\nexport class BaseComponent extends MixinComponent {}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * A component pattern for Web artisans.\n */\nexport { mix } from './helpers/mixins.js';\nexport * from './dna-component.js';\nexport * from './dna-properties-component.js';\nexport * from './dna-events-component.js';\nexport * from './dna-style-component.js';\nexport * from './dna-template-component.js';\nexport * from './dna-base-component.js';\nexport { BaseComponent as BaseComponent } from './dna-base-component.js';\nexport { Template } from '../node_modules/skin-template/src/template.js';\nexport { polyfill } from './helpers/polyfill.js';\nexport { define } from './helpers/define.js';\nexport { prop } from './helpers/property.js';\nexport const Version = self.__DNA__VERSION__ || 'dev';\n"],"names":["fn","str","obj","isArray","node","isString","outerHTML","ex","name","self","this","constructor","isNew","registry","get","is","desc","config","document","createElement","extends","element","setAttribute","__proto__","Ctr","prototype","Modified","Object","create","Original","value","configurable","writable","replace","DASH","CAMEL_TO_DASH","toLowerCase","DASH_TO_CAMEL","x","chr","toUpperCase","context","attr","getAttribute","currentAttrValue","undefined","type","removeAttribute","ctrs","property","attrVal","accepts","Boolean","String","parse","evName","selector","callback","addEventListener","event","target","matches","call","parentNode","id","styleElem","styles","getElementById","Array","forEach","style","isFunction","css","createStyle","textContent","head","firstElementChild","insertBefore","appendChild","nodeName","key","attrs","createMap","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","created","notifications","nodesCreated","deleted","nodesDeleted","props","k","res","iterateProps","push","join","JSON","stringify","toString","nodeType","Node","ELEMENT_NODE","tagName","HAS_REGISTRY","CUSTOM_ELEMENTS","getDescriptor","defineProperty","connectedCallback","Component","define","isUndefined","customElements","superclass","with","from","arguments","reduce","c","m","superClass","components","polyfill","disconnectedCallback","attributeChangedCallback","Element","callbacks","observe","unobserve","indexOf","io","splice","changed","newValue","oldValue","len","length","i","ress","_ObserverMixin","_this","required","validator","beforeSet","val","getter","setter","validateType","default","initValue","scoped","scope","bind","set","require","before","validate","init","ObserverMixin","_ObserverMixin2","_this2","add","PropertyList","isObject","hasOwnProperty","p","has","iterate","prop","Number","SuperClass","_SuperClass","properties","partialProps","list","slice","attributes","dashToCamel","propName","initProps","getValue","camelToDash","attrName","_class","oldVal","newVal","observeProperty","observeProperties","events","match","SPLIT_SELECTOR","rule","trim","delegate","ev","trigger","data","detail","bubbles","cancelable","dispatchEvent","importStyle","classList","Blank","map","importNode","isElement","localName","initData","getData","firstChild","child","nextSibling","tag","parent","namespaceURI","doc","getNamespaceForTag","el","namespace","createElementNS","createTextNode","Context","markCreated","markDeleted","notifyChanges","openElement","root","currentElement","openTags","functionName","inAttributes","inSkip","cur","ancestry","prev","getRoot","activeElement","getActiveElement","contains","referenceNode","insertReferenceNode","next","focusPath","run","currentNode","currentParent","ownerDocument","previousInAttributes","setInAttributes","previousInSkip","setInSkip","getFocusedPath","markFocused","assertVirtualAttributesClosed","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","patchFactory","enterNode","exitNode","assertNoUnclosedTags","matchNode","parentData","keyNode","removeChild","createText","moveBefore","currentNodeData","replaceChild","lastChild","getNextNode","clearUnvisitedDOM","nextNode","alignWithDOM","lastIndexOf","getNamespace","attrNS","setAttributeNS","setProperty","cssText","setStyleValue","elStyle","applyProp","applyAttr","symbols","mutator","applyAttributeTyped","applyStyle","statics","var_args","assertNotInAttributes","assertNotInSkip","coreElementOpen","_i","updateAttribute","ATTRIBUTES_OFFSET","j","_attr","_value","_name","_value2","_attr2","argsBuilder","assertInAttributes","elementOpen","apply","coreElementClose","assertCloseMatchesOpenTag","coreText","formatted","restart","Parser","isSelfClosing","CLOSED_TAG","convertProps","ch","isOpenAttr","isOpenValue","isOpenApix","CLEAN_PROPS_STR","defaultEmpty","setCurrent","current","START_SPACES_REGEX","TAG_SPACES","ended","chunk","OPEN_ELEMENT_END","PROPS_REGEX","TEXT_REGEX","CONTENT","content","TAG_REGEX","CLOSE_ELEMENT","longMatch","OPEN_ELEMENT","continue","selfClosing","substring","addChunk","parser","elementOpenStart","setElementOpen","elementOpenEnd","clearElementOpen","elementClose","isElementOpen","hasLastAttr","fillLastAttr","setLastAttr","addProperty","addText","handleProps","elementVoid","_elementOpen","_this3","_elementOpenStart","_elementOpenEnd","getElementOpen","_elementClose","clearLastAttr","getLastAttr","fillLastProperty","lastAttr","lastElement","renderFunction","reset","Template","render","args","t","renderFactory","strings","values","index","normalizeValue","template","tpl","mix","PropertiesMixin","StyleMixin","EventsMixin","TemplateMixin","MixinComponent","nodes","_created","_removed","attrValue","createNode","observedAttributes","_changed","__DNA__VERSION__"],"mappings":"wMAA2BA,GACvB,MAAqB,qBAGzB,WAAyBC,GACrB,MAAsB,mBAG1B,WAAyBC,GACrB,MAAsB,gDAARA,IAGlB,WAA4BA,GACxB,MAAsB,sBAG1B,WAAwBA,GACpB,aAAaC,QAAQD,GCdzB,WAAeE,GACX,IACI,OAAQC,EAASD,EAAKE,WACxB,MAAOC,GACL,UAIR,WAAyBC,GACrB,MAAiBC,KAAKD,KACL,WACb,GAAIE,KAAKC,YAAa,CAClB,IAAKC,EAAMF,MACP,WAEJ,OAAWG,EAASC,IAAIJ,KAAKK,MAChBC,EAAKC,SAEJC,SAASC,cACnBF,EAAOG,QAAUH,EAAOG,QAAUV,KAAKK,GAM3C,OAJIE,GAAOG,SACPC,EAAQC,aAAa,KAAMZ,KAAKK,IAEpCM,EAAQE,UAAYP,EAAKQ,IAAIC,YAGjC,YAUJ,OARAhB,MAAKD,GAAQkB,EACbjB,KAAKD,GAAMiB,UAAYE,OAAOC,OAAOC,EAASJ,WAC1Cd,aACImB,MAAOrB,KAAKD,GACZuB,cAAc,EACdC,UAAU,UAGNxB,GC/BhB,WAA4BP,GACxB,SAAWgC,QAAQC,EAAM,KAAKD,QAAQE,EAAe,SAASC,cAOlE,WAA4BnC,GACxB,SAAWgC,QAAQI,EAAe,SAACC,EAAGC,YAAYC,2BClBzBC,EAASC,EAAMZ,GACxC,MAAuBW,EAAQE,aAAaD,EAC5C,IAAIE,IAAqBd,EACrB,GAAc,OAAVA,GAA4Be,SAAVf,GAAuBA,KAAU,EAAO,CAC1D,0CAAkBA,EACL,YAATgB,GAA8B,WAATA,EACrBL,EAAQnB,aAAaoB,EAAMZ,GACX,YAATgB,GACPL,EAAQnB,aAAaoB,EAAM,QAEH,QAArBE,GACPH,EAAQM,gBAAgBL,GC2LpC,WAAqBM,GACjB,aAAoBA,GClMxB,WAAkBC,EAAUC,GACxB,GAAgB,KAAZA,GAAkBD,EAASE,QAAQC,SACnC,QAEJ,KAAKH,EAASE,QAAQE,QAClB,IACI,YAAYC,MAAMJ,GACpB,MAAO3C,IAIb,oBChBqBc,EAASkC,EAAQC,EAAUC,GAChDpC,EAAQqC,iBAAiBH,EAAQ,SAACI,GAE9B,IADA,MAAaA,EAAMC,OACZA,GAAUA,IAAWvC,GAAS,CACjC,GAAIuC,EAAOC,QAAQL,IACXC,EAASK,KAAKzC,EAASsC,EAAOC,MAAY,EAC1C,MAGRA,GAASA,EAAOG,cCP5B,WAAqBC,GACjB,MAAgB9C,SAASC,cAAc,QAGvC,OAFA8C,GAAUnB,KAAO,WACjBmB,EAAU3C,aAAa,KAAM0C,KAWjC,WAA4BA,EAAIE,GAC5B,MAAgBhD,SAASiD,eAAeH,EACxC,KAAKC,EAAW,CACZ,MAAU,EAaV,IAZKG,MAAMjE,QAAQ+D,KACfA,GAAUA,IAEdA,EAAOG,QAAQ,SAACC,GACRC,EAAWD,KACXA,EAAQA,KAEZE,GAAOF,IAEXN,WAAcA,EACdC,EAAYQ,EAAYT,GACxBC,EAAUS,YAAcF,GACnBP,EAAUF,WAAY,CACvB,MAAW7C,SAASyD,IAChBA,GAAKC,kBACLD,EAAKE,aAAaZ,EAAWU,EAAKC,mBAElCD,EAAKG,YAAYb,IAI7B,SCdJ,cCXA,WASkBc,EAAUC,GAK1BtE,KAAKuE,MAAQC,IAQbxE,KAAKyE,YAMLzE,KAAK0E,SAAWF,IAMhBxE,KAAK2E,gBAAiB,EAOtB3E,KAAKsE,IAAMA,EAMXtE,KAAK4E,OAASJ,IAMdxE,KAAK6E,aAAc,EAMnB7E,KAAK8E,SAAU,EAMf9E,KAAKqE,SAAWA,EAKhBrE,KAAK+E,KAAO,KCtEd,aAWE/E,KAAKgF,QAAUC,GAAcC,iBAK7BlF,KAAKmF,QAAUF,GAAcG,iBCtB/B,WAAsBC,EAAOtC,GACzB,GAAIsC,EAEA,IAAK,WAAgB,CACjB,MAAUtC,EAASuC,EAAGD,EAAMC,GAC5B,IAAIC,EACA,SAIZ,SAGJ,WAAqBF,GACjB,QAOA,OANAG,GAAaH,EAAO,SAACf,EAAKlD,GAClBA,KAAU,IACVA,EAAQ,IAEZmE,EAAIE,KAAKnB,EAAKlD,OC1BtB,WAAwBA,GACpB,GAAIsC,MAAMjE,QAAQ2B,GACdA,EAAQA,EAAMsE,KAAK,YACK,gDAAVtE,IACd,IACIA,EAAQuE,KAAKC,UAAUxE,GACzB,MAAOvB,GACLuB,EAAQA,EAAMyE,WAGtB,SCHJ,WAAuBnG,GACnB,GAAIA,EAAKoG,WAAaC,KAAKC,aAAc,CACrC,MAAStG,EAAKuC,aAAa,OAASvC,EAAKuG,OACzC,KAAKC,KAAiBC,GAAgB/F,IAAIC,GAAK,CAC3C,MAAWF,EAASC,IAAIC,EACxB,IAAIC,EACA,UAIZ,YAGJ,WAAoBZ,EAAMY,GACtBA,EAAOA,GAAQ8F,EAAc1G,GACzBY,IACAZ,EAAKmB,UAAYP,EAAKQ,IAAIC,UAC1BE,OAAOoF,eAAe3G,EAAM,eACxB0B,MAAOd,EAAKQ,IACZO,cAAc,EACdC,UAAU,IAEdhB,EAAKQ,IAAIC,UAAUd,YAAYmD,KAAK1D,GACpCA,EAAK4G,gCCtBUL,EAASM,EAAWhG,GAUvC,MATAA,GAASA,MACTU,OAAOoF,eAAeE,EAAUxF,UAAW,MACvCM,cAAc,EACdjB,IAAK,uBAETD,EAASqG,OAAOP,EAASM,EAAWhG,GAC/BkG,EAAY1G,KAAK2G,iBAClB3G,KAAK2G,eAAeF,OAAOP,EAASM,EAAWhG,o4BCdnD,WAAYoG,aACRA,EAAaA,iDACb3G,KAAK2G,WAAaA,qBAGtBC,gBAEI,aAAaC,KAAKC,WAAWC,OAAO,SAACC,EAAGC,YAAQD,IAAIhH,KAAK2G,oBAI9C,SAACO,gBAAyBA,iBCfzC,uBACIlH,KAAKmH,iCAGTX,gBAAO1G,EAAMgB,EAAKP,GACdP,KAAKmH,WAAWrH,EAAK4B,gBACjBZ,MACAP,uBAIRH,aAAIN,GACA,YAAYqH,WAAWrH,EAAK4B,uBAIZ,QCfR0F,EAAS,yGAyBzBb,YAIID,+BAJJC,YAQIc,kCARJd,YAeIe,yCAf2BC,Kf3BlB,SACS,sBACA,YEAPtG,OAAOoF,4BAGlB,uBACIrG,KAAKwH,gCAGTC,iBAAQnI,GAIJ,MAHIuE,GAAWvE,IACXU,KAAKwH,UAAU/B,KAAKnG,qBAK5BoI,mBAAUpI,GACN,MAASU,KAAKwH,UAAUG,QAAQrI,EAIhC,OAHIsI,MAAO,GACP5H,KAAKwH,UAAUK,OAAOD,EAAI,qBAKlCE,iBAAQC,EAAUC,GAEd,IAAK,WAAQ,EAAGC,EAAMjI,KAAKwH,UAAUU,OAAQC,EAAIF,EAAKE,IAAK,CACvD,MAAUnI,KAAKwH,UAAUW,GAAGJ,EAAUC,EACtC,IAAIzC,KAAQ,EACR,QAEJ6C,GAAK3C,KAAKF,GAEd,6BAKJ,WAAYjD,0BACR+F,aADc,OAEd/F,GAAOA,MACF7C,EAAQ6C,KACTA,GAAQA,IAEZgG,EAAKhG,KAAOA,EACZgG,EAAKC,UAAW,EAChBD,EAAKE,UAAY,qBACjBF,EAAKG,UAAY,SAACC,aAClBJ,EAAKK,OAAS,oBAAWvH,OACzBkH,EAAKM,OAAS,SAACF,GAEX,GADAA,EAAMJ,EAAKG,UAAUC,GACjBJ,EAAKO,aAAaH,IACdJ,EAAKE,UAAUE,GAAM,CACrB,GAAIJ,EAAKlH,QAAUsH,EAAK,CACpB,MAAeJ,EAAKlH,KACpBkH,GAAKlH,MAAQsH,EACbJ,EAAKR,QAAQY,EAAKV,GAEtB,SAGR,sCAIRvF,iBAAQ3B,GACJ,YAAYwB,KAAKqF,QAAQ7G,MAAS,eAGtCgI,iBAAQC,GAEJ,MADA/I,MAAKoB,MAAQ2H,oBAIjBC,gBAAOC,GAOH,MANAjJ,MAAKiJ,MAAQA,EACbzC,EAAOyC,EAAOjJ,KAAKF,MACfM,IAAKJ,KAAK2I,OAAOO,KAAKlJ,MACtBmJ,IAAKnJ,KAAK4I,OAAOM,KAAKlJ,MACtBqB,cAAc,sBAMtB+H,mBAEI,MADApJ,MAAKuI,UAAW,oBAIpBc,gBAAOtG,GAIH,MAHIc,GAAWd,KACX/C,KAAKyI,UAAY1F,qBAKzBuG,kBAASvG,GAIL,MAHIc,GAAWd,KACX/C,KAAKwI,UAAYzF,qBAKzB8F,sBAAaH,GACT,MAAQ,IACG1I,KAAKsC,IAChB,IAAoB,IAAhBA,EAAK4F,OACL,QAEJ,MAAOC,EAAI7F,EAAK4F,QAAQ,CACpB,GAAIQ,eAAoBP,IACpBO,EAAIzI,aAAeyI,EAAIzI,cAAgBqC,EAAK6F,GAE5C,QAEJA,KAGJ,gCACgBO,kBAAmB1I,KAAKF,uBAAsBE,KAAKiJ,MAAM5I,gCAI7EkJ,cAAKnI,GACD,IAAKqF,EAAYrF,KACRpB,KAAK4I,OAAOxH,IACTpB,KAAKuI,SACL,oBACQvI,KAAKF,mCAAkCE,KAAKiJ,MAAM5I,uBA5FvDmJ,iBAqGnB,WAAYnE,0BACRoE,aADe,OAEfC,GAAKrE,SACLqE,EAAKC,IAAItE,mBAJjBuE,YAOID,aAAIpH,aACA,IAAIA,eACAvC,KAAKqF,MAAMI,KACPlD,EAASkF,QAAQ,SAACM,EAAUC,YACnBF,QAAQC,EAAUC,cAGxB6B,EAAStH,GAChB,IAAK,WACD,GAAIA,EAASuH,eAAexE,GAAI,CAC5B,MAAQ/C,EAAS+C,EACXyE,kBACFA,EAAI,MAAaA,IAErBA,EAAEjK,KAAOwF,EACTtF,KAAK2J,IAAII,iBAMzBC,aAAIlK,GACA,QAASE,KAAKiK,QAAQ,SAAC1H,GACnB,GAAIA,EAASzC,OAASA,EAClB,wBAMZM,aAAIN,GACA,MAAUE,KAAKiK,QAAQ,SAAC1H,GACpB,GAAIA,EAASzC,OAASA,EAClB,UAIR,IAAIyF,EACA,QAEJ,iBAAgB,oCAGpB0E,iBAAQlH,GACJ,IAAK,MAAQ,EAAGkF,EAAMjI,KAAKqF,MAAM6C,OAAQC,EAAIF,EAAKE,IAAK,CACnD,MAAUpF,EAAS/C,KAAKqF,MAAM8C,GAC9B,KAAK1B,EAAYlB,GACb,SAGR,aAzD0BiE,EAiElChD,GAAO0D,EAAM,OAAS9J,eAAQ,cAC9BoG,EAAO0D,EAAM,UAAY9J,eAAQ,SAAYuC,WAC7C6D,EAAO0D,EAAM,WAAa9J,eAAQ,SAAYsC,YAC9C8D,EAAO0D,EAAM,UAAY9J,eAAQ,SAAY+J,UClK7C,OAA+B,SAACC,sBAI5B,oCACIC,gBACY/B,EAAKgC,YAAc,KACzBjF,6BACF,MAAW,KACN5F,GAAQ4F,KACTA,GAASA,IAEbA,EAAM1B,QAAQ,SAAC4G,GACXC,EAAKb,IAAIY,KAEblF,EAAQmF,KAEZvJ,OAAOoF,iBAAqB,cACxBjF,MAAOiE,GAKX,KAAK,MAFY3B,MAAM3C,UAAU0J,MAAMrH,KAAKkF,EAAKoC,eAAkB,UAEtD,EAAGzC,EAAMyC,EAAWxC,OAAQC,EAAIF,EAAKE,IAAK,CACnD,MAAWuC,EAAWvC,KACPwC,EAAY3I,EAAKlC,KAC5BuF,GAAM2E,IAAIY,KACVC,EAAUD,GAAYE,EAASzF,EAAMjF,IAAIwK,GAAW5I,EAAKZ,QAvBvD,MA0BViE,GAAM4E,QAAQ,SAACC,GACX,MAAea,EAAYb,EAAKpK,KAChCoK,GAAKlB,UACLkB,EAAKzC,QAAQ,SAACM,GACVnH,IAAmBoK,EAAUjD,KAEjCmC,EAAKX,KAAKsB,EAAUX,EAAKpK,yBApCNmL,YA6C3B3D,kCAAyBtF,EAAMkJ,EAAQC,GACnCd,YAAM/C,mCAAyBtF,EAAMkJ,EAAQC,EAC7C,OAAeR,EAAY3I,EACvBhC,MAAKsK,WAAWN,IAAIY,KACpB5K,KAAK4K,GAAYE,EAAS9K,KAAKsK,WAAWlK,IAAIwK,GAAWO,KAjDtCF,YA0D3BG,yBAAgBR,EAAU7H,GACtB/C,KAAKsK,WAAWlK,IAAIwK,GAAUnD,QAAQ1E,IA3DfkI,YAkE3BI,2BAAkBtI,GACd,YAAYuH,WAAW7C,QAAQ1E,OAnEsBqH,MaxCtC,kBAiCI,SAACA,sBAIxB,sBAAc,cACVC,gBAEa/B,EAAKrI,YAAYqL,UAC9B,KAAK,WACGA,EAAOxB,eAAexE,gBACtB,MAAe3F,EAAS2L,EAAOhG,IAC3BgD,EAAKgD,EAAOhG,IACZgG,EAAOhG,EACX,IAAIzB,EAAWd,GAAW,CACtB,MAAWuC,EAAEiG,MAAMC,KACNC,EAAK,MACFA,EAAK,IAAM,IAAIC,MAC3B5I,GACA6I,IAAe9I,EAAQC,EAAU,SAAC8I,EAAI1I,GAClCH,EAASK,OAAWwI,EAAI1I,KAG5BoF,EAAKtF,iBAAiBH,EAAQ,SAAC+I,GAC3B7I,EAASK,OAAWwI,UAnB9B,wBAJSX,YAqCvBY,iBAAQhJ,EAAQiJ,gIACZ,KAAKjJ,EACD,gBAAgB,0BAEpB,OAAS,gBAAgBA,GACrBkJ,OAAQD,EACRE,UACAC,cAEJ,aAAYC,cAAcN,OA9CuBxB,MCV/B,SAACA,sBAIvB,oCACIC,aACA,IAAI/B,EAAKjI,GAAI,CAET,MAAUiI,EAAKrI,cACHa,EAAIgD,GACZF,IACAuI,EAAY7D,EAAKjI,GAAIuD,GAGzB0E,EAAK8D,UAAUzC,IAAIrB,EAAKjI,IAVlB,SAJQ,iBAA8B+J,MXNjCnJ,OAAOF,UAAU+I,cASxCuC,GAAMtL,UAAYE,OAAOC,OAAO,KAShC,OAAY,SAASoL,EAAK/J,GACxB,SAAsBa,KAAKkJ,EAAK/J,MAQhB,WAChB,gBCkDe,SAAS7C,EAAM2E,EAAUC,GACxC,MAAa,MAAaD,EAAUC,EAEpC,OADA5E,GAAA,qBAA+BoM,OAWjB,SAASpM,GAEvB,MADA6M,GAAW7M,KACJ,wBASU,WAASA,GAC1B,IAAIA,EAAA,qBAAJ,CAIA,MAAkBA,uBACD8M,EAAY9M,EAAK+M,UAAY/M,EAAK2E,WACvCmI,EAAY9M,EAAKuC,aAAa,OAAS,OACtCyK,EAAShN,EAAM2E,EAAUC,EAMtC,IAJIA,IACFqI,EAAQjN,EAAK2D,YAAYuB,OAAON,GAAO5E,GAGrC8M,EAMF,IAAK,MALc9M,EAAKgL,aACVoB,EAAKvH,QACFuH,EAAKpH,WACLoH,EAAKrH,WAET,EAAG0D,EAAIuC,EAAWxC,OAAQC,GAAK,EAAG,CAC7C,MAAauC,EAAWvC,KACXnG,EAAKlC,OACJkC,EAAKZ,KAEnBmD,GAAMzE,GAAQsB,EACdsD,EAAS5E,GAAQqC,OACjBsC,EAASgB,KAAK3F,GACd2E,EAASgB,KAAKrE,GAIlB,IAAK,MAAY1B,EAAKkN,WAAYC,EAAOA,EAAQA,EAAMC,YACrDP,EAAWM,OW/HY,SAASE,EAAKC,GACvC,MAAY,QAARD,EACK,6BAGwB,kBAA7BJ,EAAQK,GAAQ3I,gBAIN4I,iBAYM,SAASC,EAAKF,EAAQD,EAAKzI,GAC/C,MAAkB6I,EAAmBJ,EAAKC,WAW1C,OAPEI,GADEC,EACGH,EAAII,gBAAgBD,EAAWN,GAE/BG,EAAIzM,cAAcsM,GAGzBL,EAASU,EAAIL,EAAKzI,SAWD,SAAS4I,GAC1B,MAAaA,EAAIK,eAAe,GAEhC,OADAb,GAAShN,EAAM,QAAS,aCjDxBwF,aAAc,KAQdE,aAAc,KXQhBoI,GAAQzM,UAAU0M,YAAc,SAAS/N,GACnCM,KAAKgF,SACPhF,KAAKgF,QAAQS,KAAK/F,IAQtB8N,EAAQzM,UAAU2M,YAAc,SAAShO,GACnCM,KAAKmF,SACPnF,KAAKmF,QAAQM,KAAK/F,IAQtB8N,EAAQzM,UAAU4M,cAAgB,WAC5B3N,KAAKgF,SAAWhF,KAAKgF,QAAQkD,OAAS,GACxCjD,GAAcC,aAAalF,KAAKgF,SAG9BhF,KAAKmF,SAAWnF,KAAKmF,QAAQ+C,OAAS,GACxCjD,GAAcG,aAAapF,KAAKmF,SY3CpC,SAAmB,MAQN,KAoBgB,SAASyI,EAAaC,GACjD,GAAID,IAAgBC,EAApB,CAMA,IAFA,MAAqBD,OAEdE,GAAkBA,IAAmBD,GAC1CE,EAAStI,KAAKqI,EAAezJ,SAAS3C,eACtCoM,EAAiBA,EAAezK,UAGlC,iBAAgB,sCACZ0K,EAASrI,KAAK,YAQU,SAASsI,GACrC,GAAIC,GACF,gBAAgBD,EAAe,6EAUX,SAASA,GAC/B,GAAIE,GACF,gBAAgBF,EAAe,sEAUR,SAASA,GAClC,IAAKC,GACH,gBAAgBD,EAAe,+DASG,WACpC,GAAIC,GACF,gBAAgB,yEAWc,SAAS5J,EAAU0I,GACnD,GAAI1I,IAAa0I,EACf,gBAAgB,6BAA+BA,EAAM,UACjD1I,EAAW,mBAoDK,SAASjD,GAC/B,MAAiB6M,EAEjB,OADAA,IAAe7M,QAUC,SAASA,GACzB,MAAiB8M,EAEjB,OADAA,IAAS9M,QCvKY,SAAS1B,GAI9B,8BAAmCA,kCASjB,SAASA,EAAMmO,GAIjC,IAHA,WACUnO,EAEHyO,IAAQN,GACbO,EAAS3I,KAAK0I,GACdA,EAAMA,EAAI9K,UAGZ,cAQc,SAAS3D,GAIvB,IAHA,MAAUA,IACCyO,EAEJA,GACLE,EAAOF,EACPA,EAAMA,EAAI9K,UAGZ,cASuB,SAAS3D,GAChC,MAAa4O,GAAQ5O,EACrB,WAAsBmO,GAAQA,EAAKU,cAAgB,SAW9B,SAAS7O,EAAMmO,GACpC,MAAsBW,GAAiB9O,EAEvC,OAAK6O,IAAkB7O,EAAK+O,SAASF,MAIlBA,EAAeV,UAWjB,SAASxK,EAAY3D,EAAMgP,GAI5C,IAHA,MAA4BhP,EAAKoN,cACvB4B,EAEHP,IAAQzO,GAAM,CACnB,MAAayO,EAAIrB,WACjBzJ,GAAWc,aAAagK,EAAKQ,GAC7BR,EAAMS,OCpEI,QAGI,QAGE,QAGV,QAOU,SAASC,EAAW/J,GACtC,IAAK,MAAQ,EAAGqD,EAAI0G,EAAU3G,OAAQC,GAAK,EACzCwE,EAAQkC,EAAU1G,IAAIrD,QAAUA,MAYf,SAASgK,GAW5B,MAAU,SAASpP,EAAMJ,EAAIwM,GAC3B,MAAoB/J,KACJmL,KACQ6B,KACEC,MACC,KACN,CAErBjN,IAAU,MACVmL,GAAMxN,EAAKuP,cACXD,GAAgBtP,EAAK2D,WAGnB6L,EAAuBC,IAAgB,GACvCC,EAAiBC,IAAU,EAG7B,OAAkBC,GAAe5P,EAAMsP,GACvCO,IAAYV,GAAW,EACvB,OAAeC,EAAIpP,EAAMJ,EAAIwM,EAgB7B,OAfAyD,IAAYV,GAAW,GAGrBW,KACAL,GAAgBD,GAChBG,GAAUD,GAGZrN,GAAQ4L,gBAER5L,GAAU0N,EACVvC,GAAMwC,EACNX,GAAcY,EACdX,GAAgBY,IAIlB,cAeiBC,GAAa,SAASnQ,EAAMJ,EAAIwM,GAWjD,MAVAiD,IAAcrP,EAEdoQ,KACAxQ,EAAGwM,GACHiE,KAGEC,GAAqBjB,GAAarP,UAsDtB,SAASuQ,EAAW5L,EAAUC,GAC5C,MAAaqI,EAAQsD,EAKrB,YAAoBnE,EAAKzH,UAAYC,GAAOwH,EAAKxH,QAW9B,SAASD,EAAUC,GACtC,IAAIyK,KAAe5L,GAAQ4L,GAAa1K,EAAUC,GAAlD,CAIA,MAAmBqI,EAAQqC,MACHD,IAAepC,EAAQoC,MAChCmB,EAAWtL,eAI1B,IAAIN,EAAK,CACP,MAAgBM,EAAON,EACnB6L,KACEhN,GAAQgN,EAAS9L,EAAUC,GAC7B5E,EAAOyQ,EACEA,IAAYpB,GACrBhN,GAAQ2L,YAAYyC,GAEpBC,GAAYpB,GAAemB,EAASvL,IAMrClF,IAEDA,EADe,UAAb2E,EACKgM,GAAWnD,IAEXzM,GAAcyM,GAAK8B,GAAe3K,EAAUC,GAGjDA,IACFM,EAAON,GAAO5E,GAGhBqC,GAAQ0L,YAAY/N,IAMlBiN,EAAQjN,GAAMoF,QAEhBwL,GAAWtB,GAAetP,EAAMqP,IACvBwB,GAAmBA,EAAgBjM,MAAQiM,EAAgBzL,SAIpEkK,GAAcwB,aAAa9Q,EAAMqP,IACjCmB,EAAWrL,aAAc,GAEzBmK,GAAc7K,aAAazE,EAAMqP,IAGnCA,GAAcrP,OASI,SAASA,EAAMmN,EAAOjI,GACxClF,EAAK0Q,YAAYvD,GACjB9K,GAAQ2L,YAAgCb,EAExC,OAAYF,EAAQE,GAAOvI,GACvBA,aACYA,OASQ,WACxB,MAAa0K,KACArC,EAAQjN,KACNoM,EAAKlH,SACAkH,EAAKjH,cACbnF,EAAK+Q,kBAGjB,IAAI5D,IAAUkC,KAAelK,EAA7B,CAIA,KAAOgI,IAAUkC,IACfqB,GAAY1Q,EAAMmN,EAAOjI,GACzBiI,EAAQnN,EAAK+Q,SAIf,KAAK5L,EAAa,CAChB,IAAKP,OACHuI,EAAQjI,EAAON,GACXuI,EAAMxJ,aAAe3D,IACvBqC,GAAQ2L,YAAYb,YACNvI,GAIlBwH,GAAKjH,aAAc,QAQL,WAChBmK,GAAgBD,GAChBA,GAAc,SAOI,WAClB,MAAIA,OACiBjC,eAEEF,eAQR,WACfmC,GAAc2B,SAOC,WACfC,KAEA5B,GAAcC,GACdA,GAAgBA,GAAc3L,eAcZ,SAAS0J,EAAKzI,GAIhC,MAHAsM,MACAC,GAAa9D,EAAKzI,GAClBwL,KACO,OAUY,WAMnB,MAJET,KAAU,GAGZU,KACO,OAUI,WAGX,MAFAa,MACAC,GAAa,QAAS,MACf,QCnYP/H,QAAS,gBCUU,SAAShJ,GAC5B,MAAoC,KAAhCA,EAAKgR,YAAY,OAAQ,GACpB,uCAG6B,IAAlChR,EAAKgR,YAAY,SAAU,GACtB,+BADT,WAcgB,SAAS1D,EAAItN,EAAMsB,GACnC,GAAa,MAATA,EACFgM,EAAG/K,gBAAgBvC,OACd,CACL,MAAeiR,GAAajR,EACxBkR,GACF5D,EAAG6D,eAAeD,EAAQlR,EAAMsB,GAEhCgM,EAAGxM,aAAad,EAAMsB,QAWV,SAASgM,EAAItN,EAAMsB,GACnCgM,EAAGtN,GAAQsB,MAWS,SAASwC,EAAOsG,EAAM9I,GACtC8I,EAAKvC,QAAQ,MAAQ,EACvB/D,EAAMsN,YAAYhH,EAA4B9I,GAE9CwC,EAAMsG,GAAQ9I,MAaC,SAASgM,EAAItN,EAAM8D,GACpC,GAAqB,mBACnBwJ,EAAGxJ,MAAMuN,QAAUvN,MACd,CACLwJ,EAAGxJ,MAAMuN,QAAU,EACnB,OAAgB/D,EAAGxJ,QAC+BA,CAElD,KAAK,WACCoG,EAAIxK,EAAK0K,IACXkH,GAAcC,EAASnH,EAAM1K,EAAI0K,SAeb,SAASkD,EAAItN,EAAMsB,GAC7C,0CAAoBA,EAEP,YAATgB,GAA8B,aAATA,EACvBkP,GAAUlE,EAAItN,EAAMsB,GAEpBmQ,GAAUnE,EAAItN,EAA8CsB,OAWxC,SAASgM,EAAItN,EAAMsB,GACzC,MAAauL,EAAQS,KACPtB,EAAKvH,KAEnB,IAAIA,EAAMzE,KAAUsB,EAApB,CAIA,MAAgBsJ,GAAW5K,IAAS4K,GAAW8G,GAAQ1I,QACvD2I,GAAQrE,EAAItN,EAAMsB,GAElBmD,EAAMzE,GAAQsB,OAQGoD,GAInBkG,IAAW8G,GAAQ1I,SAAW4I,GAE9BhH,GAAA,MAAsBiH,EClJtB,QAqB0B,WAuBN,SAAS5E,EAAKzI,EAAKsN,EAASC,GAE5CC,GAAsB,eACtBC,GAAgB,cAGlB,OAAaC,GAAgBjF,EAAKzI,KACrBqI,EAAQjN,EAErB,KAAKoM,EAAKnH,eAAgB,CACxB,GAAIiN,EACF,IAAK,MAAQ,EAAGK,EAAIL,EAAQ1J,OAAQ+J,GAAK,EAAG,CAC1C,MAAmCL,EAAQK,KAC7BL,EAAQK,EAAI,EAC1BC,IAAgBxS,EAAMI,EAAMsB,GAMhC0K,EAAKnH,gBAAiB,EAexB,IANA,MAAiBmH,EAAKrH,WACLqH,EAAKpH,YACPD,EAASyD,SAChBiK,KACA,EAEDhK,EAAIrB,UAAUoB,OAAQC,GAAK,EAAGiK,GAAK,EAAG,CAC3C,MAAatL,UAAUqB,EACvB,IAAIjI,EACFuE,EAAS2N,GAAKC,EACd3N,EAAS2N,GAAQlQ,eACRsC,EAAS2N,KAAOC,EACzB,KAGF,OAAcvL,UAAUqB,EAAI,IACxBjI,GAASuE,EAAS2N,EAAI,KAAOE,KAC/B7N,EAAS2N,EAAI,GAAKE,EAClBJ,GAAgBxS,EAAM2S,EAAMC,IAIhC,GAAInK,EAAIrB,UAAUoB,QAAUkK,EAAI3N,EAASyD,OAAQ,CAC/C,KAAOC,EAAIrB,UAAUoB,OAAQC,GAAK,EAAGiK,GAAK,EACxC3N,EAAS2N,GAAKtL,UAAUqB,EAU1B,KAPIiK,EAAI3N,EAASyD,SACfzD,EAASyD,OAASkK,GAMfjK,EAAI,EAAGA,EAAI1D,EAASyD,OAAQC,GAAK,EAAG,CACvC,MAAmC1D,EAAS0D,KAC9B1D,EAAS0D,EAAI,EAC3BzD,GAAS6N,GAAQC,EAGnB,IAAK,WACHN,GAAgBxS,EAAM+S,EAAM/N,EAAS+N,IACrC/N,EAAS+N,GAAQtQ,OAIrB,aAkBuB,SAAS4K,EAAKzI,EAAKsN,GAExCE,GAAsB,oBACtB3C,IAAgB,GAGlBuD,GAAY,GAAK3F,EACjB2F,GAAY,GAAKpO,EACjBoO,GAAY,GAAKd,MAyBI,WAEnBe,GAAmB,kBACnBxD,IAAgB,EAGlB,OAAayD,GAAYC,MAAM,KAAMH,GAErC,OADAA,IAAYxK,OAAS,QAWF,SAAS6E,GAE1B+E,GAAsB,eAGxB,OAAagB,IAMb,OAHEC,IAA0BpG,EAAQjN,GAAM2E,SAAU0I,SAqBlC,SAASA,EAAKzI,EAAKsN,EAASC,GAE9C,MADAe,IAAYC,MAAM,KAAM/L,cACJiG,OAaT,SAAS3L,EAAOyQ,GAEzBC,GAAsB,QACtBC,GAAgB,OAGlB,OAAaiB,OACArG,EAAQjN,EAErB,IAAIoM,EAAK/G,OAAS3D,EAAO,CACvB0K,EAAK/G,KAA6B3D,CAGlC,KAAK,MADWA,IACH,EAAG+G,EAAIrB,UAAUoB,OAAQC,GAAK,EAAG,CAK5C,MAAWrB,UAAUqB,EACrB8K,GAAY3T,EAAG2T,GAGjBvT,EAAKoM,KAAOmH,EAGd,aC5QyB,WAMR,cAMA,cAMD,sCAME,iBAMI,iBAOpB,OACA,OACA,KACA,MACA,UACA,QACA,KACA,MACA,QACA,SACA,OACA,OACA,QACA,SACA,QACA,UAOe,qBA8Ff,WAAYnH,aACR9L,KAAK8L,KAAOA,EACZ9L,KAAKkT,gBA1FbC,GAMWC,uBAAc7T,GACjB,UAAyBoI,QACrBpI,EAAImC,kBACF,KAAQnC,EAAIgM,MAAM8H,OAGrBC,qFAAmB,4DACtB,IAAI/T,EAAK,CACLA,EAAMA,EAAImM,MAOV,KAAK,OANY,KACA,KACF,KACG,IACH,YAEF,EAAGzD,EAAM1I,EAAI2I,OAAQC,EAAIF,EAAKE,IAAK,CAC5C,MAAS5I,EAAI4I,EACF,OAAPoL,EACIC,IACAjO,EAAIyF,IAAY,EAChBwI,GAAa,EACbC,GAAc,GAEXF,EAAGhI,MAAM,WACZmI,GACAnO,EAAIyF,GAAYzF,EAAIyF,IAAa,GACjCzF,EAAIyF,IAAauI,GACVC,EACHxI,IACAzF,EAAIyF,IAAY,EAChBA,EAAW,KACXwI,GAAa,GAEVC,IACF9T,IACqB,cAAlB4F,EAAIyF,GACJzF,EAAIyF,GAAY7I,OACS,SAAlBoD,EAAIyF,KACXzF,EAAIyF,GAAY,OAGxBA,EAAW,KACXyI,GAAc,EACd9T,GAAW,GAEA,MAAP4T,GAAqB,MAAPA,IAAgBvI,EAU/ByI,GACPlO,EAAIyF,GAAYzF,EAAIyF,IAAa,GACjCzF,EAAIyF,IAAauI,IAEjBC,GAAa,EACbxI,EAAWA,GAAY,GACN,KAAbA,GAAoBuI,EAAGhI,MAAMoI,MAC7B3I,GAAYuI,IAhBZE,GAAelO,EAAIyF,MAAc,GACjCA,EAAW,KACXwI,GAAa,EACbE,GAAa,IAEbA,GAAa,EACb/T,GAAW,EACX4F,EAAIyF,GAAYzF,EAAIyF,IAAa,IAwB7C,MAXIwI,IAAcxI,EACdzF,EAAIyF,GAAY4I,EACTH,IAAgB9T,EACD,cAAlB4F,EAAIyF,GACJzF,EAAIyF,GAAY7I,OACS,SAAlBoD,EAAIyF,KACXzF,EAAIyF,GAAY,MAEb0I,IACPnO,EAAIyF,IAAY,KAIxB,UArFRmI,YA+FID,mBACIlT,KAAK6T,WAAW7T,KAAK8L,OAhG7BqH,YAuGIU,oBAAW/H,GACa,qBAChB9L,KAAK8T,QAAUhI,EACVvK,QAAQwS,GAAoB,IAC5BxS,QAAQyS,GAAY,QA3GrCb,YAkHIc,iBACI,OAAQjU,KAAK8T,qBAGjBlF,gBACI,OAAU,CACV,KAAK5O,KAAKiU,QAAS,CACf,eACcjU,KAAK8T,OACnB,IAAmB,MAAfA,EAAQ,GACW,MAAfA,EAAQ,IACRvI,GAASuI,EAAS,KAClBvO,GACI2O,MAAOJ,EACP1R,KAAM+Q,EAAOgB,oBAGjB5I,EAAQuI,EAAQvI,MAAM6I,IACjB7I,IACDA,EAAQuI,EAAQvI,MAAM8I,KAE1B9O,GACI2O,MAAOJ,EACP1R,KAAM+Q,EAAOmB,QACbC,QAAShJ,EAAM,SAKvB,IADAA,EAAQuI,EAAQvI,MAAMiJ,IACH,MAAfV,EAAQ,GACRvO,GACI2O,MAAOJ,EACP1R,KAAM+Q,EAAOsB,cACb1H,IAAKxB,EAAM,QAEZ,CACH,MAAgBA,EAAM,EAElBhG,GADoC,MAApCmP,EAAUA,EAAUxM,OAAS,IAEzBgM,MAAOJ,EACP1R,KAAM+Q,EAAOwB,aACbC,UAAU,EACV7H,IAAKxB,EAAM,GACXsJ,YAAa1B,EAAOC,cAAc7H,EAAM,KACpC4H,EAAOC,cAAcsB,GACzBrP,MAAO8N,EAAOG,aAAa/H,EAAM,IAAI,KAIrC2I,MAAOJ,EACP1R,KAAM+Q,EAAOwB,aACbC,UAAU,EACV7H,IAAKxB,EAAM,GACXsJ,YAAa1B,EAAOC,cAAc7H,EAAM,IACxClG,MAAO8N,EAAOG,aAAa/H,EAAM,KAK7CA,GAASA,EAAM,KAAOuI,EACtB9T,KAAK6T,WAAWC,EAAQgB,UAAUvJ,EAAM,GAAGrD,SAE3ClI,KAAK6T,WAAW,IAGxB,cAQRV,IAAOwB,aAAe,eAKtBxB,GAAOgB,iBAAmB,mBAK1BhB,GAAOsB,cAAgB,gBAKvBtB,GAAOmB,QAAU,SjB9OjB,6DACIS,kBAASxV,GAGL,iBAFa,OAAWA,KACbyV,EAAOpG,OACX9C,GAAM,CACT,OAAQA,EAAK1J,MACb,QAAYuS,aACJ7I,EAAK8I,UACL5U,KAAKiV,iBAAiBnJ,GACtB9L,KAAKkV,eAAepJ,EAAKiB,MAEzB/M,KAAK4S,YAAY9G,EAErB,MACJ,SAAYqI,iBACRnU,KAAKmV,eAAerJ,GACpB9L,KAAKoV,kBACL,MACJ,SAAYX,cACRzU,KAAKqV,aAAavJ,EAClB,MACJ,SAAYwI,QACR,GAAItU,KAAKsV,gBAAiB,CACtB,MAAYnC,GAAOG,aAAaxH,EAAKyI,QACjClP,IACAG,EAAaH,EAAO,SAACf,EAAKlD,GAClBA,KAAU,EACNkH,EAAKiN,cACLjN,EAAKkN,aAAalR,GAElBgE,EAAKmN,YAAYnR,GAGrBgE,EAAKoN,YAAYpR,EAAKlD,SAKlCpB,MAAK2V,QAAQ7J,GAMrBA,EAAOkJ,EAAOpG,qBAItBgE,qBAAY9G,aACJA,GAAKzG,OACLG,EAAasG,EAAKzG,MAAO,SAACf,EAAKlD,GACvBA,KAAU,IACVsI,EAAK+L,YAAYnR,YACLe,MAAMf,KAI9B,OAAYsR,EAAY9J,EAAKzG,MACzByG,GAAK+I,YACLgB,iBAAY/J,EAAKiB,IAAK,KAAM,eAAS1H,KAErCyQ,iBAAYhK,EAAKiB,IAAK,KAAM,eAAS1H,kBAI7C4P,0BAAiBnJ,aACTA,GAAKzG,OACLG,EAAasG,EAAKzG,MAAO,SAACf,EAAKlD,GACvBA,KAAU,IACV2U,EAAKN,YAAYnR,YACLe,MAAMf,KAI9B,OAAYsR,EAAY9J,EAAKzG,MAC7B2Q,kBAAiBlK,EAAKiB,IAAK,KAAM,eAAS1H,kBAG9C8P,wBAAerJ,GACXmK,MACInK,EAAK+I,aAAe1B,GAAOC,cAAcpT,KAAKkW,oBAC9ClW,KAAKqV,aAAavJ,gBAI1BuJ,sBAAavJ,GACTqK,GAAarK,EAAKiB,KAClB/M,KAAKoW,6BAGTT,iBAAQ7J,GACJ/G,GAAK+G,EAAKyI,sBAGdmB,qBAAY1T,EAAM0G,GACd1G,EAAKA,EAAM0G,gBAGf8M,sBAAa9M,GACT1I,KAAK0V,YAAY1V,KAAKqW,cAAe3N,GACrC1I,KAAKoW,6BAGTX,qBAAY3V,GACJE,KAAKuV,eACLvV,KAAKsW,iBAAiBtW,KAAKqW,eAAe,GAE9CrW,KAAKuW,SAAWzW,eAGpBsW,yBACIpW,KAAKuW,SAAW,kBAGpBF,uBACI,YAAYE,sBAGhBhB,uBACI,QAASvV,KAAKuW,sBAGlBrB,wBAAenI,GACX/M,KAAKwW,YAAczJ,eAGvBmJ,0BACI,YAAYM,yBAGhBlB,yBACI,QAAStV,KAAKwW,yBAGlBpB,4BACIpV,KAAKwW,YAAc,yBCxJvB,WAAYC,aACRzW,KAAK0W,QACL1W,KAAKyW,eAAiBA,QAH9BE,aAMIC,gBAAOlX,qCAASmX,+BAAAA,mBACZ,WACInX,EACA,oBAAW+W,wBAAenO,EAAKwO,EAAE5N,gBAAe2N,mBAIxDH,iBACI1W,KAAK+W,cAAgB,oBAGzBD,WAAEE,qCAAYC,+BAAAA,mBACLvT,OAAMjE,QAAQuX,KACfA,GAAWA,IAEfA,EAAQrT,QAAQ,SAACpE,EAAK2X,GAClBxN,EAAKqN,cAAchC,SAASxV,GACxB2X,EAAQD,EAAO/O,SACXwB,EAAKqN,cAAcxB,cACnB7L,EAAKqN,cAAcvB,aAAayB,EAAOC,IAEvCxN,EAAKoN,EAAEK,EAAeF,EAAOC,iBiBhBpB,SAAC9M,sBAC1B,oCACIC,aADU,OAEN/B,GAAK8O,WACL9O,EAAK+C,kBAAkB,WACnB/C,EAAKsO,WAETtO,EAAKsO,0BAPY3L,YAczB2L,kBACI,MAAU5W,KAAKoX,QACf,MAAIC,iBAGA,gBAAgB,6BAFhBA,GAAIT,OAAO5W,UAjBoCoK,OCSpCkN,EAAI/Q,GAAWK,KAClC2Q,EACAC,EACAC,EACAC,kGAG+BC,OjBvCX5X,KAAK2G,mBACPD,EAAYN,OACnBlB,GAAcC,gBACdD,GAAcG,gBACdsF,GAAW8G,GAAQ1I,QA6BlC7D,IAAcC,aAAe,SAAS0S,GAClCA,EAAMjU,QAAQ,SAACjE,YAAoBA,KAC/BmY,IACAA,GAASD,IAIjB3S,GAAcG,aAAe,SAASwS,GAClCA,EAAMjU,QAAQ,SAACjE,GACX,MAAW0G,EAAc1G,EACrBY,IACAZ,EAAK2H,yBAGTyQ,IACAA,GAASF,IAIjBlN,GAAW8G,GAAQ1I,SAAW,SAASpJ,EAAMsL,EAAU+M,GACnD,MAAW3R,EAAc1G,EACzB,IAAIY,EAAM,CACDZ,EAAKW,IACN2X,EAAWtY,EAAMY,EAErB,OAAeZ,EAAKuC,aAAa+I,EAC7B1K,GAAKQ,IAAImX,oBACT3X,EAAKQ,IAAImX,mBAAmBtQ,QAAQqD,MAAc,GAClDtL,EAAK4H,yBAAyB0D,EAAUhD,EAAU+P,GAGtDG,IACAA,GAASxY,EAAMsL,EAAU+M,GkB9DjC,QAYuBhY,KAAKoY,kBAAoB"}