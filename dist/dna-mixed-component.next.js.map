{"version":3,"sources":["../src/dna-mixed-component.next.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;IAQA,iBAAiB;WAAjB,iBAAiB;;UAAjB,iBAAiB;wBAAjB,iBAAiB;;6BAAjB,iBAAiB;;;cAAjB,iBAAiB;;;;;;;SAed,2BAAU;qCAAN,IAAI;AAAJ,QAAI;;;AACtB,eAAY,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACzD,oBAAiB,CAAC,kBAAkB,CAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC;GACpE;;;;;;;;SAKe,4BAAU;sCAAN,IAAI;AAAJ,QAAI;;;AACvB,eAAY,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC1D,oBAAiB,CAAC,kBAAkB,CAAC,IAAI,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;GACrE;;;;;;;;;;;SAQ0B,kCAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE;AACrD,eAAY,CAAC,SAAS,CAAC,wBAAwB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AACxF,oBAAiB,CAAC,kBAAkB,CAAC,IAAI,EAAE,0BAA0B,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;GACnG;;;;;;;;;;;;;;;;SAhCU,gBAAU;sCAAN,IAAI;AAAJ,QAAI;;;AAClB,eAAY,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACpC,OAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;AACxC,oBAAiB,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACtD,oBAAiB,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;GACzD;;;SAmCwB,4BAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE;AACjD,OAAI,SAAS,GAAG,GAAG,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;AACrE,OAAI,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;AAC1C,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AACrD,SAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC5B,aAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KAC1B;IACD;GACD;;;;;;;;;SAMwB,4BAAC,GAAG,EAAE,QAAQ,EAAE;AACxC,OAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;;AAE5B,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,QAAG,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;KACzC;IACD,MAAM;;AAEN,OAAG,CAAC,mBAAmB,GAAG,GAAG,CAAC,mBAAmB,IAAI,EAAE,CAAC;AACxD,QAAI,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC1D,YAAO;KACP;;AAED,QAAI,SAAS,GAAG,iBAAiB,CAAC,oBAAoB;QACrD,IAAI,GAAG,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAC7C,SAAK,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,SAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,SAAI,EAAE,GAAG,IAAI,YAAY,CAAA,AAAC,EAAE;AAC3B,UAAI,GAAG,KAAK,sBAAsB,EAAE;AACnC,UAAG,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;OACzB;MACD;AACD,SAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAClC,UAAI,WAAW,GAAG,iBAAiB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AAC1D,SAAG,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;AAC1C,SAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;MACrC,MAAM,IAAI,EAAE,GAAG,IAAI,YAAY,CAAA,AAAC,EAAE;AAClC,UAAI,GAAG,KAAK,sBAAsB,EAAE;AACnC,UAAG,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;OACzB;MACD;KACD;;AAED,QAAI,QAAQ,CAAC,SAAS,EAAE;AACvB,SAAI,GAAG,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACtD,UAAK,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,UAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,UAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAClC,WAAI,WAAW,GAAG,iBAAiB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AAC1D,UAAG,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;AAC9D,UAAG,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;OACzD,MAAM,IAAI,EAAE,GAAG,IAAI,YAAY,CAAC,SAAS,CAAA,AAAC,EAAE;AAC5C,UAAG,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;OAC7C;MACD;KACD;;AAED,OAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC5C;GACD;;;;;;;;;;SAOsB,0BAAC,YAAY,EAAE;AACrC,UAAO,IAAI,GAAG,YAAY,GAAG,WAAW,CAAC;GACzC;;;;;;;;;OAM8B,eAAG;AACjC,UAAO,CAAC,MAAM,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,0BAA0B,CAAC,CAAC;GACnF;;;QA7HW,iBAAiB;GAAS,YAAY","file":"dna-mixed-component.next.js","sourcesContent":["'use strict';\n\nimport DNAComponent from 'dna-component.next.js'\n\n/**\n * This is another model to use to create DNA Custom Components mixing a list of prototypes.\n * Implement a get method for the `behaviors` property which returns a list of Prototypes.\n */\nexport class DNAMixedComponent extends DNAComponent {\n\t/**\n\t * Attach behaviors' static and class methods and properties to the current class.\n\t * Trigger all `init` static methods of the implemented behaviors.\n\t */\n\tstatic init(...args) {\n\t\tDNAComponent.init.apply(this, args);\n\t\tvar behaviors = this['behaviors'] || [];\n\t\tDNAMixedComponent.__iterateBehaviors(this, behaviors);\n\t\tDNAMixedComponent.__triggerCallbacks(this, 'init', args);\n\t}\n\t/**\n\t * Trigger all `created` methods of the implemented behaviors.\n\t * @private\n\t */\n\tcreatedCallback(...args) {\n\t\tDNAComponent.prototype.createdCallback.apply(this, args);\n\t\tDNAMixedComponent.__triggerCallbacks(this, 'createdCallback', args);\n\t}\n\t/**\n\t * Trigger all `attached` methods of the implemented behaviors.\n\t * @private\n\t */\n\tattachedCallback(...args) {\n\t\tDNAComponent.prototype.attachedCallback.apply(this, args);\n\t\tDNAMixedComponent.__triggerCallbacks(this, 'attachedCallback', args);\n\t}\n\t/**\n\t * Trigger all `attributeChanged` methods of the implemented behaviors.\n\t * @private\n\t * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attrName, oldVal, newVal) {\n\t\tDNAComponent.prototype.attributeChangedCallback.apply(this, [attrName, oldVal, newVal]);\n\t\tDNAMixedComponent.__triggerCallbacks(this, 'attributeChangedCallback', [attrName, oldVal, newVal]);\n\t}\n\t/**\n\t * Iterate and fire a list of callbacks.\n\t * @private\n\t * @param {DNAComponent} ctx The context to apply.\n\t * @param {String} callbackKey The key to use to retrieve the right callback list.\n\t * @param {Array} args A list of arguments to apply to the callback.\n\t */\n\tstatic __triggerCallbacks(ctx, callbackKey, args) {\n\t\tvar callbacks = ctx[DNAMixedComponent.__getCallbackKey(callbackKey)];\n\t\tif (callbacks && Array.isArray(callbacks)) {\n\t\t\tfor (let i = 0, len = callbacks.length; i < len; i++) {\n\t\t\t\tvar callback = callbacks[i];\n\t\t\t\tcallback.apply(ctx, args);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Iterate and attach behaviors to the class.\n\t * @private\n\t * @param {Array} behavior A list of classes.\n\t */\n\tstatic __iterateBehaviors(ctx, behavior) {\n\t\tif (Array.isArray(behavior)) {\n\t\t\t// if the provided behavior is complex (a list of other behaviors), iterate it.\n\t\t\tfor (var i = 0; i < behavior.length; i++) {\n\t\t\t\tctx.__iterateBehaviors(ctx, behavior[i]);\n\t\t\t}\n\t\t} else {\n\t\t\t// check if the behavior is already attached to the class.\n\t\t\tctx.__attachedBehaviors = ctx.__attachedBehaviors || [];\n\t\t\tif (ctx.__attachedBehaviors.indexOf(behavior.name) !== -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// iterate and attach static methods and priorities.\n\t\t\tvar callbacks = DNAMixedComponent.__componentCallbacks,\n\t\t\t\tkeys = Object.getOwnPropertyNames(behavior);\n\t\t\tfor (let k in keys) {\n\t\t\t\tlet key = keys[k];\n\t\t\t\tif (!(key in DNAComponent)) {\n\t\t\t\t\tif (key !== '__componentCallbacks') {\n\t\t\t\t\t\tctx[key] = behavior[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (callbacks.indexOf(key) !== -1) {\n\t\t\t\t\tlet callbackKey = DNAMixedComponent.__getCallbackKey(key);\n\t\t\t\t\tctx[callbackKey] = ctx[callbackKey] || [];\n\t\t\t\t\tctx[callbackKey].push(behavior[key]);\n\t\t\t\t} else if (!(key in DNAComponent)) {\n\t\t\t\t\tif (key !== '__componentCallbacks') {\n\t\t\t\t\t\tctx[key] = behavior[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// iterate and attach prototype methods and priorities.\n\t\t\tif (behavior.prototype) {\n\t\t\t\tkeys = Object.getOwnPropertyNames(behavior.prototype);\n\t\t\t\tfor (let k in keys) {\n\t\t\t\t\tlet key = keys[k];\n\t\t\t\t\tif (callbacks.indexOf(key) !== -1) {\n\t\t\t\t\t\tlet callbackKey = DNAMixedComponent.__getCallbackKey(key);\n\t\t\t\t\t\tctx.prototype[callbackKey] = ctx.prototype[callbackKey] || [];\n\t\t\t\t\t\tctx.prototype[callbackKey].push(behavior.prototype[key]);\n\t\t\t\t\t} else if (!(key in DNAComponent.prototype)) {\n\t\t\t\t\t\tctx.prototype[key] = behavior.prototype[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the callback to the attached list\n\t\t\tctx.__attachedBehaviors.push(behavior.name);\n\t\t}\n\t}\n\t/**\n\t * Retrieve the key to use to register a callback.\n\t * @private\n\t * @param {String} callbackName The type of the callback to register.\n\t * @return {String} The key string.\n\t */\n\tstatic __getCallbackKey(callbackName) {\n\t\treturn '__' + callbackName + 'Callbacks';\n\t}\n\t/**\n\t * Retrieve a list of callbacks that should not be overridden but concatenated.\n\t * @private\n\t * @return {Array} The list.\n\t */\n\tstatic get __componentCallbacks() {\n\t\treturn ['init', 'createdCallback', 'attachedCallback', 'attributeChangedCallback'];\n\t}\n}\n"]}