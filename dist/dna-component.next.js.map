{"version":3,"sources":["../src/dna-component.next.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;IAKP,YAAY;cAAZ,YAAY;;aAAZ,YAAY;8BAAZ,YAAY;;mCAAZ,YAAY;;;iBAAZ,YAAY;;;;;;;eAKC,2BAAU;;AAErB,gBAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;AAC1B,oBAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;aAChD;;AAED,gBAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;AAC3B,oBAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,IAAI,EAAE,CAAC;aAC9D;SACJ;;;;;;;;eAKe,4BAAU,EAEzB;;;;;;;;;;AAAA;;;eAQuB,kCAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,EAElD;;;;;;;AAAA;;;eAKU,gBAAc;gBAAb,GAAG,yDAAG,KAAK;;AACnB,gBAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;AAC1B,oBAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;aACtC;SACJ;;;eACc,kBAAC,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE;AAC9B,mBAAO,GAAG,OAAO,IAAI,EAAE,CAAC,OAAO,IAAI,YAAY,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;AACnE,gBAAI,OAAO,GAAG;AACN,yBAAS,EAAE,EAAE,CAAC,SAAS;aAC1B,CAAC;AACN,gBAAI,GAAG,EAAE;AACL,uBAAO,WAAQ,GAAG,GAAG,CAAC;aACzB;;AAED,gBAAI;AACA,wBAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAC9C,CAAC,OAAO,EAAE,EAAE;AACT,uBAAO,KAAK,CAAC;aAChB,SAAS;AACN,uBAAO,IAAI,CAAC;aACf;SACJ;;;;;;;;eAKiB,uBAAG;AACjB,gBAAI,GAAG,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACpD,mBAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;SACtC;;;;;;;;;eAMiB,uBAAG;AACjB,gBAAI,QAAQ,CAAC,aAAa,IAAI,QAAQ,CAAC,aAAa,CAAC,UAAU,EAAE;AAC7D,uBAAO,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aACtE;SACJ;;;;;;;;;eAMoB,wBAAC,EAAE,EAAE;AACtB,mBAAO,EAAE,CAAC,IAAI,CACT,OAAO,CAAC,QAAQ,EAAE,UAAS,KAAK,EAAE;AAC/B,uBAAO,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;aACpC,CAAC,CACD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAC3B;;;WAvFC,YAAY;GAAS,WAAW","file":"dna-component.next.js","sourcesContent":["'use strict';\n\n/**\n * This is the model to use to create DNA Custom Components.\n */\nclass DNAComponent extends HTMLElement {\n    /**\n     * Fires when an instance of the element is created.\n     * @private\n     */\n    createdCallback(...args) {\n        // Add scope style class\n        if (this.constructor.tagName) {\n            this.classList.add(this.constructor.tagName);\n        }\n        // Render the template\n        if (this.constructor.template) {\n            this.innerHTML = this.constructor.template.innerHTML || '';\n        }\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @private\n     */\n    attachedCallback(...args) {\n        //\n    }\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @private\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attrName, oldVal, newVal) {\n        //\n    }\n    /**\n     * Register the custom element.\n     * @param {String} ext The name of an Element to extend (optional).\n     */\n    static init(ext = false) {\n        if (this.register(this, ext)) {\n            this.template = this.getTemplate();\n        }\n    }\n    static register(fn, ext, tagName) {\n        tagName = tagName || fn.tagName || DNAComponent.classToElement(fn);\n        let options = {\n                prototype: fn.prototype,\n            };\n        if (ext) {\n            options.extends = ext;\n        }\n        // Retrieve the Custom Element tag name.\n        try {\n            document.registerElement(tagName, options);\n        } catch (ex) {\n            return false;\n        } finally {\n            return true;\n        }\n    }\n    /**\n     * Instantiate an element.\n     * This is a sort of constructor.\n     */\n    static instantiate() {\n        var tag = this.tagName || this.classToElement(this);\n        return document.createElement(tag);\n    }\n    /**\n     * Get current component template.\n     * Uses `document.currentScript`, so use only on initialization!\n     * @return {HTMLTemplateElement} The template element of the component.\n     */\n    static getTemplate() {\n        if (document.currentScript && document.currentScript.parentNode) {\n            return document.currentScript.parentNode.querySelector('template');\n        }\n    }\n    /**\n     * Convert a Class name to HTML tag.\n     * @param {Class} fn Grab the tag name from this class.\n     * @return {String} The tag name for the Custom Element.\n     */\n    static classToElement(fn) {\n        return fn.name\n            .replace(/[A-Z]/g, function(match) {\n                return '-' + match.toLowerCase();\n            })\n            .replace(/^\\-/, '');\n    }\n}\n"]}