{"version":3,"file":"dna-react.js","sources":["packages/dna-core/src/lib/typeof.js","packages/dna-core/src/helpers/symbol.js","packages/dna-core/src/lib/dom.js","packages/dna-core/src/helpers/arr-reduce.js","packages/dna-core/src/lib/reduce.js","packages/dna-core/src/lib/dispatch.js","packages/dna-core/src/lib/property.js","packages/dna-core/src/mixins/properties-component.js","packages/dna-core/src/helpers/matches.js","packages/dna-core/src/mixins/events-component.js","packages/dna-core/src/lib/shadow-css.js","packages/dna-core/src/mixins/style-component.js","packages/dna-core/src/lib/proxy.js","packages/dna-react/src/mixins/react.js","packages/dna-core/src/lib/bootstrap.js","packages/dna-core/src/lib/define.js","packages/dna-react/src/lib/render.js","packages/dna-core/src/helpers/obj-define.js","packages/dna-core/src/lib/registry.js","packages/dna-core/src/lib/symbols.js","packages/dna-core/src/mixins/component.js","packages/dna-core/src/helpers/custom-event.js","packages/dna-core/src/mixins/template-component.js","packages/dna-core/src/lib/mixins.js","packages/dna-core/src/core.js","packages/dna-react/index.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","/**\n * Wrap Symbol function.\n * @private\n *\n * @param {String} name The symbol name.\n * @return {Symbol|String} A real symbol if supported or a string key.\n */\nexport function Symbol(name) {\n    if (self.Symbol) {\n        return self.Symbol(name);\n    }\n    return `__${name}`;\n}\n","import { isFunction, isString } from './typeof.js';\nimport { registry } from './registry.js';\nimport { DNA_SYMBOL, COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * Retrieve a HTMLElement instance from a component instance.\n * @method getComponentNode\n * @memberof DNA.DOM\n *\n * @param {Object} elem The component instance.\n * @return {HTMLElement} The node for the component instance.\n */\nexport function getComponentNode(elem) {\n    return elem && elem.node;\n}\n/**\n * Retrieve a component instance from a HTMLElement instance.\n * @method getNodeComponent\n * @memberof DNA.DOM\n *\n * @param {HTMLElement} elem The node instance.\n * @return {Object} The component for the node instance.\n */\nexport function getNodeComponent(elem) {\n    return elem && elem[COMPONENT_SYMBOL];\n}\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            element[UPDATED].call(element, name, oldValue, newValue);\n            return true;\n        }\n    }\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {Function|String} Ctr The component constructor or tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(Ctr) {\n    if (isString(Ctr)) {\n        Ctr = registry.get(Ctr);\n    }\n    if (isFunction(Ctr)) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    if (parent !== element.parentNode || parent.lastElementChild !== element) {\n        if (element.parentNode) {\n            removeChild(element.parentNode, element);\n        }\n        parent.appendChild(element);\n        return connect(element);\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    parent.removeChild(element);\n    return disconnect(element);\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.nextSibling !== refNode) {\n        if (element.parentNode) {\n            disconnect(element);\n        }\n        parent.insertBefore(element, refNode);\n        return connect(element);\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.parentNode) {\n        disconnect(element);\n    }\n    parent.replaceChild(element, refNode);\n    disconnect(refNode);\n    return connect(element);\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.setAttribute(name, value);\n    return update(element, name, oldValue, value);\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.removeAttribute(name);\n    return update(element, name, oldValue, null);\n}\n","/**\n * Reduce an array to a single value.\n * Similar to `Array.prototype.reduce`.\n * @method reduce\n * @ignore\n *\n * @param {Array} arr The array to reduce.\n * @param {Function} callback The reducer function to fire for all value of the array.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced array.\n */\nexport function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n","import { reduce } from '../helpers/arr-reduce.js';\n\n/**\n * Reduce an object prototype chain to a single value.\n * @method reducePrototype\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {Function} callback The reducer function to fire for all value of the prototype chain.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced prototype chain.\n */\nexport function reducePrototype(obj, callback, value) {\n    while (obj) {\n        value = callback(value, obj);\n        obj = Object.getPrototypeOf(obj);\n    }\n    return value;\n}\n/**\n * Reduce to array of property values of a prototype chain.\n * @method reduceProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Array} A list of property values.\n */\nexport function reduceProperty(obj, key) {\n    return reducePrototype(obj, (properties, proto) => {\n        if (proto.hasOwnProperty(key)) {\n            let desc = Object.getOwnPropertyDescriptor(proto, key);\n            let res;\n            if (desc.hasOwnProperty('value')) {\n                res = desc.value;\n            } else if (desc.hasOwnProperty('get')) {\n                res = desc.get.call(obj);\n            }\n            properties.push(res);\n        }\n        return properties;\n    }, []);\n}\n/**\n * Marge an array of property values of a prototype chain.\n * @method reduceObjectProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Object} A merged list of property values.\n */\nexport function reduceObjectProperty(scope, prop) {\n    let protoProp = reduceProperty(scope, prop);\n    return reduce(protoProp, (res, proto) => {\n        for (let k in proto) {\n            if (!res.hasOwnProperty(k)) {\n                res[k] = proto[k];\n            }\n        }\n        return res;\n    }, {});\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../helpers/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\nimport { define } from '../helpers/obj-define.js';\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n */\nexport class Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    if (this.initialized) {\n                        this.changed(val, oldValue);\n                    }\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        this.defaultSet = false;\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb.call(this.scope, this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n            this.defaultSet = true;\n        }\n        this.initialized = true;\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Function|Array} ctrs A single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { define } from '../helpers/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isFalsy, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop, Property } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {Object} component The component to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let props = reduceObjectProperty(this, 'properties');\n        for (let k in props) {\n            if (!(props[k] instanceof Property)) {\n                props[k] = prop(props[k]);\n            }\n        }\n        define(this, 'properties', { value: props });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe((changedProp, newValue, oldValue) => {\n                    if (attrName) {\n                        setAttribute(this, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this, eventName, {\n                            component: this,\n                            property: changedProp.name,\n                            newValue,\n                            oldValue,\n                        });\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (isUndefined(this[name]) || prop.defaultSet) {\n                if (this.hasAttribute(attrName || name)) {\n                    this[name] = getValue(prop, this.getAttribute(attrName || name));\n                } else if (!isUndefined(this.node[name])) {\n                    this[name] = this.node[name];\n                }\n            }\n            if (attrName) {\n                setAttribute(this, attrName, this[name]);\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback() {}\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","/**\n * Alias to Element prototype.\n * @type {Object}\n * @private\n */\nconst ELEM_PROTO = Element.prototype;\n\n/**\n * Alias to `Element.prototype.matches`.\n * @type {Function}\n * @private\n */\nconst MATCHES_SELECTOR = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n\n/**\n * Polyfill for `Element.matches API`.\n * @private\n *\n * @param {HTMLElement} target The node to check.\n * @param {String} selector The selector to match.\n * @return {Boolean} The target matches the selector.\n */\nexport function matches(target, selector) {\n    return MATCHES_SELECTOR.call(target, selector);\n}\n","import { define } from '../helpers/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../helpers/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\n/**\n * Check if an event has a selector in mathc in target list.\n * @private\n *\n * @param {Event} event The event to check.\n * @param {HTMLElement} node The root node.\n * @param {String} selector The CSS selector to match.\n * @return {HTMLElement} The element in target list which matches the selector.\n */\nfunction checkDelegate(event, node, selector) {\n    if (!selector) {\n        return node;\n    }\n    let target = event.target;\n    while (target && target !== node) {\n        if (matches(target, selector)) {\n            return target;\n        }\n        target = target.parentNode;\n    }\n    return null;\n}\n/**\n * Generate a delegate listener for an event.\n * @private\n *\n * @param {String} selector The CSS selector to match.\n * @param {Function} callback The original callback for the event.\n * @return {Function} Wrapped callback with a delegation check.\n */\nfunction delegateCallback(selector, callback) {\n    return (ev) => {\n        let target = checkDelegate(ev, this.node, selector);\n        if (target) {\n            callback.call(this, ev, target);\n        }\n    };\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Iterate `events` properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let events = reduceObjectProperty(this, 'events');\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let ev = k.trim().split(' ');\n                let name = ev.shift();\n                let selector = ev.join(' ');\n                events[k] = {\n                    name,\n                    selector,\n                    callback: delegateCallback.call(this, selector, callback),\n                };\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n        define(this, 'events', { value: events });\n    }\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events;\n        for (let k in events) {\n            this.addEventListener(events[k].name, events[k].callback);\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        let events = this.events;\n        for (let k in events) {\n            this.removeEventListener(events[k].name, events[k].callback);\n        }\n        super.disconnectedCallback();\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = delegateCallback.call(this, selector, callback);\n        return this.addEventListener(evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","/**\n * A regex to match css `:host` selector.\n * @type {RegExp}\n * @private\n */\nconst HOST_REGEX = /\\:host(\\(([^({)]+(\\([^)]*\\))?)+\\))?/g;\n\n/**\n * Add a scope to all selectors.\n * @private\n *\n * @param {CSSStyleSheet} sheet The css sheet to scope.\n * @param {String} scope The scope selector.\n * @return {String} The scoped css.\n */\nfunction scoped(sheet, scope) {\n    let rules = sheet.cssRules || sheet.rules;\n    if (sheet.insertRule) {\n        let reg = new RegExp(`${scope}([\\\\s\\.\\[:]|$)`);\n        let text = '';\n        for (let i = 0, len = rules.length; i < len; i++) {\n            let rule = rules[i];\n            let body = rule.cssText;\n            if (rule.selectorText) {\n                let selector = rule.cssText.split('{').shift().split(',')\n                    .map((rule) => {\n                        rule = rule.trim();\n                        if (rule.match(reg)) {\n                            return rule;\n                        }\n                        return `${scope} ${rule}`;\n                    })\n                    .join(', ');\n                text += rule.cssText.replace(rule.selectorText, selector);\n            } else if (rule.cssRules || rule.rules) {\n                scoped(rule, scope);\n                text += rule.cssText;\n            } else {\n                text += body;\n            }\n        }\n        return text;\n    }\n}\n\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {HTMLStyleElement} style The style element.\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nexport function convertShadowCSS(style, css, is) {\n    let scope = `.${is}`;\n    style.textContent = css.replace(HOST_REGEX, (fullMatch, mod) =>\n        `${scope}${mod ? mod.slice(1, -1) : ''}`\n    );\n    style.textContent = scoped(style.sheet, scope) || '';\n}\n","import { define } from '../helpers/obj-define.js';\nimport { reduceProperty } from '../lib/reduce.js';\nimport { isString } from '../lib/typeof.js';\nimport { convertShadowCSS } from '../lib/shadow-css.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The root document element.\n * @type {DocumentFragment}\n * @private\n */\nconst ROOT_DOC = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || ROOT_DOC;\n}\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {Object} component A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(component) {\n    let styleElem = ownerDocument(component.node).createElement('style');\n    styleElem.id = `style-${component.is}`;\n    return styleElem;\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Inherit all css properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let css = reduceProperty(this, 'css')\n            .filter((protoCSS) => isString(protoCSS))\n            .join('\\n');\n        if (css) {\n            define(this, 'css', { value: css });\n        }\n    }\n    /**\n     * Create or update a style element for a component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (isString(this.css)) {\n            if (this.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this);\n                    style.textContent = this.css;\n                    this.shadowRoot.appendChild(style);\n                }\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this);\n                ownerDocument(this.node).head.appendChild(style);\n                convertShadowCSS(style, this.css, this.is);\n            }\n        }\n        this.classList.add(this.is);\n    }\n};\n","/**\n * A list of HTMLElement properties to proxy from the node to the component instance.\n * @type Array\n * @private\n */\nconst DOM_PROXY = {\n    attributes: 1,\n    classList: 1,\n    getAttribute: 0,\n    hasAttribute: 0,\n    setAttribute: 0,\n    removeAttribute: 0,\n    addEventListener: 0,\n    removeEventListener: 0,\n    dispatchEvent: 0,\n    style: 1,\n    querySelector: 0,\n    querySelectorAll: 0,\n    shadowRoot: 1,\n    attachShadow: 0,\n    createShadowRoot: 0,\n    innerText: 2,\n    innerHTML: 2,\n};\n\n/**\n * Reference to Node prototype.\n * @type Object\n * @private\n */\nfunction checkNode() {\n    /* istanbul ignore if  */\n    if (!this.node) {\n        throw new ReferenceError('The component\\'s `node` is undefined.');\n    }\n}\n\n/**\n * Add a proxy property descriptor to a prototype.\n * @private\n *\n * @param {Object} proto The prototype to update.\n * @param {String} property The property name to proxy.\n * @param {Number} type The property type (0: function, 1: getter, 2: setter).\n */\nfunction proxyProperty(proto, property, type) {\n    let desc = {};\n    if (type === 0) {\n        desc.value = function(...args) {\n            checkNode.call(this);\n            return this.node[property].call(this.node, ...args);\n        };\n    } else if (type > 0) {\n        desc.get = function() {\n            checkNode.call(this);\n            return this.node[property];\n        };\n        if (type > 1) {\n            desc.set = function(val) {\n                checkNode.call(this);\n                return this.node[property] = val;\n            };\n        }\n    }\n    Object.defineProperty(proto, property, desc);\n}\n\n/**\n * Add HTMLElement properties and methods proxies to a prototype.\n * @method proxy\n * @memberof DNA\n *\n * @param {Function} Component The component class to proxy.\n * @return {Function} The updated class.\n */\nexport function proxy(Component) {\n    for (let k in DOM_PROXY) {\n        proxyProperty(Component.prototype, k, DOM_PROXY[k]);\n    }\n    return Component;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DOM } from '@dnajs/core/src/core.js';\nimport { isFunction } from '@dnajs/core/src/lib/typeof.js';\n\nfunction convertProps(elem) {\n    let res = {};\n    if (elem.properties) {\n        for (let k in elem.properties) {\n            res[k] = elem[k];\n        }\n    }\n    return res;\n}\n\nfunction filterAttributes(elem) {\n    let Ctr = elem.constructor;\n    let attrs = Ctr.observedAttributes || [];\n    let res = {};\n    for (let k in elem.state) {\n        if (attrs.indexOf(k) !== -1) {\n            res[k] = elem.state[k];\n        }\n    }\n    return res;\n}\n\nlet changing;\n\nexport const ReactMixin = (SuperClass) => class extends SuperClass {\n    get node() {\n        return ReactDOM.findDOMNode(this);\n    }\n\n    constructor(node) {\n        super(node);\n        this.render();\n    }\n\n    propertyChangedCallback(propName, oldValue, newValue) {\n        changing = true;\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        changing = false;\n        this.setState(convertProps(this));\n    }\n\n    render() {\n        if (changing) {\n            // prevent rerendering from other mixins.\n            return false;\n        }\n        return React.createElement(\n            this.is,\n            filterAttributes(this),\n            isFunction(this.template) ? this.template.call(this) : undefined\n        );\n    }\n\n    componentDidMount() {\n        DOM.connect(this);\n        for (let k in this.props) {\n            this[k] = this.props[k];\n        }\n    }\n\n    componentWillUnmount() {\n        DOM.disconnect(this);\n    }\n\n    componentDidUpdate() {\n        for (let k in this.props) {\n            this[k] = this.props[k];\n        }\n    }\n};\n","import { registry } from './registry.js';\nimport { connect } from './dom.js';\n\n/**\n * Instantiate all defined components in a DOM tree.\n * @param {HTMLElement} root The root Node of the tree.\n */\nexport function bootstrap(root) {\n    for (let k in registry.components) {\n        let Component = registry.get(k);\n        let elements = root.querySelectorAll(`${k}, [is=\"${k}\"]`);\n        for (let i = 0, len = elements.length; i < len; i++) {\n            let component = new Component(elements[i]);\n            connect(component);\n        }\n    }\n}\n","import { registry } from './registry.js';\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport function render(parent, Component, props) {\n    return ReactDOM.render(\n        React.createElement(Component, props),\n        parent\n    );\n}\n","/**\n * A shortande to `Object.defineProperty` method.\n * @ignore\n */\nexport const define = Object.defineProperty;\n","import { define } from '../helpers/obj-define.js';\nconst sym = 'components';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace DNA.registry\n * @memberof DNA\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @memberof DNA.registry\n     * @type {Object}\n     * @private\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        define(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","import { Symbol } from '../helpers/symbol.js';\n\n/**\n * Symbol for DNA component mixin.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const DNA_SYMBOL = Symbol('dna');\n/**\n * Symbol for component instance.\n * Bound to a node.\n * @type {String}\n * @private\n */\nexport const COMPONENT_SYMBOL = Symbol('component');\n/**\n * Symbol for node instance.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const NODE_SYMBOL = Symbol('node');\n/**\n * Symbol for style element.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const STYLE_SYMBOL = Symbol('style');\n","import { DNA_SYMBOL, COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => {\n    const Component = class extends SuperClass {\n        /**\n         * @private\n         */\n        get [DNA_SYMBOL]() {\n            return true;\n        }\n        /**\n         * @property {HTMLElement} node Get component node reference.\n         * @name node\n         * @type {HTMLElement}\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        get node() {\n            return this[NODE_SYMBOL];\n        }\n        set node(node) {\n            node[COMPONENT_SYMBOL] = this;\n            this[NODE_SYMBOL] = node;\n        }\n        /**\n         * Fires when an instance was inserted into the document.\n         * @method connectedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        connectedCallback() {\n            this.node[COMPONENT_SYMBOL] = this;\n        }\n        /**\n         * Fires when an instance was detached from the document.\n         * @method disconnectedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        disconnectedCallback() {}\n        /**\n         * Fires when an attribute was added, removed, or updated.\n         * @method attributeChangedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         *\n         * @param {String} attrName The changed attribute name.\n         * @param {String} oldVal The value of the attribute before the change.\n         * @param {String} newVal The value of the attribute after the change.\n         */\n        attributeChangedCallback() {}\n    };\n\n    return Component;\n};\n","/**\n * Alias to native `CustomEvent`.\n * @type {Function}\n * @private\n */\nlet CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    /**\n     * Polyfill `CustomEvent`.\n     * @type {Function}\n     * @private\n     */\n    CustomEvent = function(ev, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\n/** Polyfill for CustomEvent constructor. */\nexport { CustomEvent };\n","import { isUndefined, isFunction, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|*} tpl A template to use instead of `this.template`.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            return tpl.call(this);\n        }\n        let root = this.shadowRoot || this;\n        if (isUndefined(this.__innerHTML)) {\n            this.__innerHTML = root.innerHTML;\n        }\n        root.innerHTML = `${this.__innerHTML}${tpl}`;\n    }\n};\n","import { reduce } from '../helpers/arr-reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @author Justin Fagnani (https://github.com/justinfagnani)\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extends superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DNA.DOM\n * @memberof DNA\n * @static\n */\nexport { DOM };\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace DNA.MIXINS\n * @memberof DNA\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\n","/**\n * DNA\n * (c) 2015-2017 Chialab (http://www.chialab.it) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with React.\n */\nimport React from 'react';\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\nimport { registry } from '@dnajs/core/src/lib/registry.js';\nimport { proxy } from '@dnajs/core/src/lib/proxy.js';\nimport { ReactMixin } from './src/mixins/react.js';\n\nMIXINS.ReactMixin = ReactMixin;\n\nexport { registry };\nexport * from '@dnajs/core/src/core.js';\nexport { bootstrap } from '@dnajs/core/src/lib/bootstrap.js';\nexport { define } from '@dnajs/core/src/lib/define.js';\nexport { render } from './src/lib/render.js';\n\nconst Component = proxy(React.Component);\n\nexport class BaseComponent extends mix(Component).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin,\n    ReactMixin\n) {}\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","Symbol","name","self","getComponentNode","elem","node","getNodeComponent","COMPONENT_SYMBOL","connect","element","DNA_SYMBOL","disconnect","update","oldValue","newValue","constructor","observedAttributes","indexOf","createElement","Ctr","registry","get","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","getAttribute","removeAttribute","reduce","arr","callback","k","len","length","reducePrototype","getPrototypeOf","reduceProperty","key","properties","proto","hasOwnProperty","desc","getOwnPropertyDescriptor","res","push","reduceObjectProperty","scope","prop","dispatch","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","matches","target","selector","MATCHES_SELECTOR","checkDelegate","event","delegateCallback","_this","scoped","sheet","rules","cssRules","insertRule","reg","RegExp","text","i","rule","body","cssText","selectorText","split","shift","map","trim","match","join","replace","convertShadowCSS","style","css","is","textContent","fullMatch","mod","slice","ownerDocument","ROOT_DOC","createStyle","component","styleElem","id","checkNode","this","ReferenceError","proxyProperty","type","args","set","val","defineProperty","proxy","Component","DOM_PROXY","convertProps","filterAttributes","attrs","state","bootstrap","root","components","elements","querySelectorAll","define","tagName","config","render","props","ReactDOM","React","sym","toLowerCase","full","NODE_SYMBOL","STYLE_SYMBOL","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","getterFn","setterFn","undefined","validateType","initialized","changed","observe","unobserve","io","splice","defaultSet","clb","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","bind","Number","PropertiesMixin","_SuperClass","observed","propertyChangedCallback","changedProp","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","EventsMixin","events","addEventListener","removeEventListener","delegate","wrapCallback","trigger","StyleMixin","filter","protoCSS","shadowRoot","head","classList","add","TemplateMixin","template","tpl","__innerHTML","innerHTML","Mixin","superclass","with","arguments","c","mixin","mix","superClass","MIXINS","changing","ReactMixin","findDOMNode","setState","componentDidMount","componentWillUnmount","componentDidUpdate","BaseComponent"],"mappings":"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"}