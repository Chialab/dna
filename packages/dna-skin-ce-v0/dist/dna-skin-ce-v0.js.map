{"version":3,"file":"dna-skin-ce-v0.js","sources":["node_modules/incremental-dom/src/util.js","node_modules/incremental-dom/src/node_data.js","node_modules/incremental-dom/src/context.js","node_modules/skin-template/src/render.js","node_modules/skin-template/src/interpolator.js","packages/dna-skin/src/mixins/outer.js","node_modules/dna-components/src/lib/typeof.js","node_modules/dna-components/src/lib/dispatch.js","node_modules/dna-components/src/lib/nodes.js","node_modules/dna-components/src/lib/property.js","node_modules/dna-components/src/mixins/properties-component.js","node_modules/dna-components/src/lib/style.js","node_modules/dna-components/src/lib/shim.js","packages/dna-custom-elements-v0/index.js","node_modules/incremental-dom/src/nodes.js","node_modules/incremental-dom/src/notifications.js","node_modules/incremental-dom/src/assertions.js","node_modules/incremental-dom/src/dom_util.js","node_modules/incremental-dom/src/core.js","node_modules/incremental-dom/src/symbols.js","node_modules/incremental-dom/src/attributes.js","node_modules/incremental-dom/src/virtual_elements.js","node_modules/skin-template/src/idom.js","node_modules/skin-template/src/parser.js","node_modules/skin-template/src/compilers.js","node_modules/skin-template/src/template.js","packages/dna-skin/src/mixins/skin.js","node_modules/dna-components/src/polyfills/custom-event.js","node_modules/dna-components/src/lib/registry.js","node_modules/dna-components/src/mixins/component.js","node_modules/dna-components/src/polyfills/matches.js","node_modules/dna-components/src/mixins/events-component.js","node_modules/dna-components/src/mixins/style-component.js","node_modules/dna-components/src/mixins/template-component.js","node_modules/dna-components/src/polyfills/reduce.js","node_modules/dna-components/src/lib/mixins.js","node_modules/dna-components/src/library-helpers.js","node_modules/dna-components/index.js","packages/dna-custom-elements-v0/src/mixins/custom-element.js","packages/dna-skin/index.js","packages/dna-skin-ce-v0/index.js"],"sourcesContent":["/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","import { Parser } from './parser.js';\n\n/**\n * Iterate a key/value list of attributes.\n * @private\n * @param {Object} props The list of attributes.\n * @param {Function} callback The callback to trigger for any key/value couple.\n */\nfunction iterateProps(props, callback) {\n    if (props) {\n        // eslint-disable-next-line\n        for (let k in props) {\n            callback(k, props[k]);\n        }\n    }\n}\n\nfunction handleValue(value) {\n    if (value === true) {\n        value = '';\n    }\n    if (typeof value === 'string') {\n        value = `'${value}'`;\n    }\n    return value;\n}\n\n/**\n * Convert a key/value attributes list into IncrementalDOM format.\n * @private\n * @param {Object} props The list of attributes.\n * @return {Array} The attributes in IncrementalDOM format.\n */\nfunction handleProps(props) {\n    let res = [];\n    iterateProps(props, (key, value) => {\n        res.push(`'${key}'`, handleValue(value));\n    });\n    return res;\n}\n\nexport class Render {\n    /**\n     * A function chunks builder.\n     * @param {Object} globals A list of global variable names.\n     */\n    constructor(globals) {\n        this.invocations = [];\n        this.$ = globals;\n    }\n\n    addChunk(chunk) {\n        let res = '';\n        let parser = new Parser(chunk);\n        let data = parser.next();\n        while (data) {\n            switch (data.type) {\n            case Parser.OPEN_ELEMENT:\n                if (data.continue) {\n                    res += this.genElementOpenStart(data);\n                    this.setElementOpen(data.tag);\n                } else {\n                    res += this.genElementOpen(data);\n                }\n                break;\n            case Parser.OPEN_ELEMENT_END:\n                res += this.genElementOpenEnd(data);\n                this.clearElementOpen();\n                break;\n            case Parser.CLOSE_ELEMENT:\n                res += this.genElementClose(data);\n                break;\n            case Parser.CONTENT:\n                if (this.isElementOpen()) {\n                    let props = Parser.convertProps(data.content);\n                    if (props) {\n                        iterateProps(props, (key, value) => {\n                            if (key !== 'undefined' || value !== false) {\n                                if (key === 'undefined') {\n                                    if (this.hasLastAttr()) {\n                                        res += this.fillLastAttr(handleValue(value));\n                                    }\n                                } else if (value === false) {\n                                    res += this.setLastAttr(`'${key}'`);\n                                } else {\n                                    res += this.addProperty(`'${key}'`, handleValue(value));\n                                }\n                            }\n                        });\n                    }\n                } else {\n                    res += this.addText(data.content);\n                }\n            }\n            data = parser.next();\n        }\n        return res;\n    }\n\n    invokeDOM() {\n        this.invocations.forEach((val, index) => {\n            this.invocations[index] = true;\n        });\n    }\n\n    queueInvocation() {\n        return this.invocations.push(false) - 1;\n    }\n\n    checkInvocation(index) {\n        return this.invocations[index];\n    }\n\n    interpolate(chunk, vars) {\n        this.invokeDOM();\n        let invocation = this.queueInvocation();\n        let fn = `(${chunk.generate(vars)}).apply(${this.$.scope}, ${this.$.args})\\n`;\n        if (!this.checkInvocation(invocation)) {\n            if (this.isElementOpen()) {\n                if (this.hasLastAttr()) {\n                    return this.fillLastAttr(fn);\n                } else {\n                    this.setLastAttr(fn);\n                }\n                return '';\n            } else {\n                return `${this.$.helper}.text(${fn});`;\n            }\n        }\n        return fn;\n    }\n\n    genElementOpen(data) {\n        this.invokeDOM();\n        let res = '';\n        let props = handleProps(data.props);\n        if (data.selfClosing) {\n            res += `${this.$.helper}.elementVoid('${data.tag}'${props.length ? `, null, null, ${props.join(', ')}` : ''});`;\n        } else {\n            res += `${this.$.helper}.elementOpen('${data.tag}'${props.length ? `, null, null, ${props.join(', ')}` : ''});`;\n        }\n        if (data.props.outer) {\n            res += `${this.$.helper}.skip();`;\n        }\n        return res;\n    }\n\n    genElementOpenStart(data) {\n        this.invokeDOM();\n        let res = `${this.$.helper}.elementOpenStart('${data.tag}');`;\n        if (data.props) {\n            iterateProps(data.props, (key, value) => {\n                if (value === false) {\n                    res += this.setLastAttr(`'${key}'`);\n                    delete data.props[key];\n                } else {\n                    res += `${this.$.helper}.attr('${key}', ${handleValue(value)});`;\n                }\n            });\n            if (data.props.outer) {\n                res += `${this.$.helper}.skip();`;\n            }\n        }\n        return res;\n    }\n\n    genElementOpenEnd(data) {\n        this.invokeDOM();\n        let res = `${this.$.helper}.elementOpenEnd();`;\n        let open = this.getElementOpen();\n        if (data.selfClosing || Parser.isSelfClosing(open)) {\n            if (!data.tag) {\n                data.tag = open;\n            }\n            res += this.genElementClose(data);\n        }\n        return res;\n    }\n\n    genElementClose(data) {\n        this.invokeDOM();\n        this.clearLastAttr();\n        return `${this.$.helper}.elementClose('${data.tag}');`;\n    }\n    /**\n     * Generate a function chunk for text node creation.\n     * @param {String} content The chunk which generates the text node content.\n     * @return {String} The function chunk for text node creation.\n     */\n    addText(content) {\n        this.invokeDOM();\n        return `${this.$.helper}.text('${content}');`;\n    }\n    /**\n     * Generate a function chunk for attribute setting.\n     * @param {String} attrName The chunk which generates the attribute name.\n     * @param {String} val The chunk which generates the attribute value.\n     * @return {String} The function chunk for attribute setting.\n     */\n    addProperty(attrName, val) {\n        this.invokeDOM();\n        return `${this.$.helper}.attr(${attrName}, ${val});`;\n    }\n    /**\n     * Set a pending attribute.\n     * @param {String} name The name of the pending attribute.\n     */\n    setLastAttr(name) {\n        let res = '';\n        this.lastAttr = name;\n        return res;\n    }\n    /**\n     * Set a the value of the pending attribute.\n     * @param {String} val A function chunk which generates the value for the pending attribute.\n     * @return {String} The function chunk which set the pending attribute.\n     */\n    fillLastAttr(val) {\n        let lastAttr = this.getLastAttr();\n        this.clearLastAttr();\n        return this.addProperty(lastAttr, val);\n    }\n    /**\n     * Retrieve the pending attribute name.\n     */\n    getLastAttr() {\n        return this.lastAttr;\n    }\n    /**\n     * Check if there is a pending attribute.\n     * @return {Boolean}\n     */\n    hasLastAttr() {\n        return !!this.lastAttr;\n    }\n    /**\n     * Clear pending attribute.\n     */\n    clearLastAttr() {\n        this.lastAttr = null;\n    }\n    /**\n     * Set a pending element definition.\n     * @param {String} tag The tag of the element.\n     */\n    setElementOpen(tag) {\n        this.lastElement = tag;\n    }\n    /**\n     * Retrieve the pending element definition tag.\n     */\n    getElementOpen() {\n        return this.lastElement;\n    }\n    /**\n     * Check if there is a pending element definition.\n     * @return {Boolean}\n     */\n    isElementOpen() {\n        return !!this.lastElement;\n    }\n    /**\n     * Clear pending element definition.\n     */\n    clearElementOpen() {\n        this.lastElement = null;\n    }\n}\n","/**\n * Escape regex body.\n * @private\n * @param {String} str The regex body.\n * @return {String} The escaped regex body.\n */\nfunction escapeRegExpBody(str) {\n    return str.replace(/\\$/g, '\\\\$');\n}\n/**\n * Generate a RegExp with rules.\n * @private\n * @param {Array} A list of rules.\n * @return {RegExp} The RegExp for the given rules.\n */\nfunction getRule(rules) {\n    let regex = new RegExp(`^(${\n        rules.map((str) =>\n            escapeRegExpBody(str)\n        ).join('|')\n    })`);\n    return regex;\n}\n\nexport class Interpolator {\n    /**\n     * Interpolate text and get notified about matches.\n     * @param {Object} options The interpolator configuration.\n     * @property {Array} options.start A list of rules for interpolation start.\n     * @property {Array} options.end A list of rules for interpolation end.\n     */\n    constructor(options) {\n        /**\n         * A regex which matches start symbols.\n         * @type RegExp\n         */\n        this.start = getRule(options.start);\n        /**\n         * A regex which matches end symbols.\n         * @type RegExp\n         */\n        this.end = getRule(options.end || options.start);\n        this.contextStart = getRule(['{']);\n        this.contextEnd = getRule(['}']);\n    }\n    /**\n     * Iterate a text and match interpolations.\n     * @param {String} body The text to iterate.\n     * @param {Function} notify The callback function for interpolation matches.\n     */\n    interpolate(body, notify) {\n        let {\n            start,\n            end,\n            contextStart,\n            contextEnd,\n        } = this;\n        let len = body.length;\n        let i = 0;\n        let chunk = '';\n        let contexts = 0;\n        while (i < len) {\n            let ch = body[i];\n            let sliced = body.slice(i);\n            if (contexts === 0 && sliced.match(start)) {\n                contexts = 1;\n                if (chunk) {\n                    notify({\n                        interpolate: false,\n                        chunk,\n                    });\n                    chunk = '';\n                }\n                i += sliced.match(start)[0].length;\n                continue;\n            } else if (contexts === 1 && sliced.match(end)) {\n                i += sliced.match(end)[0].length;\n                notify({\n                    interpolate: true,\n                    chunk,\n                });\n                chunk = '';\n                contexts = 0;\n                continue;\n            } else if (sliced.match(contextEnd)) {\n                if (contexts > 1) {\n                    contexts--;\n                }\n                /* istanbul ignore next */\n                /* String literal's interpolation end rule is equal to the context end one,\n                 * so we are not really handling this case.\n                 */\n                if (contexts === 1 && i === (len - 1)) {\n                    notify({\n                        interpolate: true,\n                        chunk,\n                    });\n                    chunk = '';\n                }\n            } else if (sliced.match(contextStart)) {\n                if (contexts > 0) {\n                    contexts++;\n                }\n            }\n            chunk += ch;\n            i++;\n        }\n        if (chunk) {\n            notify({\n                interpolate: contexts >= 1,\n                chunk,\n            });\n        }\n    }\n}\n","import Template from 'skin-template';\n\nfunction appendOuterNodes(parent, children) {\n    for (let i = 0, len = children.length; i < len; i++) {\n        parent.outer.appendChild(children[i]);\n    }\n}\n\nconst IDOM = Template.IDOM;\nconst ADDED_CALLBACK = IDOM.notifications.nodesCreated;\nIDOM.notifications.nodesCreated = function(nodes) {\n    if (rendering) {\n        nodes.forEach((node) => {\n            if (node.hasAttribute('outer')) {\n                rendering.outer = node;\n            }\n        });\n    }\n    /* istanbul ignore if */\n    if (ADDED_CALLBACK) {\n        ADDED_CALLBACK(nodes);\n    }\n};\n\nlet rendering;\n\nexport const OuterMixin = (superClass) => class extends superClass {\n    constructor() {\n        super();\n        this.__initialChildren = [].slice.call(this.childNodes);\n        this.childrenObserver = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.addedNodes.length && rendering !== this && this.outer) {\n                    appendOuterNodes(this, mutation.addedNodes);\n                }\n            });\n        });\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.childrenObserver.observe(this, {\n            childList: true,\n        });\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.childrenObserver.disconnect();\n    }\n\n    render() {\n        rendering = this;\n        super.render();\n        rendering = null;\n        if (this.__initialChildren && this.outer) {\n            appendOuterNodes(this, this.__initialChildren);\n            delete this.__initialChildren;\n        }\n    }\n};\n","export function isFunction(fn) {\n    return typeof fn === 'function';\n}\n\nexport function isString(str) {\n    return typeof str === 'string';\n}\n\nexport function isObject(obj) {\n    return typeof obj === 'object';\n}\n\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isFunction } from './typeof.js';\nimport { registry } from './registry.js';\n\nconst CONNECTED = 'connectedCallback';\nconst DISCONNECTED = 'disconnectedCallback';\nconst UPDATED = 'attributeChangedCallback';\n\nexport function getComponent(node) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n        let is = node.getAttribute('is') || node.tagName;\n        return registry.get(is);\n    }\n    return registry.get(node);\n}\n\nexport function connect(node) {\n    if (isFunction(node[CONNECTED])) {\n        node[CONNECTED].call(node);\n        return true;\n    }\n    return false;\n}\n\nexport function disconnect(node) {\n    if (isFunction(node[DISCONNECTED])) {\n        node[DISCONNECTED].call(node);\n        return true;\n    }\n    return false;\n}\n\nexport function update(node, name, oldValue, newValue) {\n    if (isFunction(node[UPDATED]) && name !== 'is') {\n        node[UPDATED].call(node, name, oldValue, newValue);\n        return true;\n    }\n    return false;\n}\n\nexport function bind(node, Ctr) {\n    Ctr = Ctr || getComponent(node).Ctr;\n    node.__proto__ = Ctr.prototype;\n    Object.defineProperty(node, 'constructor', {\n        value: Ctr,\n        configurable: true,\n        writable: true,\n    });\n    Ctr.call(node);\n}\n\nexport function create(node, descriptor) {\n    descriptor = descriptor || getComponent(node);\n    if (descriptor) {\n        bind(node, descriptor.Ctr);\n        return true;\n    }\n    return false;\n}\n\nexport function createElement(is) {\n    let descriptor = getComponent(is);\n    if (descriptor) {\n        return new descriptor.Ctr();\n    }\n}\n\nexport function appendChild(parent, node) {\n    if (parent !== node.parentNode || parent.lastElementChild !== node) {\n        if (node.parentNode) {\n            removeChild(node.parentNode, node);\n        }\n        parent.appendChild(node);\n        return connect(node);\n    }\n    return false;\n}\n\nexport function removeChild(parent, node) {\n    parent.removeChild(node);\n    return disconnect(node);\n}\n\nexport function setAttribute(node, name, value) {\n    let oldValue = node.getAttribute(name);\n    node.setAttribute(name, value);\n    let attrs = node.constructor.observedAttributes || [];\n    if (attrs.indexOf(name) !== -1) {\n        update(node, name, oldValue, value);\n        return true;\n    }\n    return false;\n}\n\nexport function removeAttribute(node, name) {\n    let oldValue = node.getAttribute(name);\n    node.removeAttribute(name);\n    let attrs = node.constructor.observedAttributes || [];\n    if (attrs.indexOf(name) !== -1) {\n        update(node, name, oldValue, null);\n        return true;\n    }\n    return false;\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\nconst define = Object.defineProperty;\n\nclass Property {\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if (this.validateType(val)) {\n                if (this.validator(val)) {\n                    let oldValue = this.value;\n                    if (oldValue !== val) {\n                        this.value = val;\n                        this.changed(val, oldValue);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n\n    observe(fn) {\n        if (isFunction(fn) || isString(fn)) {\n            this._.push(fn);\n        }\n        return this;\n    }\n\n    unobserve(fn) {\n        let io = this._.indexOf(fn);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                clb = this.scope[this._[i]];\n            }\n            clb(this, newValue, oldValue);\n        }\n    }\n\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n        }\n        return this;\n    }\n\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n\n    validateType(val) {\n        if (val === null || val === undefined) {\n            return true;\n        }\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        // eslint-disable-next-line\n        throw new TypeError(\n            `Invalid \\`${val}\\` value for \"${this.name}\" property${this.scope ? ` for ${this.scope.is}` : ''}.`\n        );\n    }\n\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            this.setter(this.defaultValue);\n        }\n    }\n}\n\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, PropertiesMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(PropertiesMixin) {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * On `created` callback, apply attributes to properties.\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k).init(this);\n            let { attrName, eventName } = prop;\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this, eventName);\n                    }\n                });\n            }\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * On `attributeChanged` callback, sync attributes with properties.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        this.properties[propName].observe(callback);\n    }\n};\n","let doc = document;\n\nexport function createStyle(id) {\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${id}`);\n    let head = doc.head;\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n\n/**\n * Add `<style>` tag for the component.\n * @param {String} styleElem The CSS style element.\n * @param {String} style A CSS string.\n * @return {HTMLStyleElement} the style tag created.\n */\nexport function importStyle(styleElem, style) {\n    if (style !== styleElem.textContent) {\n        styleElem.textContent = style;\n        return true;\n    }\n    return false;\n}\n","import { registry } from './registry.js';\nimport { isString } from './typeof.js';\n\nfunction isNew(node) {\n    try {\n        return !isString(node.outerHTML);\n    } catch (ex) {\n        return true;\n    }\n}\n\nexport function shim(Original) {\n    class Polyfilled {\n        constructor() {\n            if (!isNew(this)) {\n                return this;\n            }\n            let desc = registry.get(this.constructor);\n            let config = desc.config;\n            // Find the tagname of the constructor and create a new element with it\n            let element = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            element.__proto__ = desc.Ctr.prototype;\n            if (config.extends) {\n                element.setAttribute('is', desc.is);\n            }\n            return element;\n        }\n    }\n    Polyfilled.prototype = Object.create(Original.prototype, {\n        constructor: {\n            value: Polyfilled,\n            configurable: true,\n            writable: true,\n        },\n    });\n    return Polyfilled;\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements v0 spec.\n */\nimport { shim, mix, MIXINS } from 'dna-components/src/library-helpers.js';\nimport { registry, BaseComponent as OriginalComponent } from 'dna-components';\nimport { customElementMixin } from './src/mixins/custom-element.js';\n\nMIXINS.customElementMixin = customElementMixin;\n\nexport { prop, HELPERS } from 'dna-components/src/library-helpers.js';\nexport { shim, mix, registry, MIXINS };\nexport function define(tagName, Component, config = {}) {\n    registry.define(tagName, Component, config);\n    let opts = {\n        prototype: Component.prototype,\n    };\n    if (config.extends) {\n        opts.extends = config.extends;\n    }\n    return document.registerElement(tagName, opts);\n}\nexport function render(node, Component, props = {}) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    node.appendChild(element);\n    return element;\n}\n\nexport class BaseComponent extends mix(OriginalComponent).with(\n    customElementMixin\n) {}\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nlet inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nconst assertInPatch = function(functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nconst assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nconst assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nconst assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nconst assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nconst assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nconst assertCloseMatchesOpenTag = function(nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close \"' + tag + '\" but \"' +\n        nodeName + '\" was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nconst assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nconst assertPatchElementNoExtras = function(\n    startNode,\n    currentNode,\n    expectedNextNode,\n    expectedPrevNode) {\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInAttributes = function(value) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInSkip = function(value) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","import {\n    skip,\n    skipNode,\n    importNode,\n    currentElement,\n    currentPointer,\n    elementOpen,\n    elementOpenStart,\n    elementOpenEnd,\n    elementClose,\n    elementVoid,\n    attr,\n    text,\n    applyAttr,\n    applyProp,\n    patch,\n    patchOuter,\n    symbols,\n    attributes,\n    notifications,\n} from 'incremental-dom';\n\n/**\n * IncrementalDOM wrapper.\n */\nexport class IDOM {\n    /**\n     * @private\n     */\n    static close(...args) { return close(...args); }\n    /**\n     * @private\n     */\n    static skip(...args) { return skip(...args); }\n    /**\n     * @private\n     */\n    static skipNode(...args) { return skipNode(...args); }\n    /**\n     * @private\n     */\n    static importNode(...args) { return importNode(...args); }\n    /**\n     * @private\n     */\n    static currentElement(...args) { return currentElement(...args); }\n    /**\n     * @private\n     */\n    static currentPointer(...args) { return currentPointer(...args); }\n    /**\n     * @see {@link http://google.github.io/incremental-dom/#api/elementOpen IncrementalDOM.elementOpen}\n     */\n    static elementOpen(...args) { return elementOpen(...args); }\n    /**\n     * @see {@link http://google.github.io/incremental-dom/#api/elementOpenStart IncrementalDOM.elementOpenStart}\n     */\n    static elementOpenStart(...args) { return elementOpenStart(...args); }\n    /**\n     * @see {@link http://google.github.io/incremental-dom/#api/elementOpenEnd IncrementalDOM.elementOpenEnd}\n     */\n    static elementOpenEnd(...args) { return elementOpenEnd(...args); }\n    /**\n     * @see {@link http://google.github.io/incremental-dom/#api/elementClose IncrementalDOM.elementClose}\n     */\n    static elementClose(...args) { return elementClose(...args); }\n    /**\n     * @see {@link http://google.github.io/incremental-dom/#api/elementVoid IncrementalDOM.elementVoid}\n     */\n    static elementVoid(...args) { return elementVoid(...args); }\n    /**\n     * @see {@link http://google.github.io/incremental-dom/#api/attr IncrementalDOM.attr}\n     */\n    static attr(...args) { return attr(...args); }\n    /**\n     * Wrap the IncrementalDOM.text function with some arguments checks.\n     * @see {@link http://google.github.io/incremental-dom/#api/text IncrementalDOM.text}\n     * @param {String} str The text to render.\n     */\n    static text(str) {\n        if (typeof str === 'undefined') {\n            str = '';\n        }\n        text(str);\n    }\n    /**\n     * @private\n     */\n    static applyAttr(...args) { return applyAttr(...args); }\n    /**\n     * @private\n     */\n    static applyProp(...args) { return applyProp(...args); }\n    /**\n     * @see {@link http://google.github.io/incremental-dom/#api/patch IncrementalDOM.patch}\n     */\n    static patch(...args) { return patch(...args); }\n    /**\n     * @private\n     */\n    static patchOuter(...args) { return patchOuter(...args); }\n    /**\n     * @private\n     */\n    static get symbols() { return symbols; }\n    /**\n     * @private\n     */\n    static get attributes() { return attributes; }\n    /**\n     * @private\n     */\n    static get notifications() { return notifications; }\n}\n","/**\n * Match initial spaces in a string.\n * @private\n * @type {RegExp}\n */\nconst START_SPACES_REGEX = /^\\s{2,}/g;\n/**\n * Match spaces between tags.\n * @private\n * @type {RegExp}\n */\nconst TAG_SPACES = /\\>\\s+\\</g;\n/**\n * Match opening and closing tags.\n * @private\n * @type {RegExp}\n */\nconst TAG_REGEX = /(<\\/?([a-zA-Z1-9\\-]*)([^>]*)>?)/m;\n/**\n * Match tag attributes.\n * @private\n * @type {RegExp}\n */\nconst PROPS_REGEX = /((?:.|\\n)*?)(?:\\/?>|<|$)/;\n/**\n * Match unwanted characters in tag attribute definition.\n * @private\n * @type {RegExp}\n */\nconst CLEAN_PROPS_STR = /[\\'\\\"\\/\\s]/;\n/**\n * A list of self closing HTML tags.\n * @private\n * @type {Array}\n */\nconst SELF_CLOSING_TAGS = [\n    'area',\n    'base',\n    'br',\n    'col',\n    'command',\n    'embed',\n    'hr',\n    'img',\n    'input',\n    'keygen',\n    'link',\n    'meta',\n    'param',\n    'source',\n    'track',\n    'wbr',\n];\n/**\n * Match self closing tags.\n * @private\n * @type {RegExp}\n */\nconst CLOSED_TAG = /\\/>$/;\n\nexport class Parser {\n    /**\n     * String HTML parser for Incremental DOM rendering.\n     * @param {String} data The text to parse.\n     */\n    constructor(data) {\n        /**\n         * Data to parse.\n         * @type {String}\n         */\n        this.data = data\n            .replace(/\\n/g, '')\n            .replace(TAG_SPACES, '><');\n        this.restart();\n    }\n    /**\n     * Reset parser index.\n     */\n    restart() {\n        this.setCurrent(this.data);\n    }\n    /**\n     * Set data for the next parsing step.\n     * @private\n     * @param {String} data\n     */\n    setCurrent(data) {\n        if (typeof data === 'string') {\n            /**\n             * Current chunk to parse.\n             * @type {String}\n             */\n            this.current = data\n                .replace(START_SPACES_REGEX, ' ');\n        }\n    }\n    /**\n     * Check if all data has been parsed.\n     * @return {Boolean}\n     */\n    ended() {\n        return !this.current;\n    }\n    /**\n     * Get the next chunk analysis.\n     * @return {Object} The anlysis descriptor.\n     */\n    next() {\n        let res = false;\n        if (!this.ended()) {\n            let match;\n            let current = this.current;\n            if (current[0] !== '<') {\n                if (current[0] === '>' || (current[0] === '/' && current[1] === '>')) {\n                    let selfClosing = false;\n                    if (current[0] === '/') {\n                        match = [current, '/>'];\n                        selfClosing = true;\n                    } else {\n                        match = [current, '>'];\n                    }\n                    res = {\n                        chunk: current,\n                        selfClosing,\n                        type: Parser.OPEN_ELEMENT_END,\n                    };\n                } else {\n                    match = current.match(PROPS_REGEX);\n                    res = {\n                        chunk: current,\n                        type: Parser.CONTENT,\n                        content: match[1],\n                    };\n                }\n            } else {\n                match = current.match(TAG_REGEX);\n                if (current[1] === '/') {\n                    res = {\n                        chunk: current,\n                        type: Parser.CLOSE_ELEMENT,\n                        tag: match[2],\n                    };\n                } else {\n                    let longMatch = match[1];\n                    if (longMatch[longMatch.length - 1] === '>') {\n                        res = {\n                            chunk: current,\n                            type: Parser.OPEN_ELEMENT,\n                            continue: false,\n                            tag: match[2],\n                            selfClosing: Parser.isSelfClosing(match[2]) ||\n                                Parser.isSelfClosing(longMatch),\n                            props: Parser.convertProps(match[3], true),\n                        };\n                    } else {\n                        res = {\n                            chunk: current,\n                            type: Parser.OPEN_ELEMENT,\n                            continue: true,\n                            tag: match[2],\n                            selfClosing: Parser.isSelfClosing(match[2]),\n                            props: Parser.convertProps(match[3]),\n                        };\n                    }\n                }\n            }\n            if (match && match[1] !== current) {\n                this.setCurrent(current.substring(match[1].length));\n            } else {\n                this.setCurrent('');\n            }\n        }\n        return res;\n    }\n    /**\n     * Opening element state key.\n     * @type {String}\n     */\n    static get OPEN_ELEMENT() {\n        return 'OPEN_ELEMENT';\n    }\n    /**\n     * Closing element definition state key.\n     * @type {String}\n     */\n    static get OPEN_ELEMENT_END() {\n        return 'OPEN_ELEMENT_END';\n    }\n    /**\n     * Close element state key.\n     * @type {String}\n     */\n    static get CLOSE_ELEMENT() {\n        return 'CLOSE_ELEMENT';\n    }\n    /**\n     * Content state key.\n     * @type {String}\n     */\n    static get CONTENT() {\n        return 'CONTENT';\n    }\n    /**\n     * Check if a string matches a self closing tag.\n     * @param {String} str The string to check.\n     * @return {Boolean}\n     */\n    static isSelfClosing(str) {\n        return SELF_CLOSING_TAGS.indexOf(\n            str.toLowerCase()\n        ) !== -1 || !!str.match(CLOSED_TAG);\n    }\n    /**\n     * Convert an HTML text with attributes to key/value object.\n     * @param {String} str The string to parse.\n     * @param {*} defaultEmpty The default value for empty attributes.\n     * @return {Object} A key/value object representation for HTML attributes.\n     */\n    static convertProps(str = '', defaultEmpty = false) {\n        let res = {};\n        if (str) {\n            let isOpenAttr = false;\n            let isOpenApix = false;\n            let isOpenValue = false;\n            let attrName = null;\n            for (let i = 0, len = str.length; i < len; i++) {\n                let ch = str[i];\n                if (ch === '=') {\n                    if (!isOpenAttr) {\n                        attrName = undefined;\n                    }\n                    res[attrName] = false;\n                    isOpenAttr = false;\n                    isOpenValue = true;\n                } else if (ch.match(/[\\s|\\n]/)) {\n                    if (isOpenApix) {\n                        res[attrName] = res[attrName] || '';\n                        res[attrName] += ch;\n                    } else if (isOpenAttr) {\n                        if (attrName) {\n                            res[attrName] = true;\n                            attrName = null;\n                            isOpenAttr = false;\n                        }\n                    } else if (isOpenValue) {\n                        attrName = null;\n                        isOpenValue = false;\n                    }\n                } else if ((ch === '\"' || ch === '\\'') && attrName !== null) {\n                    if (isOpenValue && res[attrName] !== false) {\n                        attrName = null;\n                        isOpenAttr = false;\n                        isOpenApix = false;\n                    } else {\n                        isOpenApix = true;\n                        res[attrName] = res[attrName] || '';\n                    }\n                } else if (isOpenValue) {\n                    res[attrName] = res[attrName] || '';\n                    res[attrName] += ch;\n                } else {\n                    isOpenAttr = true;\n                    attrName = attrName || '';\n                    if (attrName !== '' || !ch.match(CLEAN_PROPS_STR)) {\n                        attrName += ch;\n                    }\n                }\n            }\n            if (isOpenAttr && attrName) {\n                res[attrName] = defaultEmpty;\n            } else if (isOpenApix) {\n                res[attrName] = false;\n            }\n        }\n        return res;\n    }\n}\n","import { Render } from './render.js';\nimport { Interpolator } from './interpolator.js';\nimport { IDOM } from './idom.js';\n\n/**\n * The variable name for incremental DOM API in generated function.\n * @private\n * @type {String}\n */\nconst SKIN_VAR = '$$$skin';\n/**\n * The variable name for original context in generated function.\n * @private\n * @type {String}\n */\nconst SKIN_SCOPE = '$$$this';\n/**\n * The variable name for original arguments in generated function.\n * @private\n * @type {String}\n */\nconst SKIN_ARGS = '$$$arguments';\n/**\n * An interpolator for function body.\n * @private\n * @type {Interpolator}\n */\nconst FUNCTION_INTERPOLATOR = new Interpolator({\n    start: ['`'],\n});\n/**\n * An interpolator for literal body.\n * @private\n * @type {Interpolator}\n */\nconst LINEAR_INTERPOLATOR = new Interpolator({\n    start: ['${'],\n    end: ['}'],\n});\n\n/**\n * A generic Compiler class.\n *\n * @example\n * ```js\n * let compiler = new Compiler('<div class=\"sample\">${name}</div>');\n * let fn = compiler.compile('name');\n * IncrementalDOM.patch(document.body, fn('Alan'));\n * ```\n */\nclass Compiler {\n    /**\n     * Create a Compiler.\n     * @param {String} body The template text to compile.\n     * @param {Compiler} parent The parent compiler.\n     */\n    constructor(body, parent) {\n        /**\n         * The compiler which has instantiated this.\n         * @type {Compiler}\n         */\n        this.parent = parent;\n        /**\n         * The render helper for the compiler.\n         * @type {Render}\n         */\n        this.render = (parent instanceof Compiler) ? parent.render : new Render({\n            helper: SKIN_VAR,\n            scope: SKIN_SCOPE,\n            args: SKIN_ARGS,\n        });\n        /**\n         * The body to compile.\n         * @type {String}\n         */\n        this.body = body;\n    }\n    /**\n     * Generate a function script.\n     * @param {String} body The body of the function.\n     * @param {Array} vars A list of global variables to inject into the function.\n     * @return {String} The function script\n     */\n    generate(vars, body) {\n        body = body || this.body;\n        return `function(${SKIN_VAR}${vars.length ? `, ${vars.join(', ')}` : ''}) { ${body} }`;\n    }\n    /**\n     * Compile the body to a function.\n     * @param {String} ...vars A list of global variables to inject into the function.\n     * @return {Function} The compiled template function.\n     */\n    compile(...vars) {\n        let body = this.generate(vars);\n        try {\n            let fn = new Function(\n`var ${SKIN_SCOPE} = this;\nvar ${SKIN_ARGS} = arguments;\n(${body}).apply(${SKIN_SCOPE}, ${SKIN_ARGS});`\n            );\n            let res = function(...args) {\n                return fn.call(\n                    this,\n                    IDOM,\n                    ...args\n                );\n            };\n            res.render = fn;\n            return res;\n        } catch (ex) {\n            let original = this.body;\n            return function() {\n                let err = new Error(`Malformed template. ${original} => ${body}`);\n                err.original = ex;\n                throw err;\n            };\n        }\n    }\n}\n\n/**\n * A compiler for function body.\n * @extends Compiler\n */\nexport class FunctionCompiler extends Compiler {\n    /**\n     * Split the function body in chunks.\n     * @return {Array} A list of script strings and {@link LiteralCompiler} instances.\n     */\n    chunk() {\n        let chunks = [];\n        FUNCTION_INTERPOLATOR.interpolate(this.body, (desc) => {\n            if (desc.interpolate) {\n                chunks.push(new LiteralCompiler(desc.chunk, this));\n            } else {\n                chunks.push(desc.chunk);\n            }\n        });\n        return chunks;\n    }\n    /**\n     * @see {@link Compiler}\n     * @private\n     */\n    generate(vars) {\n        let res = 'return ';\n        let chunks = this.chunk();\n        chunks.forEach((chunk, index) => {\n            if (chunk instanceof LiteralCompiler) {\n                res += this.render.interpolate(chunk, vars);\n            } else {\n                if (index === 0) {\n                    chunk = chunk.replace(/^\\s*/, '');\n                }\n                res += `${chunk}`;\n            }\n        });\n        res += ';';\n        return super.generate(vars, res);\n    }\n}\n\n/**\n * A compiler for literal body.\n * @extends Compiler\n */\nexport class LiteralCompiler extends Compiler {\n    /**\n     * Split the literal body in chunks.\n     * @return {Array} A list of text strings and {@link FunctionCompiler} instances.\n     */\n    chunk() {\n        let chunks = [];\n        LINEAR_INTERPOLATOR.interpolate(this.body, (desc) => {\n            if (desc.interpolate) {\n                chunks.push(new FunctionCompiler(desc.chunk, this));\n            } else {\n                chunks.push(desc.chunk);\n            }\n        });\n        return chunks;\n    }\n    /**\n     * @see {@link Compiler}\n     * @private\n     */\n    generate(vars) {\n        let res = '';\n        let chunks = this.chunk();\n        chunks.forEach((chunk) => {\n            if (chunk instanceof FunctionCompiler) {\n                res += this.render.interpolate(chunk, vars);\n            } else {\n                res += this.render.addChunk(chunk);\n            }\n        });\n        return super.generate(vars, res);\n    }\n}\n","import { IDOM } from './idom.js';\nimport { LiteralCompiler } from './compilers.js';\n\nexport class Template {\n    static get IDOM() {\n        return IDOM;\n    }\n\n    constructor(...vars) {\n        let template = vars.pop();\n        if (template instanceof Template) {\n            this.factory = template.factory;\n            this.scope = template.scope;\n        } else if (typeof template === 'function') {\n            this.factory = template;\n        } else {\n            this.factory = new LiteralCompiler(template).compile(...vars);\n        }\n    }\n\n    setScope(scope) {\n        this.scope = scope;\n        return this;\n    }\n\n    render(node, ...args) {\n        IDOM.patch(\n            node,\n            () => this.factory.apply(this.scope || null, args)\n        );\n        return this;\n    }\n}\n","import Template from 'skin-template';\n\nexport const SkinTemplateMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        let template = this.template;\n        if (template && !this.hasOwnProperty('template')) {\n            let Ctr = this.constructor;\n            if (typeof template === 'string') {\n                template = new Template(template);\n                Object.defineProperty(Ctr.prototype, 'template', {\n                    value: template,\n                });\n            }\n            let tpl = new Template(template).setScope(this);\n            Object.defineProperty(this, 'template', {\n                value: () => tpl.render(this),\n            });\n        }\n    }\n};\n","let CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    let ev = new self.CustomEvent('test');\n    CustomEvent = self.CustomEvent;\n} catch(ex) {\n    CustomEvent = function(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined,\n        };\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\nexport { CustomEvent };\n","import { isFunction, isString } from './typeof.js';\n\nexport const registry = {\n    components: {},\n    define(name, Ctr, config = {}) {\n        this.components[name.toLowerCase()] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    get(name) {\n        if (isString(name)) {\n            return this.components[name.toLowerCase()];\n        } else if (isFunction(name)) {\n            for (let k in this.components) {\n                let desc = this.components[k];\n                if (desc.Ctr === name) {\n                    return desc;\n                }\n            }\n        }\n    },\n};\n","export const ComponentMixin = (SuperClass) => class extends SuperClass {\n    get is() {\n        return this.getAttribute('is') || this.localName;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     */\n    connectedCallback() {}\n    /**\n     * Fires when an instance was detached from the document.\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.matchesSelector ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n *\n * @example\n * my-component.js\n * ```js\n * import { EventsMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(EventsMixin) {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    this.addEventListener(evName, (ev) => {\n                        callback.call(this, ev, this);\n                    });\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    delegate(evName, selector, callback) {\n        this.addEventListener(evName, (event) => {\n            let target = event.target;\n            while (target && target !== this) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        });\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","import { createStyle, importStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { StyleMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(StyleMixin) {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr.prototype, 'styleElem', {\n                value: createStyle(this.is),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (style) {\n            importStyle(this.styleElem, style);\n        }\n    }\n};\n","import { isFunction, isString } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, TemplateMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(TemplateMixin) {\n *   get template() {\n *     return '<h1>${this.name}</h1>';\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        if (this.template) {\n            let props = this.properties;\n            if (props) {\n                let callback = () => {\n                    this.render();\n                };\n                for (let k in props) {\n                    props[k].observe(callback);\n                }\n            }\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.template) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     */\n    render() {\n        let tpl = this.template;\n        /* istanbul ignore else */\n        if (isFunction(tpl)) {\n            tpl();\n        } else if (isString(tpl)) {\n            this.innerHTML = tpl;\n        } else {\n            throw new Error('Invalid template property.');\n        }\n    }\n};\n","/* eslint-disable prefer-rest-params */\nexport const reduce = Array.prototype.reduce || function(callback /*, initialValue*/ ) {\n    'use strict';\n    let t = this;\n    let len = t.length;\n    let k = 0;\n    let value;\n    if (arguments.length === 2) {\n        value = arguments[1];\n    } else {\n        while (k < len && !(k in t)) {\n            k++;\n        }\n        value = t[k++];\n    }\n    for (; k < len; k++) {\n        if (k in t) {\n            value = callback(value, t[k], k, t);\n        }\n    }\n    return value;\n};\n","import { reduce } from '../polyfills/reduce.js';\n/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nclass Mixin {\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce.call(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\nexport const mix = (superClass) => new Mixin(superClass);\n","import { dispatch } from './lib/dispatch.js';\nimport * as DOM_HELPERS from './lib/nodes.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\nexport const DOM = DOM_HELPERS;\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport const HELPERS = {\n    dispatch,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport { shim } from './lib/shim.js';\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, prop, shim, HELPERS, DOM, MIXINS } from './src/library-helpers.js';\nimport { registry } from './src/lib/registry.js';\n\nexport { mix, prop, shim, HELPERS, DOM, MIXINS };\nexport { registry };\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    DOM.appendChild(node, element);\n    return element;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n *\n * @example\n * my-component.js\n * ```js\n * import { BaseComponent } from 'dna/component';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n */\nexport class BaseComponent extends mix(\n    shim(self.HTMLElement)\n).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {}\n","import { DOM } from 'dna-components/src/library-helpers.js';\n\nexport const customElementMixin = (superClass) => class extends superClass {\n    createdCallback() {\n        DOM.bind(this);\n    }\n    attachedCallback() {\n        this.connectedCallback();\n    }\n    detachedCallback() {\n        this.detachedCallback();\n    }\n};\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Skin template.\n */\nimport Template from 'skin-template';\nimport { SkinTemplateMixin } from './src/mixins/skin.js';\nimport { OuterMixin } from './src/mixins/outer.js';\nimport { mix, MIXINS, BaseComponent as OriginalComponent } from 'dna-components';\n\nMIXINS.SkinTemplateMixin = SkinTemplateMixin;\nMIXINS.OuterMixin = OuterMixin;\n\nexport { mix, MIXINS };\nexport { Template };\nexport const IDOM = Template.IDOM;\nexport { registry, render, define, prop, shim, HELPERS, DOM } from 'dna-components';\nexport class BaseComponent extends mix(OriginalComponent).with(\n    SkinTemplateMixin, OuterMixin\n) {}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Skin template and Custom Elements v0 spec.\n */\nimport { SkinTemplateMixin } from 'dna-skin/src/mixins/skin.js';\nimport { OuterMixin } from 'dna-skin/src/mixins/outer.js';\nimport { mix, MIXINS, BaseComponent as OriginalComponent } from 'dna-custom-elements-v0';\n\nMIXINS.SkinTemplateMixin = SkinTemplateMixin;\nMIXINS.OuterMixin = OuterMixin;\n\nexport { mix, MIXINS };\nexport { Template, IDOM } from 'dna-skin';\nexport { registry, render, define, prop, shim, HELPERS } from 'dna-custom-elements-v0';\nexport class BaseComponent extends mix(OriginalComponent).with(\n    SkinTemplateMixin,\n    OuterMixin\n) {}\n"],"names":["Blank","NodeData","nodeName","key","attrs","createMap","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","Context","created","notifications","nodesCreated","deleted","nodesDeleted","iterateProps","props","callback","k","handleValue","value","handleProps","res","push","escapeRegExpBody","str","replace","getRule","rules","regex","RegExp","map","join","appendOuterNodes","parent","children","i","len","length","outer","appendChild","isFunction","fn","isString","isObject","obj","isUndefined","isArray","Array","dispatch","node","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","getComponent","nodeType","Node","ELEMENT_NODE","is","getAttribute","tagName","registry","get","connect","CONNECTED","call","disconnect","DISCONNECTED","update","name","oldValue","newValue","UPDATED","bind","Ctr","__proto__","prototype","defineProperty","create","descriptor","createElement","parentNode","lastElementChild","removeChild","setAttribute","constructor","observedAttributes","indexOf","removeAttribute","prop","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","undefined","createStyle","id","styleElem","doc","type","head","firstElementChild","insertBefore","importStyle","style","textContent","isNew","outerHTML","shim","Original","Polyfilled","this","desc","config","element","document","extends","Object","define","Component","opts","registerElement","render","hasOwnProperty","has","initData","getData","importNode","isElement","Element","localName","attributes","child","firstChild","nextSibling","getNamespaceForTag","tag","namespaceURI","namespace","el","createElementNS","createText","createTextNode","markCreated","markDeleted","notifyChanges","isDocumentRoot","Document","DocumentFragment","getAncestry","root","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","currentNode","currentParent","markFocused","focusPath","patchFactory","run","f","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","ownerDocument","retVal","patchInner","patchOuter","startNode","matches","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","replaceChild","clearUnvisitedDOM","lastChild","enterNode","getNextNode","nextNode","exitNode","elementOpen","elementClose","currentElement","currentPointer","skip","skipNode","symbols","getNamespace","lastIndexOf","applyAttr","attrNS","setAttributeNS","applyProp","setStyleValue","setProperty","applyStyle","cssText","elStyle","applyAttributeTyped","updateAttribute","mutator","default","ATTRIBUTES_OFFSET","argsBuilder","statics","var_args","coreElementOpen","j","arguments","elementOpenStart","elementOpenEnd","apply","coreElementClose","elementVoid","coreText","formatted","IDOM","close","patch","START_SPACES_REGEX","TAG_SPACES","TAG_REGEX","PROPS_REGEX","CLEAN_PROPS_STR","SELF_CLOSING_TAGS","CLOSED_TAG","Parser","restart","setCurrent","current","ended","match","selfClosing","OPEN_ELEMENT_END","CONTENT","CLOSE_ELEMENT","longMatch","OPEN_ELEMENT","isSelfClosing","convertProps","substring","toLowerCase","defaultEmpty","isOpenAttr","isOpenApix","isOpenValue","attrName","ch","Render","globals","invocations","$","addChunk","chunk","parser","continue","genElementOpenStart","setElementOpen","genElementOpen","genElementOpenEnd","clearElementOpen","genElementClose","isElementOpen","content","_this","hasLastAttr","fillLastAttr","setLastAttr","addProperty","addText","invokeDOM","forEach","val","index","queueInvocation","checkInvocation","interpolate","vars","invocation","generate","scope","args","helper","_this3","open","getElementOpen","clearLastAttr","lastAttr","getLastAttr","lastElement","Interpolator","options","start","end","contextStart","contextEnd","body","notify","contexts","sliced","slice","SKIN_VAR","SKIN_SCOPE","SKIN_ARGS","FUNCTION_INTERPOLATOR","LINEAR_INTERPOLATOR","Compiler","compile","Function","original","err","Error","FunctionCompiler","chunks","LiteralCompiler","_this4","_Compiler","_this7","_Compiler2","Template","template","pop","factory","setScope","SkinTemplateMixin","SuperClass","_SuperClass","tpl","ADDED_CALLBACK","nodes","rendering","hasAttribute","OuterMixin","superClass","_superClass","__initialChildren","childNodes","childrenObserver","MutationObserver","mutations","mutation","addedNodes","connectedCallback","observe","disconnectedCallback","self","event","params","evt","createEvent","initCustomEvent","detail","components","ComponentMixin","attributeChangedCallback","_","validator","_setter","getterFn","setterFn","validateType","changed","unobserve","io","splice","clb","named","attrRequested","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","Number","PropertiesMixin","properties","reduce","partialProps","oldVal","newVal","observeProperty","propName","ELEM_PROTO","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","events","rule","selector","trim","delegate","addEventListener","target","trigger","StyleMixin","updateCSS","classList","add","css","TemplateMixin","innerHTML","t","Mixin","superclass","with","c","mixin","mix","DOM","DOM_HELPERS","MIXINS","HELPERS","BaseComponent","HTMLElement","customElementMixin","createdCallback","attachedCallback","detachedCallback","OriginalComponent"],"mappings":"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"}