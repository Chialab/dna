{"version":3,"file":"dna-mutation.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/dom.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/index.js","packages/dna-mutation/observer.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/polyfills/custom-event.js","node_modules/@dnajs/core/src/polyfills/matches.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/core.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","import { isFunction, isString } from './typeof.js';\nimport { registry } from './registry.js';\nimport { COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * Retrieve a HTMLElement instance from a component instance.\n * @private\n * @method getComponentNode\n *\n * @param {Component} elem The component instance.\n * @return {HTMLElement} The node for the component instance.\n */\nfunction getComponentNode(elem) {\n    if (!elem.nodeType) {\n        return elem.node;\n    }\n    return elem;\n}\n/**\n * Retrieve a component instance from a HTMLElement instance.\n * @private\n * @method getNodeComponent\n *\n * @param {HTMLElement} elem The node instance.\n * @return {Component} The component for the node instance.\n */\nfunction getNodeComponent(elem) {\n    if (elem.nodeType) {\n        return elem[COMPONENT_SYMBOL];\n    }\n    return elem;\n}\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    element = getNodeComponent(element);\n    if (element) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    element = getNodeComponent(element);\n    if (element) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    element = getNodeComponent(element);\n    if (element) {\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            element[UPDATED].call(element, name, oldValue, newValue);\n            return true;\n        }\n    }\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {Function|String} Ctr The component constructor or tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(Ctr) {\n    if (isString(Ctr)) {\n        Ctr = registry.get(Ctr);\n    }\n    if (isFunction(Ctr)) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    parent = getComponentNode(parent);\n    element = getComponentNode(element);\n    if (parent !== element.parentNode || parent.lastElementChild !== element) {\n        if (element.parentNode) {\n            removeChild(element.parentNode, element);\n        }\n        parent.appendChild(element);\n        return connect(element);\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    parent = getComponentNode(parent);\n    element = getComponentNode(element);\n    parent.removeChild(element);\n    return disconnect(element);\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    parent = getComponentNode(parent);\n    element = getComponentNode(element);\n    refNode = getComponentNode(refNode);\n    if (element.nextSibling !== refNode) {\n        if (element.parentNode) {\n            disconnect(element);\n        }\n        parent.insertBefore(element, refNode);\n        return connect(element);\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    element = getComponentNode(element);\n    refNode = getComponentNode(refNode);\n    if (element.parentNode) {\n        disconnect(element);\n    }\n    parent.replaceChild(element, refNode);\n    disconnect(refNode);\n    return connect(element);\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    element = getComponentNode(element);\n    let oldValue = element.getAttribute(name);\n    element.setAttribute(name, value);\n    return update(element, name, oldValue, value);\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    element = getComponentNode(element);\n    let oldValue = element.getAttribute(name);\n    element.removeAttribute(name);\n    return update(element, name, oldValue, null);\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\n/**\n * Shortcut to `Object.defineProperty`.\n * @type {Function}\n * @private\n */\nconst define = Object.defineProperty;\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n * @private\n */\nclass Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    this.changed(val, oldValue);\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Property|Function|Array} ctrs A Property to clone or a single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isFalsy, isArray, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (attrName) {\n                if (isUndefined(this[name])) {\n                    if (this.node.hasAttribute(attrName)) {\n                        this[name] = getValue(prop, this.node.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this.node, attrName, this[name]);\n                }\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback() {}\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { EVENTS_SYMBOL } from '../lib/symbols.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\nfunction addToPrivate(scope, evName, callback) {\n    let internal = scope[EVENTS_SYMBOL] = scope[EVENTS_SYMBOL] || {};\n    let events = internal[evName] = internal[evName] || [];\n    events.push(callback);\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    let wrapCallback = (event) => {\n                        callback.call(this, event, this);\n                    };\n                    this.node.addEventListener(evName, wrapCallback);\n                    addToPrivate(this, evName, wrapCallback);\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        let events = this[EVENTS_SYMBOL] || {};\n        for (let k in events) {\n            events[k].forEach((callback) => this.node.removeEventListener(k, callback));\n        }\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire when the event fires.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = (event) => {\n            let target = event.target;\n            let node = this.node;\n            while (target && target !== node) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        };\n        this.node.addEventListener(evName, wrapCallback);\n        addToPrivate(this, evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this.node, evName, data, bubbles, cancelable);\n    }\n};\n","import { isString } from '../lib/typeof.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\nconst HOST_REGEX = /(\\:host)(\\([^)]*\\))?/g;\nconst CSS_RULES_REGEX = /(#|\\.|\\@|\\[|[a-zA-Z]|\\:)([^{\\;\\}]*){/g;\nconst SEPARATOR_REGEX = /\\,\\s*/;\nconst rootDoc = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || rootDoc;\n}\n\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(node) {\n    let styleElem = ownerDocument(node).createElement('style');\n    styleElem.id = `style-${node.is}`;\n    return styleElem;\n}\n\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nfunction convertShadowCSS(css, is) {\n    const scope = `.${is}`;\n    return css\n        .replace(CSS_RULES_REGEX, (fullMatch) => {\n            let rules = fullMatch\n                .slice(0, -1)\n                .split(SEPARATOR_REGEX)\n                .map((rule) => {\n                    if (rule.indexOf(':host') === 0) {\n                        return rule.replace(HOST_REGEX, (fullMatch, host, state) => {\n                            state = state ? state.slice(1, -1) : '';\n                            return `${scope}${state}`;\n                        });\n                    } else {\n                        return `${scope} ${rule}`;\n                    }\n                })\n                .join(', ');\n            return `${rules}{`;\n        });\n}\n\nfunction updateCSS(element) {\n    let style = element.css;\n    if (isString(style)) {\n        if (element.node.shadowRoot) {\n            element[STYLE_SYMBOL].textContent = style;\n        } else {\n            element.constructor[STYLE_SYMBOL].textContent = convertShadowCSS(style, element.is);\n        }\n    }\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.css) {\n            if (this.node.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this.node);\n                    this.node.shadowRoot.appendChild(style);\n                }\n                updateCSS(this);\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this.node);\n                ownerDocument(this.node).head.appendChild(style);\n                updateCSS(this);\n            }\n        }\n        this.node.classList.add(this.is);\n    }\n};\n","function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n\n/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n * Mix a class with a mixin.\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extend superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, DOM, MIXINS } from './src/core.js';\nimport { registry } from './src/lib/registry.js';\n\n/**\n * @namespace DNA\n */\nexport * from './src/core.js';\nexport { registry };\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    DOM.appendChild(node, element);\n    return element;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n * @memberof DNA.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n * ```\n */\nexport class BaseComponent extends mix().with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {\n    constructor() {\n        super();\n        let desc = registry.get(this.is, true);\n        let config = desc.config;\n        this.node = document.createElement(\n            config.extends ? config.extends : desc.is\n        );\n        if (config.extends) {\n            this.node.setAttribute('is', desc.is);\n        }\n    }\n}\n","import { registry, DOM, COMPONENT_SYMBOL } from '@dnajs/core';\n\nfunction onCreation(nodes) {\n    [].forEach.call(nodes, (node) => {\n        if (!node[COMPONENT_SYMBOL]) {\n            let Ctr = registry.get(node.getAttribute('is') || node.tagName);\n            if (Ctr) {\n                let elem = new Ctr();\n                elem.node = node;\n                DOM.connect(elem);\n            }\n        } else {\n            DOM.connect(node);\n        }\n        if (node.children) {\n            onCreation(node.children);\n        }\n    });\n}\n\nconst OBSERVER = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n        switch (mutation.type) {\n        case 'childList': {\n            if (mutation.addedNodes) {\n                onCreation(mutation.addedNodes);\n            }\n            if (mutation.removedNodes) {\n                mutation.removedNodes.forEach((node) => {\n                    DOM.disconnect(node);\n                });\n            }\n            break;\n        }\n        case 'attributes': {\n            let attributeName = mutation.attributeName;\n            if (attributeName === 'is') {\n                break;\n            }\n            let node = mutation.target;\n            DOM.update(\n                node,\n                attributeName,\n                mutation.oldValue,\n                node.getAttribute(attributeName)\n            );\n            break;\n        }\n        }\n    });\n});\n\nOBSERVER.observe(document.body, {\n    attributes: true,\n    childList: true,\n    subtree: true,\n});\n","/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace registry\n * @memberof! DNA.\n * @static\n */\n\nconst sym = 'components';\n\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @type {Object}\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        Object.defineProperty(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","export const COMPONENT_SYMBOL = '__component';\nexport const NODE_SYMBOL = '__node';\nexport const EVENTS_SYMBOL = '__events';\nexport const STYLE_SYMBOL = '__style';\n","import { COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @property {HTMLElement} node Get component node reference.\n     * @name node\n     * @type {HTMLElement}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get node() {\n        return this[NODE_SYMBOL];\n    }\n    set node(node) {\n        node[COMPONENT_SYMBOL] = this;\n        this[NODE_SYMBOL] = node;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","let CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    let proto = CustomEvent.prototype;\n    CustomEvent = function(event, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = proto;\n}\n\nexport { CustomEvent };\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isFunction, isString, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            (this.node.shadowRoot || this.node).innerHTML = tpl;\n        } else if (!isFalsy(tpl)) {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DOM\n * @memberof! DNA.\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace MIXINS\n * @memberof! DNA.\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport * from './lib/symbols.js';\nexport * from './lib/typeof.js';\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","getComponentNode","elem","nodeType","node","getNodeComponent","COMPONENT_SYMBOL","connect","element","CONNECTED","disconnect","DISCONNECTED","update","name","oldValue","newValue","attrs","constructor","observedAttributes","indexOf","UPDATED","createElement","Ctr","registry","get","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","getAttribute","removeAttribute","dispatch","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","prop","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","addToPrivate","scope","callback","internal","EVENTS_SYMBOL","events","push","ownerDocument","rootDoc","createStyle","styleElem","id","is","convertShadowCSS","css","replace","CSS_RULES_REGEX","fullMatch","rules","slice","split","SEPARATOR_REGEX","map","rule","HOST_REGEX","host","state","join","updateCSS","style","shadowRoot","STYLE_SYMBOL","textContent","reduce","arr","k","len","length","define","tagName","Component","config","render","props","onCreation","nodes","forEach","children","sym","toLowerCase","defineProperty","full","desc","this","NODE_SYMBOL","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","self","proto","event","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","val","getterFn","_this","setterFn","undefined","validateType","changed","observe","unobserve","io","splice","i","clb","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","bind","Number","PropertiesMixin","_SuperClass","properties","res","partialProps","observed","propertyChangedCallback","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","match","selector","trim","delegate","wrapCallback","addEventListener","_this3","removeEventListener","target","_this4","trigger","StyleMixin","head","classList","add","TemplateMixin","template","tpl","innerHTML","Mixin","superclass","with","args","arguments","c","mixin","mix","superClass","DOM","DOM_HELPERS","MIXINS","BaseComponent","_mix$with","extends","OBSERVER","MutationObserver","mutations","mutation","type","addedNodes","removedNodes","attributeName","body"],"mappings":"4LASA,SAAgBA,GAAWC,SACD,kBAARA,GAWlB,QAAgBC,GAASD,SACC,gBAARA,GAWlB,QAAgBE,GAASF,SAC0B,oBAAxCG,OAAOC,UAAUC,SAASC,KAAKN,GAW1C,QAAgBO,GAAYP,SACF,mBAARA,GAWlB,QAAgBQ,GAAQR,SACbS,OAAMD,QAAQR,GAWzB,QAAgBU,GAAQV,SACbO,GAAYP,IAAgB,OAARA,GAAgBA,KAAQ,EC1DvD,QAASW,GAAiBC,SACjBA,GAAKC,SAGHD,EAFIA,EAAKE,KAYpB,QAASC,GAAiBH,SAClBA,GAAKC,SACED,EAAKI,GAETJ,EAmCX,QAAgBK,GAAQC,QACVH,EAAiBG,YAEfC,GAAWb,KAAKY,IACjB,EAYf,QAAgBE,GAAWF,QACbH,EAAiBG,YAEfG,GAAcf,KAAKY,IACpB,EAYf,QAAgBI,GAAOJ,EAASK,EAAMC,EAAUC,QAClCV,EAAiBG,GACd,IACLQ,GAAQR,EAAQS,YAAYC,0BAC5BF,EAAMG,QAAQN,MAAU,WAChBO,GAASxB,KAAKY,EAASK,EAAMC,EAAUC,IACxC,GAanB,QAAgBM,GAAcC,MACtB/B,EAAS+B,OACHC,EAASC,IAAIF,IAEnBjC,EAAWiC,SACJ,IAAIA,GAenB,QAAgBG,GAAYC,EAAQlB,YACvBP,EAAiByB,KAChBzB,EAAiBO,IACvBkB,IAAWlB,EAAQmB,YAAcD,EAAOE,mBAAqBpB,KACzDA,EAAQmB,cACInB,EAAQmB,WAAYnB,KAE7BiB,YAAYjB,GACZD,EAAQC,IAcvB,QAAgBqB,GAAYH,EAAQlB,YACvBP,EAAiByB,KAChBzB,EAAiBO,KACpBqB,YAAYrB,GACZE,EAAWF,GAetB,QAAgBsB,GAAaJ,EAAQlB,EAASuB,QACjC9B,EAAiByB,KAChBzB,EAAiBO,KACjBP,EAAiB8B,GACvBvB,EAAQwB,cAAgBD,QACpBvB,GAAQmB,cACGnB,KAERsB,aAAatB,EAASuB,GACtBxB,EAAQC,GAiBvB,QAAgByB,GAAaP,EAAQlB,EAASuB,YAChC9B,EAAiBO,KACjBP,EAAiB8B,GACvBvB,EAAQmB,cACGnB,KAERyB,aAAazB,EAASuB,KAClBA,GACJxB,EAAQC,GAanB,QAAgB0B,GAAa1B,EAASK,EAAMsB,KAC9BlC,EAAiBO,MACvBM,GAAWN,EAAQ4B,aAAavB,YAC5BqB,aAAarB,EAAMsB,GACpBvB,EAAOJ,EAASK,EAAMC,EAAUqB,GAY3C,QAAgBE,GAAgB7B,EAASK,KAC3BZ,EAAiBO,MACvBM,GAAWN,EAAQ4B,aAAavB,YAC5BwB,gBAAgBxB,GACjBD,EAAOJ,EAASK,EAAMC,EAAU,MCtO3C,QAAgBwB,GAASlC,EAAMmC,EAAQC,MAAMC,8DAAgBC,iEACpDnD,EAASgD,QACJ,IAAII,WAAU,8BAEpBC,GAAK,GAAIC,GAAYN,UACbC,iCAILpC,GAAK0C,cAAcF,GCqN9B,QAAgBG,GAAKC,SACbA,aAAgBC,GACTD,EAEJ,GAAIC,GAASD,GCpOxB,QAASE,GAASC,EAAUC,MACR,KAAZA,GAAkBD,EAASE,QAAQC,gBAC5B,MAENH,EAASE,QAAQE,kBAEPC,MAAKC,MAAML,GACpB,MAAOM,UAINN,GAWX,QAASlB,GAAayB,EAASC,EAAMzB,MAC7B0B,GAAmBF,EAAQvB,aAAawB,EACxCC,KAAqB1B,IAChBnC,EAAQmC,GAKmB,OAArB0B,KACCxB,gBAAgBuB,IALH,iBAAVzB,OACC,MAEJD,aAAa0B,EAAMzB,KClCvC,QAAS2B,GAAaC,EAAOxB,EAAQyB,MAC7BC,GAAWF,EAAMG,GAAiBH,EAAMG,OACxCC,EAASF,EAAS1B,GAAU0B,EAAS1B,SAClC6B,KAAKJ,GCKhB,QAASK,GAAcjE,SACZA,GAAKiE,eAAiBC,GAUjC,QAASC,GAAYnE,MACboE,GAAYH,EAAcjE,GAAMiB,cAAc,kBACxCoD,YAAcrE,EAAKsE,GACtBF,EAWX,QAASG,GAAiBC,EAAKF,MACrBX,OAAYW,QACXE,GACFC,QAAQC,GAAiB,SAACC,MACnBC,GAAQD,EACPE,MAAM,GAAG,GACTC,MAAMC,IACNC,IAAI,SAACC,SAC4B,KAA1BA,EAAKlE,QAAQ,SACNkE,EAAKR,QAAQS,GAAY,SAACP,EAAWQ,EAAMC,YACtCA,EAAQA,EAAMP,MAAM,GAAG,GAAM,MAC3BlB,EAAQyB,IAGZzB,MAASsB,IAG1BI,KAAK,YACAT,SAItB,QAASU,GAAUlF,MACXmF,GAAQnF,EAAQoE,GAChBrF,GAASoG,KACLnF,EAAQJ,KAAKwF,aACLC,GAAcC,YAAcH,IAE5B1E,YAAY4E,GAAcC,YAAcnB,EAAiBgB,EAAOnF,EAAQkE,KCpE5F,QAASqB,GAAOC,EAAKhC,EAAU7B,OACtB,GAAI8D,GAAI,EAAGC,EAAMF,EAAIG,OAAQF,EAAIC,EAAKD,MAC/BjC,EAAS7B,EAAO6D,EAAIC,GAAIA,EAAGD,SAEhC7D,GCuBX,QAAgBiE,GAAOC,EAASC,EAAWC,SAChChF,GAAS6E,OAAOC,EAASC,EAAWC,GAa/C,QAAgBC,GAAOpG,EAAMkG,EAAWG,MAChCjG,GAAU,GAAI8F,OACb,GAAIL,KAAKQ,KACFR,GAAKQ,EAAMR,aAEnBxE,YAAYrB,EAAMI,GACfA,EC7CX,QAASkG,GAAWC,MACbC,QAAQhH,KAAK+G,EAAO,SAACvG,MACfA,EAAKE,MAQFC,QAAQH,OARa,IACrBkB,GAAMC,EAASC,IAAIpB,EAAKgC,aAAa,OAAShC,EAAKiG,YACnD/E,EAAK,IACDpB,GAAO,GAAIoB,KACVlB,KAAOA,KACRG,QAAQL,IAKhBE,EAAKyG,YACMzG,EAAKyG,+7BCNtBC,EAAM,aAECvF,YAKRuF,4BAOMjG,EAAMS,MAAKiF,+DACP1F,EAAKkG,qBACLC,eAAe1F,EAAI5B,UAAW,UAC5B,iBAAMmB,WAEViG,GAAKjG,OACFA,uCAWRA,EAAMoG,MACFC,GAAOC,KAAKL,GAAKjG,EAAKkG,kBACtBG,QACOD,GAAOC,EAAOA,EAAK5F,SC3CzBhB,EAAmB,cACnB8G,EAAc,SACdlD,EAAgB,WAChB2B,EAAe,UVoCtBpF,EAAY,oBAQZE,EAAe,uBAQfS,EAAU,yLW/CHiG,EAAiB,SAACC,8GAqB3BC,kCACSnH,KAAKE,GAAoB6G,kBAQlCK,8CAWAC,4EAhCWN,MAAKC,iBAEPhH,KACAE,GAAoB6G,UACpBC,GAAehH,SAbgCkH,ICRxDzE,EAAc6E,KAAK7E,WAEvB,QAEQA,GAAY,QAClB,MAAMa,MACAiE,GAAQ9E,EAAYnD,YACV,SAASkI,EAAOC,MACtBC,GAAMC,SAASC,YAAY,wBAC3BC,gBAAgBL,EAAOC,EAAOpF,QAASoF,EAAOnF,WAAYmF,EAAOK,QAC9DJ,KAECpI,UAAYiI,EVL5B,GAAMvB,GAAS3G,OAAOuH,eAOhB/D,wBAMUD,6BACHmF,OACEnF,MACFlD,EAAQkD,QACDA,SAEPA,KAAOA,OACPoF,UAAY,kBAAM,QAClBC,QAAU,SAACC,SAAQA,SACnBC,SAAW,iBAAMC,GAAKrG,YACtBsG,SAAW,SAACH,QACPE,EAAKH,QAAQC,KACN,OAARA,GAAwBI,SAARJ,GACjBE,EAAKG,aAAaL,IAAQE,EAAKJ,UAAUE,SAQnC,IAAI3F,uBACO2F,kBAAqBE,EAAK3H,wBAAyB2H,EAAKzE,MAAMW,YAR3E5D,GAAW0H,EAAKrG,KAChBrB,KAAawH,MACRnG,MAAQmG,IACRM,QAAQN,EAAKxH,wBAelC+H,iBAAQ7E,UACA3E,EAAW2E,IAAazE,EAASyE,UAC5BmE,EAAE/D,KAAKJ,GAETmD,kBAOX2B,mBAAU9E,MACF+E,GAAK5B,KAAKgB,EAAEhH,QAAQ6C,SACpB+E,MAAO,QACFZ,EAAEa,OAAOD,EAAI,GAEf5B,kBAQXyB,iBAAQ7H,EAAUD,OACT,GAAImI,GAAI,EAAG/C,EAAMiB,KAAKgB,EAAEhC,OAAQ8C,EAAI/C,EAAK+C,IAAK,IAC3CC,GAAM/B,KAAKgB,EAAEc,EACb1J,GAAS2J,QACJnF,MAAMmF,GAAKtJ,KAAKuH,KAAKpD,MAAOoD,KAAMpG,EAAUD,KAE7CqG,KAAMpG,EAAUD,iBAShCuC,iBAAQ/B,SACG6F,MAAKnE,KAAK7B,QAAQG,MAAS,eAStC6H,eAAMtI,eACGA,KAAOA,EACRsG,KAAKiC,iBAAkB,SAClBC,SAAWlC,KAAKtG,MAElBsG,kBAOXmC,iBAAQC,eACCC,aAAehK,EAAS+J,GACzB9J,OAAOgK,OAAOF,GACdA,EACGpC,kBAQXuC,wBAAUL,oEACF9J,GAAS8J,SACJD,eAAgB,OAChBC,SAAWA,SAEXD,gBAAkBC,OAClBA,SAAWlC,KAAKtG,MAElBsG,kBAOX7E,kBAASC,eACAoH,UAAYpH,EACV4E,kBAQXyC,gBAAO5F,oBACC3E,GAAW2E,UACNuE,SAAW,iBAAMvE,GAAS6F,EAAK1H,SAEjCgF,kBASX2C,gBAAO9F,SACC3E,GAAW2E,UACNqE,QAAUrE,GAEZmD,kBASX4C,kBAAS/F,SACD3E,GAAW2E,UACNoE,UAAYpE,GAEdmD,kBAQXwB,sBAAaL,MACLW,GAAI,EACJjG,EAAOmE,KAAKnE,QACI,IAAhBA,EAAKmD,cACE,OAEJ8C,EAAIjG,EAAKmD,QAAQ,IAChBmC,YAAetF,GAAKiG,IACpBX,EAAIrH,aAAeqH,EAAIrH,cAAgB+B,EAAKiG,UAErC,aAIR,eAOXe,cAAKjG,QACIA,MAAQA,IACNA,EAAOoD,KAAKtG,UACVsG,KAAKoB,SAAS0B,KAAK9C,UACnBA,KAAKsB,SAASwB,KAAK9C,oBACV,IAEbtH,EAAYsH,KAAKqC,kBACZrC,KAAKtG,MAAQsG,KAAKqC,mBA2BpCpD,GAAOrD,EAAM,4BAAwBA,QACrCqD,EAAOrD,EAAM,+BAA2BA,GAAKQ,WAC7C6C,EAAOrD,EAAM,gCAA4BA,GAAKO,YAC9C8C,EAAOrD,EAAM,+BAA2BA,GAAKmH,UC5K7C,IAAaC,GAAkB,SAAC7C,0DAQxB8C,cACI3D,EAAQ+B,EAAK6B,UACb5D,IACK3G,EAAQ2G,QACAA,MAELA,EAAMV,OAAO,SAACuE,EAAKC,OAClB,GAAItE,KAAKsE,KACNtE,GAAKlD,EAAKwH,EAAatE,UAExBqE,qBAKRtD,iBAAqB,oBACjBP,YACG,gBACI,OAEd+D,GAAWhC,EAAKvH,YAAYC,kCACvB+E,MACDlD,GAAO0D,EAAMR,KACZkD,MAAMlD,GACN4C,QAAQ,SAAC9F,EAAMhC,EAAUD,SACtB0H,GAAKiC,wBAAwB1H,EAAKlC,KAAMC,EAAUC,KAErDiJ,WACCX,GAAwBtG,EAAxBsG,SAAUM,EAAc5G,EAAd4G,SACXN,IAAYmB,EAASrJ,QAAQ8E,MAAO,MAChCyD,cACMzD,IAEXoD,GAAYM,MACPd,QAAQ,WACLQ,KACab,EAAKpI,KAAMiJ,EAAUb,EAAKzF,EAAKlC,OAE5C8I,KACSnB,EAAKpI,KAAMuJ,UAlB/B,GAAI1D,KAAKQ,KAALR,sCA8BbsB,yCACUA,gCACFd,GAAQU,KAAKkD,eACZ,GAAIpE,KAAKQ,GAAO,IACb1D,GAAO0D,EAAMR,GACXoD,EAAmBtG,EAAnBsG,SAAUxI,EAASkC,EAATlC,IACZwI,KACIxJ,EAAYsH,KAAKtG,IACbsG,KAAK/G,KAAKsK,aAAarB,UAClBxI,GAAQqC,EAASH,EAAMoE,KAAK/G,KAAKgC,aAAaiH,OAG1ClC,KAAK/G,KAAMiJ,EAAUlC,KAAKtG,mBAevD4G,kCAAyB7D,EAAM+G,EAAQC,eAC7BnD,mCAAyB7D,EAAM+G,EAAQC,MACzCnE,GAAQU,KAAKkD,eACZ,GAAIpE,KAAKQ,GAAO,IACb1D,GAAO0D,EAAMR,MACblD,EAAKsG,WAAazF,mBACbb,EAAKlC,MAAQqC,EAASH,EAAM6H,kBAgB7CH,iDAWAI,yBAAgBC,EAAU9G,SACfmD,MAAKkD,WAAWS,GAAUjC,QAAQ7E,gBAW7C+G,2BAAkBD,EAAU9G,QACnBqG,WAAWS,GAAUhC,UAAU9E,OApIiBsD,IU3EvD0D,GAAaC,QAAQvL,UAEdwL,GAAUF,GAAWE,SAC9BF,GAAWG,oBACXH,GAAWI,mBACXJ,GAAWK,kBACXL,GAAWM,sBTDTC,GAAiB,gBA0CVC,GAAc,SAAClE,8GAOxBC,oDACUA,gCAEFpD,GAASgD,KAAKhD,sBACT8B,MACDjC,GAAWzE,EAAS4E,EAAO8B,IAC3B4D,EAAK1F,EAAO8B,IACZ9B,EAAO8B,OACP5G,EAAW2E,QAcL,IAAIrB,WAAU,kCAbhB0C,GAAOY,EAAEwF,MAAMF,IACfhJ,EAAS8C,EAAK,GACdqG,GAAYrG,EAAK,IAAM,IAAIsG,UAC3BD,IACKE,SAASrJ,EAAQmJ,EAAU1H,OAC7B,IACC6H,GAAe,SAACjE,KACPhI,OAAWgI,QAEnBxH,KAAK0L,iBAAiBvJ,EAAQsJ,OAChBtJ,EAAQsJ,SAflC,GAAI5F,KAAK9B,KAAL8B,gBA4BbuB,uDACUA,mCACFrD,GAASgD,KAAKjD,kBACT+B,KACEA,GAAGW,QAAQ,SAAC5C,SAAa+H,GAAK3L,KAAK4L,oBAAoB/F,EAAGjC,UADhE,GAAIiC,KAAK9B,KAAL8B,gBAcb2F,kBAASrJ,EAAQmJ,EAAU1H,cACnB6H,EAAe,SAACjE,UACZqE,GAASrE,EAAMqE,OACf7L,EAAO8L,EAAK9L,KACT6L,GAAUA,IAAW7L,GACpB8K,GAAQtL,KAAKqM,EAAQP,MACZ9L,OAAWgI,EAAOqE,KAEtBA,EAAOtK,iBAGnBvB,KAAK0L,iBAAiBvJ,EAAQsJ,KACtB1E,KAAM5E,EAAQsJ,gBAc/BM,iBAAQ5J,EAAQC,MAAMC,8DAAgBC,mEAC3BJ,GAAS6E,KAAK/G,KAAMmC,EAAQC,EAAMC,EAASC,OAnFD4E,IC5CnDhC,GAAa,wBACbR,GAAkB,wCAClBK,GAAkB,QAClBb,GAAUyD,SA8FHqE,GAAa,SAAC9E,8GACvBC,4CACUA,6BACFJ,KAAKvC,OACDuC,KAAK/G,KAAKwF,WAAY,KACjBuB,KAAKtB,GAAe,IACjBF,GAAQwB,KAAKtB,GAAgBtB,EAAY4C,KAAK/G,WAC7CA,KAAKwF,WAAWnE,YAAYkE,KAE3BwB,UACP,KAAKA,KAAKlG,YAAY4E,GAAe,IACpCF,GAAQwB,KAAKlG,YAAY4E,GAAgBtB,EAAY4C,KAAK/G,QAChD+G,KAAK/G,MAAMiM,KAAK5K,YAAYkE,KAChCwB,WAGb/G,KAAKkM,UAAUC,IAAIpF,KAAKzC,QAhBmB4C,ISnE3CkF,GAAgB,SAAClF,8GAO1BC,6BACSvH,EAAQmH,KAAKsF,gBACTjG,qBAEHe,0CAQVkD,iCAAwBK,EAAUhK,EAAUC,eAClC0J,kCAAwBK,EAAUhK,EAAUC,GAC7Cf,EAAQmH,KAAKsF,gBACTjG,sBAabA,gBAAOkG,QACGA,GAAOvF,KAAKsF,SACdpN,EAAWqN,KACP9M,KAAKuH,UACN,IAAI5H,EAASmN,IACfvF,KAAK/G,KAAKwF,YAAcuB,KAAK/G,MAAMuM,UAAYD,MAC7C,KAAK1M,EAAQ0M,QACV,IAAI/J,WAAU,kCA1C2B2E,IRkBrDsF,yBAKUC,eACKA,sDACRA,WAAaA,qBAOtBC,mBAEQC,MAAU9H,MAAMrF,KAAKoN,UAAW,SAC7BjH,GAAOgH,EAAM,SAACE,EAAGC,SAAUA,GAAMD,IAAI9F,KAAK0F,kBAQ5CM,GAAM,SAACC,SAAe,IAAIR,IAAMQ,IS7DhCC,GAAMC,EAQNC,sFR2DAC,mDAQLC,cACIvG,EAAO3F,EAASC,IAAIgH,EAAK9D,IAAI,GAC7B6B,EAASW,EAAKX,gBACbnG,KAAO2H,SAAS1G,cACjBkF,EAAOmH,QAAUnH,EAAOmH,QAAUxG,EAAKxC,IAEvC6B,EAAOmH,WACFtN,KAAK8B,aAAa,KAAMgF,EAAKxC,uBAfXyI,KAAML,KACrCS,GAAOlG,eACPkG,GAAOpD,gBACPoD,GAAOnB,WACPmB,GAAO/B,YACP+B,GAAOf,gBCnELmB,GAAW,GAAIC,kBAAiB,SAACC,KACzBjH,QAAQ,SAACkH,UACPA,EAASC,UACZ,YACGD,EAASE,cACEF,EAASE,YAEpBF,EAASG,gBACAA,aAAarH,QAAQ,SAACxG,MACvBM,WAAWN,eAKtB,gBACG8N,GAAgBJ,EAASI,iBACP,OAAlBA,WAGA9N,GAAO0N,EAAS7B,UAChBrL,OACAR,EACA8N,EACAJ,EAAShN,SACTV,EAAKgC,aAAa8L,QAQlCP,IAAS9E,QAAQd,SAASoG,kBACV,aACD,WACF"}