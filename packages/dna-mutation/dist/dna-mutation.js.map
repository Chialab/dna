{"version":3,"file":"dna-mutation.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/lib/dom.js","node_modules/@dnajs/core/src/lib/reduce.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/lib/matches.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/lib/bootstrap.js","node_modules/@dnajs/core/src/lib/define.js","node_modules/@dnajs/core/src/lib/render.js","packages/dna-mutation/observer.js","node_modules/@dnajs/core/src/lib/obj-define.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/notifications.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/lib/custom-event.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/core.js","node_modules/@dnajs/core/index.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","/**\n * Wrap Symbol function.\n * @private\n *\n * @param {String} name The symbol name.\n * @return {Symbol|String} A real symbol if supported or a string key.\n */\nfunction Sym(name) {\n    if (self.Symbol) {\n        return self.Symbol(name);\n    }\n    return `__${name}`;\n}\n\n/**\n * Symbol for DNA component mixin.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const DNA_SYMBOL = Sym('dna');\n/**\n * Symbol for component instance.\n * Bound to a node.\n * @type {String}\n * @private\n */\nexport const COMPONENT_SYMBOL = Sym('component');\n/**\n * Symbol for node instance.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const NODE_SYMBOL = Sym('node');\n/**\n * Symbol for style element.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const STYLE_SYMBOL = Sym('style');\n","import { isFunction, isString } from './typeof.js';\nimport { registry } from './registry.js';\nimport { DNA_SYMBOL, COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * Retrieve a HTMLElement instance from a component instance.\n * @method getComponentNode\n * @memberof DNA.DOM\n *\n * @param {Object} elem The component instance.\n * @return {HTMLElement} The node for the component instance.\n */\nexport function getComponentNode(elem) {\n    return elem && elem.node;\n}\n/**\n * Retrieve a component instance from a HTMLElement instance.\n * @method getNodeComponent\n * @memberof DNA.DOM\n *\n * @param {HTMLElement} elem The node instance.\n * @return {Object} The component for the node instance.\n */\nexport function getNodeComponent(elem) {\n    return elem && elem[COMPONENT_SYMBOL];\n}\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            element[UPDATED].call(element, name, oldValue, newValue);\n            return true;\n        }\n    }\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {Function|String} Ctr The component constructor or tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(Ctr) {\n    if (isString(Ctr)) {\n        Ctr = registry.get(Ctr);\n    }\n    if (isFunction(Ctr)) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    if (parent !== element.parentNode || parent.lastElementChild !== element) {\n        if (element.parentNode) {\n            removeChild(element.parentNode, element);\n        }\n        parent.appendChild(element);\n        return connect(element);\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    parent.removeChild(element);\n    return disconnect(element);\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.nextSibling !== refNode) {\n        if (element.parentNode) {\n            disconnect(element);\n        }\n        parent.insertBefore(element, refNode);\n        return connect(element);\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.parentNode) {\n        disconnect(element);\n    }\n    parent.replaceChild(element, refNode);\n    disconnect(refNode);\n    return connect(element);\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.setAttribute(name, value);\n    return update(element, name, oldValue, value);\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.removeAttribute(name);\n    return update(element, name, oldValue, null);\n}\n","/**\n * Reduce an array to a single value.\n * Similar to `Array.prototype.reduce`.\n * @method reduce\n * @ignore\n *\n * @param {Array} arr The array to reduce.\n * @param {Function} callback The reducer function to fire for all value of the array.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced array.\n */\nexport function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n/**\n * Reduce an object prototype chain to a single value.\n * @method reducePrototype\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {Function} callback The reducer function to fire for all value of the prototype chain.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced prototype chain.\n */\nexport function reducePrototype(obj, callback, value) {\n    while (obj) {\n        value = callback(value, obj);\n        obj = obj.__proto__;\n    }\n    return value;\n}\n/**\n * Reduce to array of property values of a prototype chain.\n * @method reduceProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Array} A list of property values.\n */\nexport function reduceProperty(obj, key) {\n    return reducePrototype(obj, (properties, proto) => {\n        if (proto.hasOwnProperty(key)) {\n            properties.push(proto[key]);\n        }\n        return properties;\n    }, []);\n}\n/**\n * Marge an array of property values of a prototype chain.\n * @method reduceObjectProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Object} A merged list of property values.\n */\nexport function reduceObjectProperty(scope, prop) {\n    let protoProp = reduceProperty(scope, prop);\n    return reduce(protoProp, (res, proto) => {\n        for (let k in proto) {\n            if (!res.hasOwnProperty(k)) {\n                res[k] = proto[k];\n            }\n        }\n        return res;\n    }, {});\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from './custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\nimport { define } from './obj-define.js';\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n */\nexport class Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    if (this.initialized) {\n                        this.changed(val, oldValue);\n                    }\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb.call(this.scope, this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n        this.initialized = true;\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Function|Array} ctrs A single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { define } from '../lib/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isFalsy, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop, Property } from '../lib/property.js';\nimport { notifications } from '../lib/notifications.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = reduceObjectProperty(this, 'properties');\n        for (let k in props) {\n            if (!(props[k] instanceof Property)) {\n                props[k] = prop(props[k]);\n            }\n        }\n        define(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (isUndefined(this[name])) {\n                if (this.node.hasAttribute(attrName || name)) {\n                    this[name] = getValue(prop, this.node.getAttribute(attrName || name));\n                } else if (!isUndefined(this.node[name])) {\n                    this[name] = this.node[name];\n                }\n            } else if (attrName) {\n                setAttribute(this.node, attrName, this[name]);\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback(propName, oldVal, newVal) {\n        notifications.trigger('updated', this, propName, oldVal, newVal);\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","/**\n * Alias to Element prototype.\n * @type {Object}\n * @private\n */\nconst ELEM_PROTO = Element.prototype;\n\n/**\n * Alias to `Element.prototype.matches`.\n * @type {Function}\n * @private\n */\nconst MATCHES_SELECTOR = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n\n/**\n * Polyfill for `Element.matches API`.\n * @private\n *\n * @param {HTMLElement} target The node to check.\n * @param {String} selector The selector to match.\n * @return {Boolean} The target matches the selector.\n */\nexport function matches(target, selector) {\n    return MATCHES_SELECTOR.call(target, selector);\n}\n","import { define } from '../lib/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../lib/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\n/**\n * Check if an event has a selector in mathc in target list.\n * @private\n *\n * @param {Event} event The event to check.\n * @param {HTMLElement} node The root node.\n * @param {String} selector The CSS selector to match.\n * @return {HTMLElement} The element in target list which matches the selector.\n */\nfunction checkDelegate(event, node, selector) {\n    if (!selector) {\n        return node;\n    }\n    let target = event.target;\n    while (target && target !== node) {\n        if (matches(target, selector)) {\n            return target;\n        }\n        target = target.parentNode;\n    }\n    return null;\n}\n/**\n * Generate a delegate listener for an event.\n * @private\n *\n * @param {String} selector The CSS selector to match.\n * @param {Function} callback The original callback for the event.\n * @return {Function} Wrapped callback with a delegation check.\n */\nfunction delegateCallback(selector, callback) {\n    return (ev) => {\n        let target = checkDelegate(ev, this.node, selector);\n        if (target) {\n            callback.call(this, ev, target);\n        }\n    };\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        let events = reduceObjectProperty(this, 'events');\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let selector = k.split(' ').slice(1).join(' ').trim();\n                events[k] = delegateCallback.call(this, selector, callback);\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n        define(this, 'events', { value: events });\n    }\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events;\n        for (let k in events) {\n            let evName = k.split(' ').shift();\n            this.node.addEventListener(evName, events[k]);\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        let events = this.events;\n        for (let k in events) {\n            let evName = k.split(' ').shift();\n            this.node.removeEventListener(evName, events[k]);\n        }\n        super.disconnectedCallback();\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = delegateCallback.call(this, selector, callback);\n        this.node.addEventListener(evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this.node, evName, data, bubbles, cancelable);\n    }\n};\n","import { define } from '../lib/obj-define.js';\nimport { reduceProperty } from '../lib/reduce.js';\nimport { isString } from '../lib/typeof.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * A regex to match css `:host` selector.\n * @type {RegExp}\n * @private\n */\nconst HOST_REGEX = /(\\:host)(\\([^)]*\\))?/g;\n/**\n * A regex to match css blocks.\n * @type {RegExp}\n * @private\n */\nconst CSS_BLOCKS = /(#|\\.|\\@|\\[|[a-zA-Z]|\\:)([^{\\;\\}]*)({({(.|\\n)*?}|.|\\n)*?})/g;\n/**\n * A regex to match css rules in block.\n * @type {RegExp}\n * @private\n */\nconst CSS_RULES = /[^{]*{/;\n/**\n * A regex to split css rules.\n * @type {RegExp}\n * @private\n */\nconst SEPARATOR_REGEX = /\\,\\s*/;\n/**\n * The root document element.\n * @type {DocumentFragment}\n * @private\n */\nconst ROOT_DOC = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || ROOT_DOC;\n}\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {Object} component A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(component) {\n    let styleElem = ownerDocument(component.node).createElement('style');\n    styleElem.id = `style-${component.is}`;\n    return styleElem;\n}\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nfunction convertShadowCSS(css, is) {\n    const scope = `.${is}`;\n    return css\n        // split blocks\n        .replace(CSS_BLOCKS, (fullMatch) =>\n            fullMatch\n                // get rules\n                .replace(CSS_RULES, (chunk) => {\n                    if (chunk[0] === '@') {\n                        return chunk;\n                    }\n                    // split rules\n                    return chunk.split(SEPARATOR_REGEX)\n                        .map((rule) => {\n                            if (rule.indexOf(':host') === 0) {\n                                return rule.replace(HOST_REGEX, (fullMatch, host, state) => {\n                                    state = state ? state.slice(1, -1) : '';\n                                    return `${scope}${state}`;\n                                });\n                            } else {\n                                return `${scope} ${rule}`;\n                            }\n                        })\n                        .join(', ');\n                })\n        );\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Inherit all css properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let css = reduceProperty(this, 'css')\n            .filter((protoCSS) => isString(protoCSS))\n            .join('\\n');\n        if (css) {\n            define(this, 'css', { value: css });\n        }\n    }\n    /**\n     * Create or update a style element for a component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (isString(this.css)) {\n            if (this.node.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this);\n                    this.node.shadowRoot.appendChild(style);\n                    style.textContent = this.css;\n                }\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this);\n                ownerDocument(this.node).head.appendChild(style);\n                style.textContent = convertShadowCSS(this.css, this.is);\n            }\n        }\n        this.node.classList.add(this.is);\n    }\n};\n","import { registry } from './registry.js';\nimport { connect } from './dom.js';\n\n/**\n * Instantiate all defined components in a DOM tree.\n * @param {HTMLElement} root The root Node of the tree.\n */\nexport function bootstrap(root) {\n    for (let k in registry.components) {\n        let Component = registry.get(k);\n        let elements = root.querySelectorAll(k);\n        for (let i = 0, len = elements.length; i < len; i++) {\n            let component = new Component();\n            component.node = elements[i];\n            connect(component);\n        }\n    }\n}\n","import { registry } from './registry.js';\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\n","import { appendChild } from './dom.js';\n\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    appendChild(node, element);\n    return element;\n}\n","import { registry, DOM } from '@dnajs/core';\n\nfunction onCreation(nodes) {\n    [].forEach.call(nodes, (node) => {\n        if (!DOM.getNodeComponent(node)) {\n            let Ctr = registry.get(node.getAttribute('is') || node.tagName);\n            if (Ctr) {\n                let elem = new Ctr();\n                elem.node = node;\n                DOM.connect(elem);\n            }\n        } else {\n            DOM.connect(node);\n        }\n        if (node.children) {\n            onCreation(node.children);\n        }\n    });\n}\n\nconst OBSERVER = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n        switch (mutation.type) {\n        case 'childList': {\n            if (mutation.addedNodes) {\n                onCreation(mutation.addedNodes);\n            }\n            if (mutation.removedNodes) {\n                mutation.removedNodes.forEach((node) => {\n                    DOM.disconnect(node);\n                });\n            }\n            break;\n        }\n        case 'attributes': {\n            let attributeName = mutation.attributeName;\n            if (attributeName === 'is') {\n                break;\n            }\n            let node = mutation.target;\n            DOM.update(\n                node,\n                attributeName,\n                mutation.oldValue,\n                node.getAttribute(attributeName)\n            );\n            break;\n        }\n        }\n    });\n});\n\nOBSERVER.observe(document.body, {\n    attributes: true,\n    childList: true,\n    subtree: true,\n});\n","/**\n * A shortande to `Object.defineProperty` method.\n * @ignore\n */\nexport const define = Object.defineProperty;\n","import { define } from './obj-define.js';\nconst sym = 'components';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace DNA.registry\n * @memberof DNA\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @memberof DNA.registry\n     * @type {Object}\n     * @private\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        define(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","import { isArray, isFunction } from './typeof.js';\n\n/**\n * Notifications handler for DNA components.\n * @namespace DNA.notifications\n * @memberof DNA\n */\nexport const notifications = {\n    /**\n     * A list of callbacks for component creation.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    created: [],\n    /**\n     * A list of callbacks for component connection.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    connected: [],\n    /**\n     * A list of callbacks for component disconnection.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    disconnected: [],\n    /**\n     * A list of callbacks for component update.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    updated: [],\n    /**\n     * Attach a callback for a notifications.\n     * @method on\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name.\n     * @param {Function} callback The callback to trigger.\n     */\n    on(notification, callback) {\n        if (isArray(this[notification]) && isFunction(callback)) {\n            this[notification].push(callback);\n        }\n    },\n    /**\n     * Remove a callback for a notifications.\n     * @method off\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name.\n     * @param {Function} callback The callback to remove.\n     */\n    off(notification, callback) {\n        if (isArray(this[notification]) && isFunction(callback)) {\n            let io = this[notification].indexOf(callback);\n            if (io !== -1) {\n                this[notification].splice(io);\n            }\n        }\n    },\n    /**\n     * Trigger a list of callbacks.\n     * @method trigger\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name to trigger.\n     * @param {Object} elem The component scope.\n     * @param {*} ...args All the arguments to pass to the callback.\n     */\n    trigger(notification, elem, ...args) {\n        if (isArray(this[notification])) {\n            this[notification].forEach((clb) => clb.call(null, elem, ...args));\n        }\n    },\n};\n","import { DNA_SYMBOL, COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\nimport { notifications } from '../lib/notifications.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @private\n     */\n    get [DNA_SYMBOL]() {\n        return true;\n    }\n    /**\n     * @property {HTMLElement} node Get component node reference.\n     * @name node\n     * @type {HTMLElement}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get node() {\n        return this[NODE_SYMBOL];\n    }\n    set node(node) {\n        node[COMPONENT_SYMBOL] = this;\n        this[NODE_SYMBOL] = node;\n    }\n    /**\n     * Fires on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        notifications.trigger('created', this);\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n        notifications.trigger('connected', this);\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        notifications.trigger('disconnected', this);\n    }\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","/**\n * Alias to native `CustomEvent`.\n * @type {Function}\n * @private\n */\nlet CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    /**\n     * Polyfill `CustomEvent`.\n     * @type {Function}\n     * @private\n     */\n    CustomEvent = function(ev, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\n/** Polyfill for CustomEvent constructor. */\nexport { CustomEvent };\n","import { isFunction, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|*} tpl A template to use instead of `this.template`.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            return tpl.call(this);\n        }\n        (this.node.shadowRoot || this.node).innerHTML = tpl;\n    }\n};\n","import { reduce } from './reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @author Justin Fagnani (https://github.com/justinfagnani)\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extends superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DNA.DOM\n * @memberof DNA\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace DNA.MIXINS\n * @memberof DNA\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport * from './lib/notifications.js';\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, MIXINS } from './src/core.js';\nimport { registry } from './src/lib/registry.js';\n\n/**\n * @namespace DNA\n */\nexport * from './src/core.js';\nexport { registry };\nexport { bootstrap } from './src/lib/bootstrap.js';\nexport { define } from './src/lib/define.js';\nexport { render } from './src/lib/render.js';\n\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @memberof DNA.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n * ```\n */\nexport class BaseComponent extends mix().with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {\n    constructor(node) {\n        super();\n        if (!node) {\n            let desc = registry.get(this.is, true);\n            let config = desc.config;\n            node = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            if (config.extends) {\n                node.setAttribute('is', desc.is);\n            }\n        }\n        this.node = node;\n    }\n}\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","Sym","name","self","Symbol","getComponentNode","elem","node","getNodeComponent","COMPONENT_SYMBOL","connect","element","DNA_SYMBOL","CONNECTED","disconnect","DISCONNECTED","update","oldValue","newValue","attrs","constructor","observedAttributes","indexOf","UPDATED","createElement","Ctr","registry","get","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","getAttribute","removeAttribute","reduce","arr","callback","k","len","length","reducePrototype","__proto__","reduceProperty","key","properties","proto","hasOwnProperty","push","reduceObjectProperty","scope","prop","protoProp","res","dispatch","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","matches","target","selector","MATCHES_SELECTOR","checkDelegate","event","delegateCallback","_this","ownerDocument","ROOT_DOC","createStyle","component","styleElem","id","is","convertShadowCSS","css","replace","CSS_BLOCKS","fullMatch","CSS_RULES","chunk","split","SEPARATOR_REGEX","map","rule","HOST_REGEX","host","state","slice","join","bootstrap","root","components","Component","elements","querySelectorAll","i","define","tagName","config","render","props","onCreation","nodes","forEach","DOM","children","defineProperty","sym","toLowerCase","full","desc","this","NODE_SYMBOL","STYLE_SYMBOL","notifications","notification","io","splice","args","clb","ComponentMixin","SuperClass","_SuperClass","trigger","connectedCallback","disconnectedCallback","attributeChangedCallback","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","val","getterFn","setterFn","undefined","validateType","initialized","changed","observe","unobserve","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","bind","Number","PropertiesMixin","observed","propertyChangedCallback","hasAttribute","oldVal","newVal","propName","observeProperty","unobserveProperty","ELEM_PROTO","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","EventsMixin","events","trim","shift","addEventListener","removeEventListener","delegate","wrapCallback","StyleMixin","filter","protoCSS","shadowRoot","style","textContent","head","classList","add","TemplateMixin","template","tpl","innerHTML","Mixin","superclass","with","arguments","c","mixin","mix","superClass","DOM_HELPERS","MIXINS","BaseComponent","_mix$with","extends","OBSERVER","MutationObserver","mutations","mutation","type","addedNodes","removedNodes","attributeName","body"],"mappings":"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"}