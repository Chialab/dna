{"version":3,"file":"dna-mutation.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/lib/dom.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/polyfills/custom-event.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/polyfills/matches.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/lib/style.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/polyfills/reduce.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/lib/shim.js","node_modules/@dnajs/core/src/core.js","node_modules/@dnajs/core/index.js","packages/dna-mutation/observer.js","packages/dna-mutation/index.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n","import { isFunction, isString } from './typeof.js';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace registry\n * @memberof! DNA.\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @type {Object}\n     */\n    components: {},\n    /**\n     * Register a new component.\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        this.components[name.toLowerCase()] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component descriptor by id.\n     * @private\n     * @param {String} name The component id.\n     * @return {Object} The component descriptor.\n     */\n    getDescriptor(name) {\n        if (isString(name)) {\n            return this.components[name.toLowerCase()];\n        } else if (isFunction(name)) {\n            for (let k in this.components) {\n                let desc = this.components[k];\n                if (desc.Ctr === name) {\n                    return desc;\n                }\n            }\n        }\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @param {String} name The component id.\n     * @return {Function} The component constructor.\n     */\n    get(name) {\n        let desc = this.getDescriptor(name);\n        if (desc) {\n            return desc.Ctr;\n        }\n    },\n};\n","export const COMPONENT_SYMBOL = '__component';\n","import { isFunction } from './typeof.js';\nimport { registry } from './registry.js';\nimport { COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * Retrieve a component constructor from an Element or from a tag name.\n * @method getComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component|String} element The element or the tag name.\n * @param {Boolean} full Retrieve full component information.\n * @return {Function} The component constructor for the given param.\n */\nexport function getComponent(element, full = false) {\n    if (element.node) {\n        element = element.node;\n    }\n    if (element.nodeType === Node.ELEMENT_NODE) {\n        element = element.getAttribute('is') || element.tagName;\n    }\n    return full ? registry.getDescriptor(element) : registry.get(element);\n}\n/**\n * Check if a node is an instance of a component.\n * @method isComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to check.\n * @return {Boolean}\n */\nexport function isComponent(element) {\n    let Ctr = getComponent(element);\n    return Ctr && (element instanceof Ctr);\n}\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    if (isComponent(element)) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    if (isComponent(element)) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    if (isComponent(element)) {\n        element[UPDATED].call(element, name, oldValue, newValue);\n        return true;\n    }\n}\n/**\n * Attach a component prototype to an already instantiated HTMLElement.\n * @method bind\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} node The node to update.\n * @param {Function} Ctr The component class to use (leave empty for auto detect).\n * @return {Boolean} The prototype has been attached.\n */\nexport function bind(node, Ctr) {\n    if (!isFunction(Ctr)) {\n        Ctr = getComponent(node);\n    }\n    if (isFunction(Ctr)) {\n        node.__proto__ = Ctr.prototype;\n        Object.defineProperty(node, 'constructor', {\n            value: Ctr,\n            configurable: true,\n            writable: true,\n        });\n        Ctr.call(node);\n        return true;\n    }\n    return false;\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {String} is The component tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(is) {\n    let Ctr = getComponent(is);\n    if (Ctr) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    if (element.node) {\n        let node = element.node;\n        if (parent !== node.parentNode || parent.lastElementChild !== node) {\n            if (node.parentNode) {\n                removeChild(node.parentNode, element);\n            }\n            parent.appendChild(node);\n            return connect(element);\n        }\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    if (element.node) {\n        parent.removeChild(element.node);\n        return disconnect(element);\n    }\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        if (node.nextSibling !== refNode) {\n            if (node.parentNode) {\n                disconnect(element);\n            }\n            parent.insertBefore(node, refNode);\n            return connect(element);\n        }\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        if (node.parentNode) {\n            disconnect(element);\n        }\n        parent.replaceChild(node, refNode);\n        if (refNode[COMPONENT_SYMBOL]) {\n            disconnect(refNode[COMPONENT_SYMBOL]);\n        }\n        return connect(node);\n    }\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.setAttribute(name, value);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, value);\n        }\n    }\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.removeAttribute(name);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, null);\n        }\n    }\n}\n","import { COMPONENT_SYMBOL } from '../lib/symbols.js';\n\n/**\n * THe base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @property {String} is Get component id.\n     * @name is\n     * @type {String}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get is() {\n        return (this.getAttribute('is') || this.localName).toLowerCase();\n    }\n    get node() {\n        return this;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","let CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    let ev = new self.CustomEvent('test');\n    CustomEvent = self.CustomEvent;\n} catch(ex) {\n    CustomEvent = function(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined,\n        };\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\nexport { CustomEvent };\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\n/**\n * Shortcut to `Object.defineProperty`.\n * @type {Function}\n * @private\n */\nconst define = Object.defineProperty;\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n * @private\n */\nclass Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    this.changed(val, oldValue);\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Property|Function|Array} ctrs A Property to clone or a single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k).init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.node.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.node.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this.node, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.matchesSelector ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach and delegate events to the component.\n     * @method constructor\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    this.node.addEventListener(evName, (ev) => {\n                        callback.call(this, ev, this);\n                    });\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire when the event fires.\n     */\n    delegate(evName, selector, callback) {\n        this.node.addEventListener(evName, (event) => {\n            let target = event.target;\n            while (target && target !== this) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        });\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","const rootDoc = document;\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nexport function createStyle(node) {\n    let doc = node.ownerDocument || rootDoc;\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${node.is}`);\n    let head = doc.head;\n    /* istanbul ignore else */\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n","import { isString } from '../lib/typeof.js';\nimport { createStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.constructor.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr, 'styleElem', {\n                value: createStyle(this),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.node.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (isString(style)) {\n            this.constructor.styleElem.textContent = style;\n        }\n    }\n};\n","import { isUndefined, isFunction, isString } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    get autoRender() {\n        return true;\n    }\n    /**\n     * Attach properties observers in order to update children.\n     * @method constructor\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        if (this.autoRender && !isUndefined(this.template)) {\n            let props = this.properties;\n            if (props) {\n                let callback = () => {\n                    this.render();\n                };\n                for (let k in props) {\n                    props[k].observe(callback);\n                }\n            }\n        }\n    }\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (!isUndefined(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        /* istanbul ignore else */\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            this.node.innerHTML = tpl;\n        } else {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","/* eslint-disable prefer-rest-params */\nexport const reduce = Array.prototype.reduce || function(callback /*, initialValue*/ ) {\n    'use strict';\n    let t = this;\n    let len = t.length;\n    let k = 0;\n    let value;\n    if (arguments.length === 2) {\n        value = arguments[1];\n    } else {\n        while (k < len && !(k in t)) {\n            k++;\n        }\n        value = t[k++];\n    }\n    for (; k < len; k++) {\n        if (k in t) {\n            value = callback(value, t[k], k, t);\n        }\n    }\n    return value;\n};\n","/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nimport { reduce } from '../polyfills/reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extend superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce.call(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import { registry } from './registry.js';\nimport { isString } from './typeof.js';\n\n/**\n * Check if a node is already instantiated HTMLElement for programmatically `constructor` calls.\n * @private\n * @param {HTMLElement} node The node to check.\n * @return {Boolean} The node should be instantiated.\n */\nfunction isNew(node) {\n    try {\n        return !isString(node.outerHTML);\n    } catch (ex) {\n        return true;\n    }\n}\n\n/**\n * Shim original Element constructors in order to be used with `new`.\n * @method shim\n * @memberof! DNA.\n * @static\n *\n * @param {Function} Original The original constructor to shim.\n * @return {Function} The shimmed constructor.\n *\n * @example\n * ```js\n * // shim audio element\n * import { shim } from '@dnajs/core';\n *\n * class MyAudio extends shim(HTMLAudioElement) {\n *     ...\n * }\n *\n * let audio = new MyAudio();\n * ```\n */\nexport function shim(Original) {\n    class Polyfilled {\n        constructor() {\n            if (!isNew(this)) {\n                return this;\n            }\n            let desc = registry.getDescriptor(this.constructor);\n            let config = desc.config;\n            // Find the tagname of the constructor and create a new element with it\n            let element = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            element.__proto__ = desc.Ctr.prototype;\n            if (config.extends) {\n                element.setAttribute('is', desc.is);\n            }\n            return element;\n        }\n    }\n    // Clone the prototype overriding the constructor.\n    Polyfilled.prototype = Object.create(Original.prototype, {\n        constructor: {\n            value: Polyfilled,\n            configurable: true,\n            writable: true,\n        },\n    });\n    return Polyfilled;\n}\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DOM\n * @memberof! DNA.\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace MIXINS\n * @memberof! DNA.\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport { shim } from './lib/shim.js';\nexport * from './lib/symbols.js';\nexport * from './lib/typeof.js';\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, prop, shim, DOM, MIXINS } from './src/core.js';\nimport { registry } from './src/lib/registry.js';\n\n/**\n * @namespace DNA\n */\nexport { mix, prop, shim, DOM, MIXINS };\nexport { registry };\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    DOM.appendChild(node, element);\n    return element;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n * @memberof DNA.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n * ```\n */\nexport class BaseComponent extends mix(\n    shim(self.HTMLElement)\n).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {}\n","import { DOM } from '@dnajs/core';\n\nfunction onCreation(nodes) {\n    [].forEach.call(nodes, (node) => {\n        if (!node.is) {\n            if(DOM.bind(node)) {\n                DOM.connect(node);\n            }\n        } else {\n            DOM.connect(node);\n        }\n        if (node.children) {\n            onCreation(node.children);\n        }\n    });\n}\n\nconst OBSERVER = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n        switch (mutation.type) {\n        case 'childList': {\n            if (mutation.addedNodes) {\n                onCreation(mutation.addedNodes);\n            }\n            if (mutation.removedNodes) {\n                mutation.removedNodes.forEach((node) => {\n                    DOM.disconnect(node);\n                });\n            }\n            break;\n        }\n        case 'attributes': {\n            let attributeName = mutation.attributeName;\n            if (attributeName === 'is') {\n                break;\n            }\n            let node = mutation.target;\n            DOM.update(\n                node,\n                attributeName,\n                mutation.oldValue,\n                node.getAttribute(attributeName)\n            );\n            break;\n        }\n        }\n    });\n});\n\nOBSERVER.observe(document.body, {\n    attributes: true,\n    childList: true,\n    subtree: true,\n});\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with MutationObserver API.\n */\nimport './observer.js';\nexport * from '@dnajs/core';\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","registry","name","Ctr","config","components","toLowerCase","k","desc","getDescriptor","COMPONENT_SYMBOL","CONNECTED","DISCONNECTED","UPDATED","getComponent","element","full","node","nodeType","Node","ELEMENT_NODE","getAttribute","tagName","get","isComponent","connect","disconnect","update","oldValue","newValue","bind","__proto__","defineProperty","createElement","is","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","attrs","constructor","observedAttributes","indexOf","removeAttribute","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","localName","CustomEvent","ev","self","ex","event","params","undefined","evt","document","createEvent","initCustomEvent","bubbles","cancelable","detail","dispatch","evName","data","TypeError","dispatchEvent","define","Property","ctrs","_","validator","_setter","val","getterFn","setterFn","validateType","changed","scope","observe","callback","push","unobserve","io","splice","i","len","length","clb","accepts","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","setter","validate","init","prop","String","Boolean","Number","getValue","property","attrVal","JSON","parse","context","attr","currentAttrValue","PropertiesMixin","props","properties","reduce","res","partialProps","observed","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","events","rule","match","selector","trim","delegate","addEventListener","target","trigger","rootDoc","createStyle","doc","ownerDocument","styleElem","type","head","firstElementChild","StyleMixin","updateCSS","classList","add","style","css","textContent","TemplateMixin","autoRender","template","render","tpl","innerHTML","t","arguments","Mixin","superclass","with","args","slice","c","mixin","mix","superClass","isNew","outerHTML","shim","Original","Polyfilled","extends","create","DOM","DOM_HELPERS","MIXINS","Component","BaseComponent","HTMLElement","onCreation","nodes","forEach","children","OBSERVER","MutationObserver","mutations","mutation","addedNodes","removedNodes","attributeName","body"],"mappings":";;;;;;AAAA;;;;;;;;;AASA,AAAO,SAASA,UAAT,CAAoBC,GAApB,EAAyB;SACrB,OAAOA,GAAP,KAAe,UAAtB;;;;;;;;;;;AAWJ,AAAO,SAASC,QAAT,CAAkBD,GAAlB,EAAuB;SACnB,OAAOA,GAAP,KAAe,QAAtB;;;;;;;;;;;AAWJ,AAAO,SAASE,QAAT,CAAkBF,GAAlB,EAAuB;SACnBG,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,GAA/B,MAAwC,iBAA/C;;;;;;;;;;;AAWJ,AAAO,SAASO,WAAT,CAAqBP,GAArB,EAA0B;SACtB,OAAOA,GAAP,KAAe,WAAtB;;;;;;;;;;;AAWJ,AAAO,SAASQ,OAAT,CAAiBR,GAAjB,EAAsB;SAClBS,MAAMD,OAAN,CAAcR,GAAd,CAAP;;;ACxDJ;;;;;;;;AAQA,AAAO,IAAMU,WAAW;;;;;gBAKR,EALQ;;;;;;;UAAA,kBAYbC,IAZa,EAYPC,GAZO,EAYW;YAAbC,MAAa,uEAAJ,EAAI;;aACtBC,UAAL,CAAgBH,KAAKI,WAAL,EAAhB,IAAsC;gBAC9BJ,IAD8B;oBAAA;;SAAtC;KAbgB;;;;;;;;iBAAA,yBAyBNA,IAzBM,EAyBA;YACZV,SAASU,IAAT,CAAJ,EAAoB;mBACT,KAAKG,UAAL,CAAgBH,KAAKI,WAAL,EAAhB,CAAP;SADJ,MAEO,IAAIhB,WAAWY,IAAX,CAAJ,EAAsB;iBACpB,IAAIK,CAAT,IAAc,KAAKF,UAAnB,EAA+B;oBACvBG,OAAO,KAAKH,UAAL,CAAgBE,CAAhB,CAAX;oBACIC,KAAKL,GAAL,KAAaD,IAAjB,EAAuB;2BACZM,IAAP;;;;KAhCI;;;;;;;OAAA,eA0ChBN,IA1CgB,EA0CV;YACFM,OAAO,KAAKC,aAAL,CAAmBP,IAAnB,CAAX;YACIM,IAAJ,EAAU;mBACCA,KAAKL,GAAZ;;;CA7CL;;ACVA,IAAMO,mBAAmB,aAAzB;;ACIP;;;;;;;AAOA,IAAMC,YAAY,mBAAlB;;;;;;;;AAQA,IAAMC,eAAe,sBAArB;;;;;;;;AAQA,IAAMC,UAAU,0BAAhB;;;;;;;;;;;AAWA,AAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA6C;QAAdC,IAAc,uEAAP,KAAO;;QAC5CD,QAAQE,IAAZ,EAAkB;kBACJF,QAAQE,IAAlB;;QAEAF,QAAQG,QAAR,KAAqBC,KAAKC,YAA9B,EAA4C;kBAC9BL,QAAQM,YAAR,CAAqB,IAArB,KAA8BN,QAAQO,OAAhD;;WAEGN,OAAOf,SAASQ,aAAT,CAAuBM,OAAvB,CAAP,GAAyCd,SAASsB,GAAT,CAAaR,OAAb,CAAhD;;;;;;;;;;;AAWJ,AAAO,SAASS,WAAT,CAAqBT,OAArB,EAA8B;QAC7BZ,MAAMW,aAAaC,OAAb,CAAV;WACOZ,OAAQY,mBAAmBZ,GAAlC;;;;;;;;;;;AAWJ,AAAO,SAASsB,OAAT,CAAiBV,OAAjB,EAA0B;QACzBS,YAAYT,OAAZ,CAAJ,EAA0B;gBACdJ,SAAR,EAAmBd,IAAnB,CAAwBkB,OAAxB;eACO,IAAP;;;;;;;;;;;;AAYR,AAAO,SAASW,UAAT,CAAoBX,OAApB,EAA6B;QAC5BS,YAAYT,OAAZ,CAAJ,EAA0B;gBACdH,YAAR,EAAsBf,IAAtB,CAA2BkB,OAA3B;eACO,IAAP;;;;;;;;;;;;AAYR,AAAO,SAASY,MAAT,CAAgBZ,OAAhB,EAAyBb,IAAzB,EAA+B0B,QAA/B,EAAyCC,QAAzC,EAAmD;QAClDL,YAAYT,OAAZ,CAAJ,EAA0B;gBACdF,OAAR,EAAiBhB,IAAjB,CAAsBkB,OAAtB,EAA+Bb,IAA/B,EAAqC0B,QAArC,EAA+CC,QAA/C;eACO,IAAP;;;;;;;;;;;;;AAaR,AAAO,SAASC,IAAT,CAAcb,IAAd,EAAoBd,GAApB,EAAyB;QACxB,CAACb,WAAWa,GAAX,CAAL,EAAsB;cACZW,aAAaG,IAAb,CAAN;;QAEA3B,WAAWa,GAAX,CAAJ,EAAqB;aACZ4B,SAAL,GAAiB5B,IAAIR,SAArB;eACOqC,cAAP,CAAsBf,IAAtB,EAA4B,aAA5B,EAA2C;mBAChCd,GADgC;0BAEzB,IAFyB;sBAG7B;SAHd;YAKIN,IAAJ,CAASoB,IAAT;eACO,IAAP;;WAEG,KAAP;;;;;;;;;;;AAWJ,AAAO,SAASgB,aAAT,CAAuBC,EAAvB,EAA2B;QAC1B/B,MAAMW,aAAaoB,EAAb,CAAV;QACI/B,GAAJ,EAAS;eACE,IAAIA,GAAJ,EAAP;;;;;;;;;;;;;;;AAeR,AAAO,SAASgC,WAAT,CAAqBC,MAArB,EAA6BrB,OAA7B,EAAsC;QACrCA,QAAQE,IAAZ,EAAkB;YACVA,OAAOF,QAAQE,IAAnB;YACImB,WAAWnB,KAAKoB,UAAhB,IAA8BD,OAAOE,gBAAP,KAA4BrB,IAA9D,EAAoE;gBAC5DA,KAAKoB,UAAT,EAAqB;4BACLpB,KAAKoB,UAAjB,EAA6BtB,OAA7B;;mBAEGoB,WAAP,CAAmBlB,IAAnB;mBACOQ,QAAQV,OAAR,CAAP;;;WAGD,KAAP;;;;;;;;;;;;AAYJ,AAAO,SAASwB,WAAT,CAAqBH,MAArB,EAA6BrB,OAA7B,EAAsC;QACrCA,QAAQE,IAAZ,EAAkB;eACPsB,WAAP,CAAmBxB,QAAQE,IAA3B;eACOS,WAAWX,OAAX,CAAP;;;;;;;;;;;;;;;;AAgBR,AAAO,SAASyB,YAAT,CAAsBJ,MAAtB,EAA8BrB,OAA9B,EAAuC0B,OAAvC,EAAgD;QAC/C1B,QAAQE,IAAZ,EAAkB;YACVA,OAAOF,QAAQE,IAAnB;YACIA,KAAKyB,WAAL,KAAqBD,OAAzB,EAAkC;gBAC1BxB,KAAKoB,UAAT,EAAqB;2BACNtB,OAAX;;mBAEGyB,YAAP,CAAoBvB,IAApB,EAA0BwB,OAA1B;mBACOhB,QAAQV,OAAR,CAAP;;;;;;;;;;;;;;;;;;AAkBZ,AAAO,SAAS4B,YAAT,CAAsBP,MAAtB,EAA8BrB,OAA9B,EAAuC0B,OAAvC,EAAgD;QAC/C1B,QAAQE,IAAZ,EAAkB;YACVA,OAAOF,QAAQE,IAAnB;YACIA,KAAKoB,UAAT,EAAqB;uBACNtB,OAAX;;eAEG4B,YAAP,CAAoB1B,IAApB,EAA0BwB,OAA1B;YACIA,QAAQ/B,gBAAR,CAAJ,EAA+B;uBAChB+B,QAAQ/B,gBAAR,CAAX;;eAEGe,QAAQR,IAAR,CAAP;;;;;;;;;;;;;;AAcR,AAAO,SAAS2B,YAAT,CAAsB7B,OAAtB,EAA+Bb,IAA/B,EAAqC2C,KAArC,EAA4C;QAC3C9B,QAAQE,IAAZ,EAAkB;YACVA,OAAOF,QAAQE,IAAnB;YACIW,WAAWX,KAAKI,YAAL,CAAkBnB,IAAlB,CAAf;aACK0C,YAAL,CAAkB1C,IAAlB,EAAwB2C,KAAxB;YACIC,QAAQ/B,QAAQgC,WAAR,CAAoBC,kBAApB,IAA0C,EAAtD;YACIF,MAAMG,OAAN,CAAc/C,IAAd,MAAwB,CAAC,CAA7B,EAAgC;mBACrByB,OAAOZ,OAAP,EAAgBb,IAAhB,EAAsB0B,QAAtB,EAAgCiB,KAAhC,CAAP;;;;;;;;;;;;;;AAcZ,AAAO,SAASK,eAAT,CAAyBnC,OAAzB,EAAkCb,IAAlC,EAAwC;QACvCa,QAAQE,IAAZ,EAAkB;YACVA,OAAOF,QAAQE,IAAnB;YACIW,WAAWX,KAAKI,YAAL,CAAkBnB,IAAlB,CAAf;aACKgD,eAAL,CAAqBhD,IAArB;YACI4C,QAAQ/B,QAAQgC,WAAR,CAAoBC,kBAApB,IAA0C,EAAtD;YACIF,MAAMG,OAAN,CAAc/C,IAAd,MAAwB,CAAC,CAA7B,EAAgC;mBACrByB,OAAOZ,OAAP,EAAgBb,IAAhB,EAAsB0B,QAAtB,EAAgC,IAAhC,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpRZ;;;;;;AAMA,AAAO,IAAMuB,iBAAiB,SAAjBA,cAAiB,CAACC,UAAD;;;;;;;;;;;;;;;qBAoB1BC,iBApB0B,gCAoBN;WACXpC,IAAL,CAAUP,gBAAV,IAA8B,IAA9B;KArBsB;;;;;;;;;qBA6B1B4C,oBA7B0B,mCA6BH,EA7BG;;;;;;;;;;;;;qBAwC1BC,wBAxC0B,uCAwCC,EAxCD;;;;;;;;;;;;0BAQjB;eACE,CAAC,KAAKlC,YAAL,CAAkB,IAAlB,KAA2B,KAAKmC,SAAjC,EAA4ClD,WAA5C,EAAP;;;;0BAEO;eACA,IAAP;;;;IAZoD8C,UAA9B;CAAvB;;ACRP,IAAIK,oBAAJ;;AAEA,IAAI;;QAEIC,KAAK,IAAIC,KAAKF,WAAT,CAAqB,MAArB,CAAT;kBACcE,KAAKF,WAAnB;CAHJ,CAIE,OAAMG,EAAN,EAAU;kBACM,qBAASC,KAAT,EAAgBC,MAAhB,EAAwB;iBACzBA,UAAU;qBACN,KADM;wBAEH,KAFG;oBAGPC;SAHZ;YAKIC,MAAMC,SAASC,WAAT,CAAqB,aAArB,CAAV;YACIC,eAAJ,CAAoBN,KAApB,EAA2BC,OAAOM,OAAlC,EAA2CN,OAAOO,UAAlD,EAA8DP,OAAOQ,MAArE;eACON,GAAP;KARJ;gBAUYrE,SAAZ,GAAwBgE,KAAKF,WAAL,CAAiB9D,SAAzC;CAGJ;;ACjBA;;;;;;;;;;;AAWA,AAAO,SAAS4E,UAAT,CAAkBtD,IAAlB,EAAwBuD,MAAxB,EAAgCC,IAAhC,EAAyE;QAAnCL,OAAmC,uEAAzB,IAAyB;QAAnBC,UAAmB,uEAAN,IAAM;;QACxE,CAAC7E,SAASgF,MAAT,CAAL,EAAuB;cACb,IAAIE,SAAJ,CAAc,yBAAd,CAAN;;QAEAhB,KAAK,IAAID,WAAJ,CAAgBe,MAAhB,EAAwB;gBACrBC,IADqB;wBAAA;;KAAxB,CAAT;WAKOxD,KAAK0D,aAAL,CAAmBjB,EAAnB,CAAP;;;ACrBJ;;;;;AAKA,IAAMkB,WAASlF,OAAOsC,cAAtB;;;;;;;;IAOM6C;;;;;;sBAMUC,IAAZ,EAAkB;;;;;aACTC,CAAL,GAAS,EAAT;eACOD,QAAQ,EAAf;YACI,CAAC/E,QAAQ+E,IAAR,CAAL,EAAoB;mBACT,CAACA,IAAD,CAAP;;aAECA,IAAL,GAAYA,IAAZ;aACKE,SAAL,GAAiB;mBAAM,IAAN;SAAjB;aACKC,OAAL,GAAe,UAACC,GAAD;mBAASA,GAAT;SAAf;aACKC,QAAL,GAAgB;mBAAM,MAAKtC,KAAX;SAAhB;aACKuC,QAAL,GAAgB,UAACF,GAAD,EAAS;kBACf,MAAKD,OAAL,CAAaC,GAAb,CAAN;gBACKA,QAAQ,IAAR,IAAgBA,QAAQnB,SAAzB,IACA,MAAKsB,YAAL,CAAkBH,GAAlB,KAA0B,MAAKF,SAAL,CAAeE,GAAf,CAD9B,EACmD;oBAC3CtD,WAAW,MAAKiB,KAApB;oBACIjB,aAAasD,GAAjB,EAAsB;0BACbrC,KAAL,GAAaqC,GAAb;0BACKI,OAAL,CAAaJ,GAAb,EAAkBtD,QAAlB;;aALR,MAOO;;sBAEG,IAAI8C,SAAJ,eACWQ,GADX,qBACgC,MAAKhF,IADrC,wBAC8D,MAAKqF,KAAL,CAAWrD,EADzE,QAAN;;SAXR;;;;;;;;;uBAsBJsD,2BAAQC,UAAU;YACVnG,WAAWmG,QAAX,KAAwBjG,SAASiG,QAAT,CAA5B,EAAgD;iBACvCV,CAAL,CAAOW,IAAP,CAAYD,QAAZ;;eAEG,IAAP;;;;;;;;;uBAOJE,+BAAUF,UAAU;YACZG,KAAK,KAAKb,CAAL,CAAO9B,OAAP,CAAewC,QAAf,CAAT;YACIG,OAAO,CAAC,CAAZ,EAAe;iBACNb,CAAL,CAAOc,MAAP,CAAcD,EAAd,EAAkB,CAAlB;;eAEG,IAAP;;;;;;;;;;uBAQJN,2BAAQzD,UAAUD,UAAU;aACnB,IAAIkE,IAAI,CAAR,EAAWC,MAAM,KAAKhB,CAAL,CAAOiB,MAA7B,EAAqCF,IAAIC,GAAzC,EAA8CD,GAA9C,EAAmD;gBAC3CG,MAAM,KAAKlB,CAAL,CAAOe,CAAP,CAAV;gBACItG,SAASyG,GAAT,CAAJ,EAAmB;qBACVV,KAAL,CAAWU,GAAX,EAAgBpG,IAAhB,CAAqB,KAAK0F,KAA1B,EAAiC,IAAjC,EAAuC1D,QAAvC,EAAiDD,QAAjD;aADJ,MAEO;oBACC,IAAJ,EAAUC,QAAV,EAAoBD,QAApB;;;;;;;;;;;uBASZsE,2BAAQ/F,KAAK;eACF,KAAK2E,IAAL,CAAU7B,OAAV,CAAkB9C,GAAlB,MAA2B,CAAC,CAAnC;;;;;;;;;;;uBASJgG,uBAAMjG,MAAM;aACHA,IAAL,GAAYA,IAAZ;YACI,KAAKkG,aAAL,KAAuB,IAA3B,EAAiC;iBACxBC,QAAL,GAAgB,KAAKnG,IAArB;;eAEG,IAAP;;;;;;;;;uBAOJoG,4BAAQC,WAAW;aACVC,YAAL,GAAoB/G,SAAS8G,SAAT,IAChB7G,OAAO+G,MAAP,CAAcF,SAAd,CADgB,GAEhBA,SAFJ;eAGO,IAAP;;;;;;;;;;uBAQJG,iCAA2B;YAAjBL,QAAiB,uEAAN,IAAM;;YACnB7G,SAAS6G,QAAT,CAAJ,EAAwB;iBACfD,aAAL,GAAqB,KAArB;iBACKC,QAAL,GAAgBA,QAAhB;SAFJ,MAGO;iBACED,aAAL,GAAqB,CAAC,CAACC,QAAvB;iBACKA,QAAL,GAAgB,KAAKnG,IAArB;;eAEG,IAAP;;;;;;;;;uBAOJqE,6BAASC,QAAQ;aACRmC,SAAL,GAAiBnC,MAAjB;eACO,IAAP;;;;;;;;;;uBAQJoC,yBAAOnB,UAAU;;;YACTnG,WAAWmG,QAAX,CAAJ,EAA0B;iBACjBN,QAAL,GAAgB;uBAAMM,SAAS,OAAK5C,KAAd,CAAN;aAAhB;;eAEG,IAAP;;;;;;;;;;;uBASJgE,yBAAOpB,UAAU;YACTnG,WAAWmG,QAAX,CAAJ,EAA0B;iBACjBR,OAAL,GAAeQ,QAAf;;eAEG,IAAP;;;;;;;;;;;uBASJqB,6BAASrB,UAAU;YACXnG,WAAWmG,QAAX,CAAJ,EAA0B;iBACjBT,SAAL,GAAiBS,QAAjB;;eAEG,IAAP;;;;;;;;;;uBAQJJ,qCAAaH,KAAK;YACVY,IAAI,CAAR;YACIhB,OAAO,KAAKA,IAAhB;YACIA,KAAKkB,MAAL,KAAgB,CAApB,EAAuB;mBACZ,IAAP;;eAEGF,IAAIhB,KAAKkB,MAAhB,EAAwB;gBAChBd,eAAeJ,KAAKgB,CAAL,CAAf,IACAZ,IAAInC,WAAJ,IAAmBmC,IAAInC,WAAJ,KAAoB+B,KAAKgB,CAAL,CAD3C,EAEG;uBACQ,IAAP;;;;eAID,KAAP;;;;;;;;;uBAOJiB,qBAAKxB,OAAO;aACHA,KAAL,GAAaA,KAAb;iBACOA,KAAP,EAAc,KAAKrF,IAAnB,EAAyB;iBAChB,KAAKiF,QAAL,CAAcrD,IAAd,CAAmB,IAAnB,CADgB;iBAEhB,KAAKsD,QAAL,CAActD,IAAd,CAAmB,IAAnB,CAFgB;0BAGP;SAHlB;YAKI,CAAChC,YAAY,KAAK0G,YAAjB,CAAL,EAAqC;kBAC3B,KAAKtG,IAAX,IAAmB,KAAKsG,YAAxB;;;;;;;;;;;;;;;;;;;;;;;AAmBZ,AAAO,SAASQ,IAAT,CAAclC,IAAd,EAAoB;QACnBA,gBAAgBD,QAApB,EAA8B;eACnBC,IAAP;;WAEG,IAAID,QAAJ,CAAaC,IAAb,CAAP;;;;AAIJF,SAAOoC,IAAP,EAAa,KAAb,EAAoB;OAAA,iBAAQ;eAASA,MAAP;;CAA9B;AACApC,SAAOoC,IAAP,EAAa,QAAb,EAAuB;OAAA,iBAAQ;eAASA,KAAKC,MAAL,CAAP;;CAAjC;AACArC,SAAOoC,IAAP,EAAa,SAAb,EAAwB;OAAA,iBAAQ;eAASA,KAAKE,OAAL,CAAP;;CAAlC;AACAtC,SAAOoC,IAAP,EAAa,QAAb,EAAuB;OAAA,iBAAQ;eAASA,KAAKG,MAAL,CAAP;;CAAjC;;AClPA;;;;;;;;AAQA,SAASC,QAAT,CAAkBC,QAAlB,EAA4BC,OAA5B,EAAqC;QAC7BA,YAAY,EAAZ,IAAkBD,SAASnB,OAAT,CAAiBgB,OAAjB,CAAtB,EAAiD;eACtC,IAAP;;QAEA,CAACG,SAASnB,OAAT,CAAiBe,MAAjB,CAAL,EAA+B;YACvB;mBACOM,KAAKC,KAAL,CAAWF,OAAX,CAAP;SADJ,CAEE,OAAO1D,EAAP,EAAW;;;;WAIV0D,OAAP;;;;;;;;;;;AAWJ,SAAS1E,cAAT,CAAsB6E,OAAtB,EAA+BC,IAA/B,EAAqC7E,KAArC,EAA4C;QACpC8E,mBAAmBF,QAAQpG,YAAR,CAAqBqG,IAArB,CAAvB;QACIC,qBAAqB9E,KAAzB,EAAgC;YACxBA,UAAU,IAAV,IAAkBA,UAAUkB,SAA5B,IAAyClB,UAAU,KAAvD,EAA8D;2BAC3CA,KAAf,yCAAeA,KAAf;qBACK,QAAL;qBACK,QAAL;4BACYD,YAAR,CAAqB8E,IAArB,EAA2B7E,KAA3B;;qBAEC,SAAL;4BACYD,YAAR,CAAqB8E,IAArB,EAA2B,EAA3B;;SAPR,MASO,IAAIC,qBAAqB,IAAzB,EAA+B;oBAC1BzE,eAAR,CAAwBwE,IAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCZ,AAAO,IAAME,kBAAkB,SAAlBA,eAAkB,CAACxE,UAAD;;;;;;;;;;0BAOb;;;wDACV,sBADU;;gBAENyE,QAAQ,MAAKC,UAAjB;gBACID,KAAJ,EAAW;oBACH,CAAC9H,QAAQ8H,KAAR,CAAL,EAAqB;4BACT,CAACA,KAAD,CAAR;;wBAEIA,MAAME,MAAN,CAAa,UAACC,GAAD,EAAMC,YAAN,EAAuB;yBACnC,IAAI1H,CAAT,IAAc0H,YAAd,EAA4B;4BACpB1H,CAAJ,IAASyG,KAAKiB,aAAa1H,CAAb,CAAL,CAAT;;2BAEGyH,GAAP;iBAJI,EAKL,EALK,CAAR;aAJJ,MAUO;wBACK,EAAR;;mBAEGhG,cAAP,QAA4B,YAA5B,EAA0C;uBAC/B6F,KAD+B;0BAE5B,KAF4B;8BAGxB;aAHlB;gBAKIK,WAAW,MAAKnF,WAAL,CAAiBC,kBAAjB,IAAuC,EAAtD;;uCACSzC,CAtBC;oBAuBFyG,UAAOa,MAAMtH,CAAN,CAAX;wBACK4F,KAAL,CAAW5F,CAAX,EAAcwG,IAAd;oBACMV,QAzBA,GAyBwBW,OAzBxB,CAyBAX,QAzBA;oBAyBUM,SAzBV,GAyBwBK,OAzBxB,CAyBUL,SAzBV;;oBA0BF,CAACN,QAAD,IAAa6B,SAASjF,OAAT,CAAiB1C,CAAjB,MAAwB,CAAC,CAA1C,EAA6C;4BACpCmG,SAAL;+BACWnG,CAAX;;oBAEA8F,YAAYM,SAAhB,EAA2B;4BAClBnB,OAAL,CAAa,YAAM;4BACXa,QAAJ,EAAc;2CACG,MAAKpF,IAAlB,EAAwBoF,QAAxB,EAAkC,MAAKW,QAAK9G,IAAV,CAAlC;;4BAEAyG,SAAJ,EAAe;uCACF,MAAK1F,IAAd,EAAoB0F,SAApB;;qBALR;;;;iBATH,IAAIpG,CAAT,IAAcsH,KAAd,EAAqB;sBAAZtH,CAAY;;;;;;;;;;;;yBA0BzB8C,iBAvD2B,gCAuDP;kCACVA,iBAAN;gBACIwE,QAAQ,KAAKC,UAAjB;iBACK,IAAIvH,CAAT,IAAcsH,KAAd,EAAqB;oBACbb,QAAOa,MAAMtH,CAAN,CAAX;oBACM8F,SAFW,GAEEW,KAFF,CAEXX,QAFW;;oBAGbA,SAAJ,EAAc;wBACNvG,YAAY,KAAKkH,MAAK9G,IAAV,CAAZ,CAAJ,EAAkC;4BAC1B,KAAKe,IAAL,CAAUkH,YAAV,CAAuB9B,SAAvB,CAAJ,EAAsC;iCAC7BW,MAAK9G,IAAV,IAAkBkH,SAASJ,KAAT,EAAe,KAAK/F,IAAL,CAAUI,YAAV,CAAuBgF,SAAvB,CAAf,CAAlB;;qBAFR,MAIO;uCACU,KAAKpF,IAAlB,EAAwBoF,SAAxB,EAAkC,KAAKW,MAAK9G,IAAV,CAAlC;;;;SAnEW;;;;;;;;;;;;;yBAkF3BqD,wBAlF2B,qCAkFFmE,IAlFE,EAkFIU,MAlFJ,EAkFYC,MAlFZ,EAkFoB;kCACrC9E,wBAAN,YAA+BmE,IAA/B,EAAqCU,MAArC,EAA6CC,MAA7C;gBACIR,QAAQ,KAAKC,UAAjB;iBACK,IAAIvH,CAAT,IAAcsH,KAAd,EAAqB;oBACbb,SAAOa,MAAMtH,CAAN,CAAX;oBACIyG,OAAKX,QAAL,KAAkBqB,IAAtB,EAA4B;yBACnBV,OAAK9G,IAAV,IAAkBkH,SAASJ,MAAT,EAAeqB,MAAf,CAAlB;;;;SAxFe;;;;;;;;;;;;;yBAuG3BC,eAvG2B,4BAuGXC,QAvGW,EAuGD9C,QAvGC,EAuGS;mBACzB,KAAKqC,UAAL,CAAgBS,QAAhB,EAA0B/C,OAA1B,CAAkCC,QAAlC,CAAP;SAxGuB;;;;;;;;;;;;yBAmH3B+C,iBAnH2B,8BAmHTD,QAnHS,EAmHC9C,QAnHD,EAmHW;iBAC7BqC,UAAL,CAAgBS,QAAhB,EAA0B5C,SAA1B,CAAoCF,QAApC;SApHuB;;;MAA8BrC,UAA9B;CAAxB;;AChFP,IAAMqF,aAAaC,QAAQ/I,SAA3B;;AAEA,AAAO,IAAMgJ,UAAUF,WAAWE,OAAX,IACnBF,WAAWG,eADQ,IAEnBH,WAAWI,kBAFQ,IAGnBJ,WAAWK,iBAHQ,IAInBL,WAAWM,gBAJQ,IAKnBN,WAAWO,qBALR;;ACEP,IAAMC,iBAAiB,eAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,AAAO,IAAMC,cAAc,SAAdA,WAAc,CAAC9F,UAAD;;;;;;;;;;0BAOT;;;;wDACV,sBADU;;gBAGN+F,SAAS,MAAKA,MAAL,IAAe,EAA5B;;uCACS5I,CAJC;oBAKFkF,WAAWjG,SAAS2J,OAAO5I,CAAP,CAAT,IACX,MAAK4I,OAAO5I,CAAP,CAAL,CADW,GAEX4I,OAAO5I,CAAP,CAFJ;oBAGIjB,WAAWmG,QAAX,CAAJ,EAA0B;wBAClB2D,OAAO7I,EAAE8I,KAAF,CAAQJ,cAAR,CAAX;wBACIzE,SAAS4E,KAAK,CAAL,CAAb;wBACIE,WAAW,CAACF,KAAK,CAAL,KAAW,EAAZ,EAAgBG,IAAhB,EAAf;wBACID,QAAJ,EAAc;8BACLE,QAAL,CAAchF,MAAd,EAAsB8E,QAAtB,EAAgC7D,QAAhC;qBADJ,MAEO;8BACExE,IAAL,CAAUwI,gBAAV,CAA2BjF,MAA3B,EAAmC,UAACd,EAAD,EAAQ;qCAC9B7D,IAAT,QAAoB6D,EAApB;yBADJ;;iBAPR,MAWO;0BACG,IAAIgB,SAAJ,CAAc,6BAAd,CAAN;;;;iBAhBH,IAAInE,CAAT,IAAc4I,MAAd,EAAsB;sBAAb5I,CAAa;;;;;;;;;;;;;;;;yBA8B1BiJ,QAzCuB,qBAyCdhF,MAzCc,EAyCN8E,QAzCM,EAyCI7D,QAzCJ,EAyCc;;;iBAC5BxE,IAAL,CAAUwI,gBAAV,CAA2BjF,MAA3B,EAAmC,UAACX,KAAD,EAAW;oBACtC6F,SAAS7F,MAAM6F,MAAnB;uBACOA,UAAUA,iBAAjB,EAAkC;wBAC1Bf,QAAQ9I,IAAR,CAAa6J,MAAb,EAAqBJ,QAArB,CAAJ,EAAoC;iCACvBzJ,IAAT,SAAoBgE,KAApB,EAA2B6F,MAA3B;;6BAEKA,OAAOrH,UAAhB;;aANR;SA1CmB;;;;;;;;;;;;;;;yBAgEvBsH,OAhEuB,oBAgEfnF,MAhEe,EAgEPC,IAhEO,EAgEkC;gBAAnCL,OAAmC,uEAAzB,IAAyB;gBAAnBC,UAAmB,uEAAN,IAAM;;mBAC9CE,WAAS,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,EAA6BL,OAA7B,EAAsCC,UAAtC,CAAP;SAjEmB;;;MAA8BjB,UAA9B;CAApB;;ACxCP,IAAMwG,UAAU3F,QAAhB;;;;;;;;AAQA,AAAO,SAAS4F,WAAT,CAAqB5I,IAArB,EAA2B;QAC1B6I,MAAM7I,KAAK8I,aAAL,IAAsBH,OAAhC;QACII,YAAYF,IAAI7H,aAAJ,CAAkB,OAAlB,CAAhB;cACUgI,IAAV,GAAiB,UAAjB;cACUrH,YAAV,CAAuB,IAAvB,aAAsC3B,KAAKiB,EAA3C;QACIgI,OAAOJ,IAAII,IAAf;;QAEIA,KAAKC,iBAAT,EAA4B;aACnB3H,YAAL,CAAkBwH,SAAlB,EAA6BE,KAAKC,iBAAlC;KADJ,MAEO;aACEhI,WAAL,CAAiB6H,SAAjB;;WAEGA,SAAP;;;ACjBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,AAAO,IAAMI,aAAa,SAAbA,UAAa,CAAChH,UAAD;;;;;;;0BAIR;;;wDACV,sBADU;;gBAEN,CAAC,MAAKL,WAAL,CAAiBiH,SAAtB,EAAiC;oBACzB7J,MAAM,MAAK4C,WAAf;uBACOf,cAAP,CAAsB7B,GAAtB,EAA2B,WAA3B,EAAwC;2BAC7B0J;iBADX;;kBAICQ,SAAL;;;;yBAGJhH,iBAfsB,gCAeF;kCACVA,iBAAN;iBACKpC,IAAL,CAAUqJ,SAAV,CAAoBC,GAApB,CAAwB,KAAKrI,EAA7B;SAjBkB;;yBAoBtBmI,SApBsB,wBAoBV;gBACJG,QAAQ,KAAKC,GAAjB;gBACIjL,SAASgL,KAAT,CAAJ,EAAqB;qBACZzH,WAAL,CAAiBiH,SAAjB,CAA2BU,WAA3B,GAAyCF,KAAzC;;SAvBc;;;MAA8BpH,UAA9B;CAAnB;;AC5BP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,AAAO,IAAMuH,gBAAgB,SAAhBA,aAAgB,CAACvH,UAAD;;;;;gCACR;uBACN,IAAP;;;;;;;;;;;0BAQU;;;wDACV,sBADU;;gBAEN,MAAKwH,UAAL,IAAmB,CAAC9K,YAAY,MAAK+K,QAAjB,CAAxB,EAAoD;oBAC5ChD,QAAQ,MAAKC,UAAjB;oBACID,KAAJ,EAAW;wBACHpC,WAAW,SAAXA,QAAW,GAAM;8BACZqF,MAAL;qBADJ;yBAGK,IAAIvK,CAAT,IAAcsH,KAAd,EAAqB;8BACXtH,CAAN,EAASiF,OAAT,CAAiBC,QAAjB;;;;;;;;;;;;;;yBAWhBpC,iBA9ByB,gCA8BL;kCACVA,iBAAN;gBACI,CAACvD,YAAY,KAAK+K,QAAjB,CAAL,EAAiC;qBACxBC,MAAL;;SAjCiB;;;;;;;;;;;;;yBA8CzBA,MA9CyB,mBA8ClBC,GA9CkB,EA8Cb;kBACFA,OAAO,KAAKF,QAAlB;;gBAEIvL,WAAWyL,GAAX,CAAJ,EAAqB;oBACblL,IAAJ,CAAS,IAAT;aADJ,MAEO,IAAIL,SAASuL,GAAT,CAAJ,EAAmB;qBACjB9J,IAAL,CAAU+J,SAAV,GAAsBD,GAAtB;aADG,MAEA;sBACG,IAAIrG,SAAJ,CAAc,4BAAd,CAAN;;SAtDiB;;;MAA8BtB,UAA9B;CAAtB;;ACjCP;AACA,AAAO,IAAM2E,SAAS/H,MAAML,SAAN,CAAgBoI,MAAhB,IAA0B,UAAStC,QAAT,qBAAuC;;;QAE/EwF,IAAI,IAAR;QACIlF,MAAMkF,EAAEjF,MAAZ;QACIzF,IAAI,CAAR;QACIsC,cAAJ;QACIqI,UAAUlF,MAAV,KAAqB,CAAzB,EAA4B;gBAChBkF,UAAU,CAAV,CAAR;KADJ,MAEO;eACI3K,IAAIwF,GAAJ,IAAW,EAAExF,KAAK0K,CAAP,CAAlB,EAA6B;;;gBAGrBA,EAAE1K,GAAF,CAAR;;WAEGA,IAAIwF,GAAX,EAAgBxF,GAAhB,EAAqB;YACbA,KAAK0K,CAAT,EAAY;oBACAxF,SAAS5C,KAAT,EAAgBoI,EAAE1K,CAAF,CAAhB,EAAsBA,CAAtB,EAAyB0K,CAAzB,CAAR;;;WAGDpI,KAAP;CAnBG;;ACDP;;;;AAIA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0CMsI;;;;;iBAKUC,UAAZ,EAAwB;;;iBACPA;;;;;;OAAb;SACKA,UAAL,GAAkBA,UAAlB;;;;;;;;;kBAOJC,wBAAO;;QAECC,OAAO,GAAGC,KAAH,CAAS1L,IAAT,CAAcqL,SAAd,EAAyB,CAAzB,CAAX;WACOnD,OAAOlI,IAAP,CAAYyL,IAAZ,EAAkB,UAACE,CAAD,EAAIC,KAAJ;aAAcA,MAAMD,CAAN,CAAd;KAAlB,EAA0C,KAAKJ,UAA/C,CAAP;;;;;;;;;;;;AAQR,AAAO,IAAMM,MAAM,SAANA,GAAM,CAACC,UAAD;SAAgB,IAAIR,KAAJ,CAAUQ,UAAV,CAAhB;CAAZ;;ACtEP;;;;;;AAMA,SAASC,KAAT,CAAe3K,IAAf,EAAqB;QACb;eACO,CAACzB,SAASyB,KAAK4K,SAAd,CAAR;KADJ,CAEE,OAAOjI,EAAP,EAAW;eACF,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;AAyBR,AAAO,SAASkI,IAAT,CAAcC,QAAd,EAAwB;QACrBC,UADqB,GAEvB,sBAAc;;;YACN,CAACJ,MAAM,IAAN,CAAL,EAAkB;mBACP,IAAP;;YAEApL,OAAOP,SAASQ,aAAT,CAAuB,KAAKsC,WAA5B,CAAX;YACI3C,SAASI,KAAKJ,MAAlB;;YAEIW,UAAUkD,SAAShC,aAAT,CACV7B,OAAO6L,OAAP,GAAiB7L,OAAO6L,OAAxB,GAAkCzL,KAAK0B,EAD7B,CAAd;gBAGQH,SAAR,GAAoBvB,KAAKL,GAAL,CAASR,SAA7B;YACIS,OAAO6L,OAAX,EAAoB;oBACRrJ,YAAR,CAAqB,IAArB,EAA2BpC,KAAK0B,EAAhC;;eAEGnB,OAAP;KAhBmB;;;;eAoBhBpB,SAAX,GAAuBD,OAAOwM,MAAP,CAAcH,SAASpM,SAAvB,EAAkC;qBACxC;mBACFqM,UADE;0BAEK,IAFL;sBAGC;;KAJK,CAAvB;WAOOA,UAAP;;;AC1DJ;;;;;;;;AAQA,AAAO,IAAMG,MAAMC,WAAZ;;;;;;;;AAQP,AAAO,IAAMC,SAAS;gCAAA;kCAAA;0BAAA;wBAAA;;CAAf,CAOP,AACA,AACA,AACA,AACA;;AClCA;;;;;;;;AAQA,AACA,AAEA,AAIA,AAEA;;;;;;;;;;AAUA,AAAO,SAASzH,QAAT,CAAgBtD,OAAhB,EAAyBgL,SAAzB,EAAoClM,MAApC,EAA4C;SACxCH,SAAS2E,MAAT,CAAgBtD,OAAhB,EAAyBgL,SAAzB,EAAoClM,MAApC,CAAP;;;;;;;;;;;;;AAaJ,AAAO,SAAS0K,QAAT,CAAgB7J,IAAhB,EAAsBqL,SAAtB,EAAiCzE,KAAjC,EAAwC;MACvC9G,UAAU,IAAIuL,SAAJ,EAAd;OACK,IAAI/L,CAAT,IAAcsH,KAAd,EAAqB;YACTtH,CAAR,IAAasH,MAAMtH,CAAN,CAAb;;MAEA4B,WAAJ,CAAgBlB,IAAhB,EAAsBF,OAAtB;SACOA,OAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCJ,IAAawL,aAAb;;;;;;;;;EAAmCb,IAC/BI,KAAKnI,KAAK6I,WAAV,CAD+B,EAEjCnB,IAFiC,CAG/BgB,OAAOlJ,cAHwB,EAI/BkJ,OAAOzE,eAJwB,EAK/ByE,OAAOjC,UALwB,EAM/BiC,OAAOnD,WANwB,EAO/BmD,OAAO1B,aAPwB,CAAnC;;AChFA,SAAS8B,UAAT,CAAoBC,KAApB,EAA2B;OACpBC,OAAH,CAAW9M,IAAX,CAAgB6M,KAAhB,EAAuB,UAACzL,IAAD,EAAU;YACzB,CAACA,KAAKiB,EAAV,EAAc;gBACPiK,IAAIrK,IAAJ,CAASb,IAAT,CAAH,EAAmB;oBACXQ,OAAJ,CAAYR,IAAZ;;SAFR,MAIO;gBACCQ,OAAJ,CAAYR,IAAZ;;YAEAA,KAAK2L,QAAT,EAAmB;uBACJ3L,KAAK2L,QAAhB;;KATR;;;AAcJ,IAAMC,WAAW,IAAIC,gBAAJ,CAAqB,UAACC,SAAD,EAAe;cACvCJ,OAAV,CAAkB,UAACK,QAAD,EAAc;gBACpBA,SAAS/C,IAAjB;iBACK,WAAL;;wBACQ+C,SAASC,UAAb,EAAyB;mCACVD,SAASC,UAApB;;wBAEAD,SAASE,YAAb,EAA2B;iCACdA,YAAT,CAAsBP,OAAtB,CAA8B,UAAC1L,IAAD,EAAU;gCAChCS,UAAJ,CAAeT,IAAf;yBADJ;;;;iBAMH,YAAL;;wBACQkM,gBAAgBH,SAASG,aAA7B;wBACIA,kBAAkB,IAAtB,EAA4B;;;wBAGxBlM,OAAO+L,SAAStD,MAApB;wBACI/H,MAAJ,CACIV,IADJ,EAEIkM,aAFJ,EAGIH,SAASpL,QAHb,EAIIX,KAAKI,YAAL,CAAkB8L,aAAlB,CAJJ;;;;KAnBR;CADa,CAAjB;;AAgCAN,SAASrH,OAAT,CAAiBvB,SAASmJ,IAA1B,EAAgC;gBAChB,IADgB;eAEjB,IAFiB;aAGnB;CAHb;;ACjDA;;;;;;;GAQA,AACA;;;;;;;;;;;;;;","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}