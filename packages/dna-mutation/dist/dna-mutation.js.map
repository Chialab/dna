{"version":3,"file":"dna-mutation.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/dom.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/lib/style.js","node_modules/@dnajs/core/index.js","packages/dna-mutation/observer.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/polyfills/custom-event.js","node_modules/@dnajs/core/src/polyfills/matches.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/polyfills/reduce.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/core.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","import { registry } from './registry.js';\nimport { COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * Retrieve a component constructor from an Element or from a tag name.\n * @method getComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component|String} element The element or the tag name.\n * @param {Boolean} full Retrieve full component information.\n * @return {Function} The component constructor for the given param.\n */\nexport function getComponent(element, full = false) {\n    if (element.node) {\n        element = element.node;\n    }\n    if (element.nodeType === Node.ELEMENT_NODE) {\n        element = element.getAttribute('is') || element.tagName;\n    }\n    return full ? registry.getDescriptor(element) : registry.get(element);\n}\n/**\n * Check if a node is an instance of a component.\n * @method isComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to check.\n * @return {Boolean}\n */\nexport function isComponent(element) {\n    let Ctr = getComponent(element);\n    return Ctr && (element instanceof Ctr);\n}\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    element = element[COMPONENT_SYMBOL] ?\n        element[COMPONENT_SYMBOL] : element;\n    if (isComponent(element)) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    element = element[COMPONENT_SYMBOL] ?\n        element[COMPONENT_SYMBOL] : element;\n    if (isComponent(element)) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    element = element[COMPONENT_SYMBOL] ?\n        element[COMPONENT_SYMBOL] : element;\n    if (isComponent(element)) {\n        element[UPDATED].call(element, name, oldValue, newValue);\n        return true;\n    }\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {String} is The component tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(is) {\n    let Ctr = getComponent(is);\n    if (Ctr) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    if (element.node) {\n        let node = element.node;\n        if (parent !== node.parentNode || parent.lastElementChild !== node) {\n            if (node.parentNode) {\n                removeChild(node.parentNode, element);\n            }\n            parent.appendChild(node);\n            return connect(element);\n        }\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    if (element.node) {\n        parent.removeChild(element.node);\n        return disconnect(element);\n    }\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        refNode = refNode.node ?\n            refNode.node :\n            refNode;\n        if (node.nextSibling !== refNode) {\n            if (node.parentNode) {\n                disconnect(element);\n            }\n            parent.insertBefore(node, refNode);\n            return connect(element);\n        }\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        if (node.parentNode) {\n            disconnect(element);\n        }\n        if (refNode.node) {\n            parent.replaceChild(node, refNode.node);\n            disconnect(refNode);\n        } else if (refNode[COMPONENT_SYMBOL]) {\n            parent.replaceChild(node, refNode);\n            disconnect(refNode[COMPONENT_SYMBOL]);\n        } else {\n            parent.replaceChild(node, refNode);\n        }\n        return connect(element);\n    }\n}\n/**\n * Get a component attribute.\n * @method getAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element.\n * @param {String} name The attribute name.\n * @return {String} The element attribute value.\n */\nexport function getAttribute(element, name) {\n    if (element.node) {\n        return element.node.getAttribute(name);\n    }\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.setAttribute(name, value);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, value);\n        }\n    }\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.removeAttribute(name);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, null);\n        }\n    }\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\n/**\n * Shortcut to `Object.defineProperty`.\n * @type {Function}\n * @private\n */\nconst define = Object.defineProperty;\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n * @private\n */\nclass Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    this.changed(val, oldValue);\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Property|Function|Array} ctrs A Property to clone or a single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.node.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.node.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this.node, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback() {}\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { PRIVATE_SYMBOL } from '../lib/symbols.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\nconst PRIVATE_PROP = 'events';\n\nfunction addToPrivate(scope, evName, callback) {\n    let internal = scope[PRIVATE_SYMBOL][PRIVATE_PROP] = scope[PRIVATE_SYMBOL][PRIVATE_PROP] || {};\n    let events = internal[evName] = internal[evName] || [];\n    events.push(callback);\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    let wrapCallback = (event) => {\n                        callback.call(this, event, this);\n                    };\n                    this.node.addEventListener(evName, wrapCallback);\n                    addToPrivate(this, evName, wrapCallback);\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        let events = this[PRIVATE_SYMBOL][PRIVATE_PROP] || {};\n        for (let k in events) {\n            events[k].forEach((callback) => this.node.removeEventListener(k, callback));\n        }\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire when the event fires.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = (event) => {\n            let target = event.target;\n            let node = this.node;\n            while (target && target !== node) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        };\n        this.node.addEventListener(evName, wrapCallback);\n        addToPrivate(this, evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this.node, evName, data, bubbles, cancelable);\n    }\n};\n","const rootDoc = document;\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nexport function createStyle(node) {\n    let doc = node.ownerDocument || rootDoc;\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${node.is}`);\n    let head = doc.head;\n    /* istanbul ignore else */\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, DOM, MIXINS } from './src/core.js';\nimport { registry } from './src/lib/registry.js';\n\n/**\n * @namespace DNA\n */\nexport * from './src/core.js';\nexport { registry };\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    Object.defineProperty(Component.prototype, 'is', {\n        get: () => tagName,\n    });\n    return registry.define(tagName, Component, config);\n}\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    DOM.appendChild(node, element);\n    return element;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n * @memberof DNA.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n * ```\n */\nexport class BaseComponent extends mix().with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {\n    constructor() {\n        super();\n        let desc = registry.getDescriptor(this.constructor);\n        let config = desc.config;\n        this.node = document.createElement(\n            config.extends ? config.extends : desc.is\n        );\n        if (config.extends) {\n            this.node.setAttribute('is', desc.is);\n        }\n    }\n}\n","import { DOM, COMPONENT_SYMBOL } from '@dnajs/core';\n\nfunction onCreation(nodes) {\n    [].forEach.call(nodes, (node) => {\n        if (!node[COMPONENT_SYMBOL]) {\n            let Ctr = DOM.getComponent(node);\n            if (Ctr) {\n                let elem = new Ctr();\n                elem.node = node;\n                DOM.connect(elem);\n            }\n        } else {\n            DOM.connect(node);\n        }\n        if (node.children) {\n            onCreation(node.children);\n        }\n    });\n}\n\nconst OBSERVER = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n        switch (mutation.type) {\n        case 'childList': {\n            if (mutation.addedNodes) {\n                onCreation(mutation.addedNodes);\n            }\n            if (mutation.removedNodes) {\n                mutation.removedNodes.forEach((node) => {\n                    DOM.disconnect(node);\n                });\n            }\n            break;\n        }\n        case 'attributes': {\n            let attributeName = mutation.attributeName;\n            if (attributeName === 'is') {\n                break;\n            }\n            let node = mutation.target;\n            DOM.update(\n                node,\n                attributeName,\n                mutation.oldValue,\n                node.getAttribute(attributeName)\n            );\n            break;\n        }\n        }\n    });\n});\n\nOBSERVER.observe(document.body, {\n    attributes: true,\n    childList: true,\n    subtree: true,\n});\n","import { isFunction, isString } from './typeof.js';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace registry\n * @memberof! DNA.\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @type {Object}\n     */\n    components: {},\n    /**\n     * Register a new component.\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        this.components[name.toLowerCase()] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component descriptor by id.\n     * @private\n     * @param {String} name The component id.\n     * @return {Object} The component descriptor.\n     */\n    getDescriptor(name) {\n        if (isString(name)) {\n            return this.components[name.toLowerCase()];\n        } else if (isFunction(name)) {\n            for (let k in this.components) {\n                let desc = this.components[k];\n                if (desc.Ctr === name) {\n                    return desc;\n                }\n            }\n        }\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @param {String} name The component id.\n     * @return {Function} The component constructor.\n     */\n    get(name) {\n        let desc = this.getDescriptor(name);\n        if (desc) {\n            return desc.Ctr;\n        }\n    },\n};\n","export const COMPONENT_SYMBOL = '__component';\nexport const NODE_SYMBOL = '__node';\nexport const PRIVATE_SYMBOL = '__private';\n","import { PRIVATE_SYMBOL, COMPONENT_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        this[PRIVATE_SYMBOL] = {};\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","let CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    let ev = new self.CustomEvent('test');\n    CustomEvent = self.CustomEvent;\n} catch(ex) {\n    CustomEvent = function(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined,\n        };\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\nexport { CustomEvent };\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.matchesSelector ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isString } from '../lib/typeof.js';\nimport { createStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.constructor.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr, 'styleElem', {\n                value: createStyle(this),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.node.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (isString(style)) {\n            this.constructor.styleElem.textContent = style;\n        }\n    }\n};\n","import { isFunction, isString, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            (this.shadowRoot || this.node).innerHTML = tpl;\n        } else if (!isFalsy(tpl)) {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","/* eslint-disable prefer-rest-params */\nexport const reduce = Array.prototype.reduce || function(callback /*, initialValue*/ ) {\n    'use strict';\n    let t = this;\n    let len = t.length;\n    let k = 0;\n    let value;\n    if (arguments.length === 2) {\n        value = arguments[1];\n    } else {\n        while (k < len && !(k in t)) {\n            k++;\n        }\n        value = t[k++];\n    }\n    for (; k < len; k++) {\n        if (k in t) {\n            value = callback(value, t[k], k, t);\n        }\n    }\n    return value;\n};\n","/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nimport { reduce } from '../polyfills/reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extend superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce.call(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DOM\n * @memberof! DNA.\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace MIXINS\n * @memberof! DNA.\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport * from './lib/symbols.js';\nexport * from './lib/typeof.js';\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","getComponent","element","full","node","nodeType","Node","ELEMENT_NODE","getAttribute","tagName","registry","getDescriptor","get","isComponent","Ctr","connect","COMPONENT_SYMBOL","CONNECTED","disconnect","DISCONNECTED","update","name","oldValue","newValue","UPDATED","createElement","is","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","attrs","constructor","observedAttributes","indexOf","removeAttribute","dispatch","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","prop","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","undefined","addToPrivate","scope","callback","internal","PRIVATE_SYMBOL","PRIVATE_PROP","events","push","createStyle","doc","ownerDocument","rootDoc","styleElem","type","head","firstElementChild","define","Component","config","defineProperty","render","props","k","onCreation","nodes","forEach","DOM","elem","children","components","toLowerCase","this","desc","NODE_SYMBOL","ComponentMixin","SuperClass","_SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","self","event","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","val","getterFn","_this","setterFn","validateType","changed","observe","unobserve","io","splice","i","len","length","clb","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","bind","Number","PropertiesMixin","properties","reduce","res","partialProps","observed","propertyChangedCallback","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","rule","match","selector","trim","delegate","wrapCallback","addEventListener","_this3","removeEventListener","target","_this4","trigger","StyleMixin","updateCSS","classList","add","style","css","textContent","TemplateMixin","template","tpl","shadowRoot","innerHTML","t","arguments","Mixin","superclass","with","args","slice","c","mixin","mix","superClass","DOM_HELPERS","MIXINS","BaseComponent","_mix$with","extends","OBSERVER","MutationObserver","mutations","mutation","addedNodes","removedNodes","attributeName","body"],"mappings":"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"}