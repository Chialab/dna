{"version":3,"file":"dna-idom.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/dom.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/lib/style.js","node_modules/incremental-dom/src/util.js","node_modules/incremental-dom/src/node_data.js","node_modules/incremental-dom/src/context.js","packages/dna-idom/src/lib/idom.js","node_modules/@dnajs/core/index.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/polyfills/custom-event.js","node_modules/@dnajs/core/src/polyfills/matches.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/polyfills/reduce.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/core.js","node_modules/incremental-dom/src/nodes.js","node_modules/incremental-dom/src/notifications.js","node_modules/incremental-dom/src/assertions.js","node_modules/incremental-dom/src/dom_util.js","node_modules/incremental-dom/src/core.js","node_modules/incremental-dom/src/symbols.js","node_modules/incremental-dom/src/attributes.js","node_modules/incremental-dom/src/virtual_elements.js","packages/dna-idom/src/mixins/idom.js","packages/dna-idom/index.js","packages/dna-idom/observer.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","import { registry } from './registry.js';\nimport { COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * Retrieve a component constructor from an Element or from a tag name.\n * @method getComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component|String} element The element or the tag name.\n * @param {Boolean} full Retrieve full component information.\n * @return {Function} The component constructor for the given param.\n */\nexport function getComponent(element, full = false) {\n    if (element.node) {\n        element = element.node;\n    }\n    if (element.nodeType === Node.ELEMENT_NODE) {\n        element = element.getAttribute('is') || element.tagName;\n    }\n    return full ? registry.getDescriptor(element) : registry.get(element);\n}\n/**\n * Check if a node is an instance of a component.\n * @method isComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to check.\n * @return {Boolean}\n */\nexport function isComponent(element) {\n    let Ctr = getComponent(element);\n    return Ctr && (element instanceof Ctr);\n}\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    element = element[COMPONENT_SYMBOL] ?\n        element[COMPONENT_SYMBOL] : element;\n    if (isComponent(element)) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    element = element[COMPONENT_SYMBOL] ?\n        element[COMPONENT_SYMBOL] : element;\n    if (isComponent(element)) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    element = element[COMPONENT_SYMBOL] ?\n        element[COMPONENT_SYMBOL] : element;\n    if (isComponent(element)) {\n        element[UPDATED].call(element, name, oldValue, newValue);\n        return true;\n    }\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {String} is The component tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(is) {\n    let Ctr = getComponent(is);\n    if (Ctr) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    if (element.node) {\n        let node = element.node;\n        if (parent !== node.parentNode || parent.lastElementChild !== node) {\n            if (node.parentNode) {\n                removeChild(node.parentNode, element);\n            }\n            parent.appendChild(node);\n            return connect(element);\n        }\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    if (element.node) {\n        parent.removeChild(element.node);\n        return disconnect(element);\n    }\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        refNode = refNode.node ?\n            refNode.node :\n            refNode;\n        if (node.nextSibling !== refNode) {\n            if (node.parentNode) {\n                disconnect(element);\n            }\n            parent.insertBefore(node, refNode);\n            return connect(element);\n        }\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        if (node.parentNode) {\n            disconnect(element);\n        }\n        if (refNode.node) {\n            parent.replaceChild(node, refNode.node);\n            disconnect(refNode);\n        } else if (refNode[COMPONENT_SYMBOL]) {\n            parent.replaceChild(node, refNode);\n            disconnect(refNode[COMPONENT_SYMBOL]);\n        } else {\n            parent.replaceChild(node, refNode);\n        }\n        return connect(element);\n    }\n}\n/**\n * Get a component attribute.\n * @method getAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element.\n * @param {String} name The attribute name.\n * @return {String} The element attribute value.\n */\nexport function getAttribute(element, name) {\n    if (element.node) {\n        return element.node.getAttribute(name);\n    }\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.setAttribute(name, value);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, value);\n        }\n    }\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.removeAttribute(name);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, null);\n        }\n    }\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\n/**\n * Shortcut to `Object.defineProperty`.\n * @type {Function}\n * @private\n */\nconst define = Object.defineProperty;\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n * @private\n */\nclass Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    this.changed(val, oldValue);\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Property|Function|Array} ctrs A Property to clone or a single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.node.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.node.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this.node, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback() {}\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { PRIVATE_SYMBOL } from '../lib/symbols.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\nconst PRIVATE_PROP = 'events';\n\nfunction addToPrivate(scope, evName, callback) {\n    let internal = scope[PRIVATE_SYMBOL][PRIVATE_PROP] = scope[PRIVATE_SYMBOL][PRIVATE_PROP] || {};\n    let events = internal[evName] = internal[evName] || [];\n    events.push(callback);\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    let wrapCallback = (event) => {\n                        callback.call(this, event, this);\n                    };\n                    this.node.addEventListener(evName, wrapCallback);\n                    addToPrivate(this, evName, wrapCallback);\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        let events = this[PRIVATE_SYMBOL][PRIVATE_PROP] || {};\n        for (let k in events) {\n            events[k].forEach((callback) => this.node.removeEventListener(k, callback));\n        }\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire when the event fires.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = (event) => {\n            let target = event.target;\n            let node = this.node;\n            while (target && target !== node) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        };\n        this.node.addEventListener(evName, wrapCallback);\n        addToPrivate(this, evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this.node, evName, data, bubbles, cancelable);\n    }\n};\n","const rootDoc = document;\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nexport function createStyle(node) {\n    let doc = node.ownerDocument || rootDoc;\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${node.is}`);\n    let head = doc.head;\n    /* istanbul ignore else */\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","import { isFalsy, isObject, isFunction, isArray, DOM } from '@dnajs/core/src/core.js';\nimport {\n    skip,\n    text,\n    attr,\n    elementClose,\n    elementOpenStart,\n    elementOpenEnd,\n    patch as originalPatch,\n} from 'incremental-dom/index.js';\n\nfunction handleChildren(children) {\n    children.forEach((child) => {\n        if (isFunction(child)) {\n            child();\n        } else if (isArray(child)) {\n            handleChildren(child);\n        } else if (child) {\n            text(child);\n        }\n    });\n}\n\nfunction interpolate(template, data) {\n    if (isFunction(template)) {\n        let res = template.call(this, data);\n        interpolate.call(this, res);\n    } else if (isArray(template)) {\n        template.forEach((chunk) => {\n            interpolate.call(this, chunk);\n        });\n    }\n}\n\n\nexport function h(element, props, ...children) {\n    return () => {\n        elementOpenStart(element);\n\n        if (!isObject(props)) {\n            if (props) {\n                children.unshift(props);\n            }\n            props = {};\n        }\n\n        for (let k in props) {\n            if (!isFalsy(props[k])) {\n                attr(k, props[k]);\n            }\n        }\n\n        const node = elementOpenEnd(element);\n        const isComponent = DOM.getComponent(node);\n\n        if (isComponent) {\n            skip();\n        } else {\n            handleChildren(children);\n        }\n        elementClose(element);\n        return node;\n    };\n}\n\nexport function patch(scope, fn, data) {\n    return originalPatch(scope, interpolate.bind(this, fn, data));\n}\n\nexport { text };\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, DOM, MIXINS } from './src/core.js';\nimport { registry } from './src/lib/registry.js';\n\n/**\n * @namespace DNA\n */\nexport * from './src/core.js';\nexport { registry };\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    Object.defineProperty(Component.prototype, 'is', {\n        get: () => tagName,\n    });\n    return registry.define(tagName, Component, config);\n}\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    DOM.appendChild(node, element);\n    return element;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n * @memberof DNA.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n * ```\n */\nexport class BaseComponent extends mix().with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {\n    constructor() {\n        super();\n        let desc = registry.getDescriptor(this.constructor);\n        let config = desc.config;\n        this.node = document.createElement(\n            config.extends ? config.extends : desc.is\n        );\n        if (config.extends) {\n            this.node.setAttribute('is', desc.is);\n        }\n    }\n}\n","import { isFunction, isString } from './typeof.js';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace registry\n * @memberof! DNA.\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @type {Object}\n     */\n    components: {},\n    /**\n     * Register a new component.\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        this.components[name.toLowerCase()] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component descriptor by id.\n     * @private\n     * @param {String} name The component id.\n     * @return {Object} The component descriptor.\n     */\n    getDescriptor(name) {\n        if (isString(name)) {\n            return this.components[name.toLowerCase()];\n        } else if (isFunction(name)) {\n            for (let k in this.components) {\n                let desc = this.components[k];\n                if (desc.Ctr === name) {\n                    return desc;\n                }\n            }\n        }\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @param {String} name The component id.\n     * @return {Function} The component constructor.\n     */\n    get(name) {\n        let desc = this.getDescriptor(name);\n        if (desc) {\n            return desc.Ctr;\n        }\n    },\n};\n","export const COMPONENT_SYMBOL = '__component';\nexport const NODE_SYMBOL = '__node';\nexport const PRIVATE_SYMBOL = '__private';\n","import { PRIVATE_SYMBOL, COMPONENT_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        this[PRIVATE_SYMBOL] = {};\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","let CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    let ev = new self.CustomEvent('test');\n    CustomEvent = self.CustomEvent;\n} catch(ex) {\n    CustomEvent = function(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined,\n        };\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\nexport { CustomEvent };\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.matchesSelector ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isString } from '../lib/typeof.js';\nimport { createStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.constructor.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr, 'styleElem', {\n                value: createStyle(this),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.node.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (isString(style)) {\n            this.constructor.styleElem.textContent = style;\n        }\n    }\n};\n","import { isFunction, isString, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            (this.shadowRoot || this.node).innerHTML = tpl;\n        } else if (!isFalsy(tpl)) {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","/* eslint-disable prefer-rest-params */\nexport const reduce = Array.prototype.reduce || function(callback /*, initialValue*/ ) {\n    'use strict';\n    let t = this;\n    let len = t.length;\n    let k = 0;\n    let value;\n    if (arguments.length === 2) {\n        value = arguments[1];\n    } else {\n        while (k < len && !(k in t)) {\n            k++;\n        }\n        value = t[k++];\n    }\n    for (; k < len; k++) {\n        if (k in t) {\n            value = callback(value, t[k], k, t);\n        }\n    }\n    return value;\n};\n","/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nimport { reduce } from '../polyfills/reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extend superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce.call(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DOM\n * @memberof! DNA.\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace MIXINS\n * @memberof! DNA.\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport * from './lib/symbols.js';\nexport * from './lib/typeof.js';\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nlet inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nconst assertInPatch = function(functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nconst assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nconst assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nconst assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nconst assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nconst assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nconst assertCloseMatchesOpenTag = function(nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close \"' + tag + '\" but \"' +\n        nodeName + '\" was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nconst assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nconst assertPatchElementNoExtras = function(\n    startNode,\n    currentNode,\n    expectedNextNode,\n    expectedPrevNode) {\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInAttributes = function(value) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInSkip = function(value) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","import { NODE_SYMBOL, COMPONENT_SYMBOL, isFunction } from '@dnajs/core/src/core.js';\nimport { patch } from '../lib/idom.js';\n\nexport const IDOMMixin = (superClass) => class extends superClass {\n    /**\n     * @property {HTMLElement} node Get component node reference.\n     * @name node\n     * @type {HTMLElement}\n     * @memberof DNA.MIXINS.IDOMMixin\n     * @instance\n     */\n    get node() {\n        return this[NODE_SYMBOL];\n    }\n\n    set node(node) {\n        node[COMPONENT_SYMBOL] = this;\n        this[NODE_SYMBOL] = node;\n    }\n\n    constructor() {\n        super();\n        this.node = document.createElement(this.is);\n    }\n\n    render(template) {\n        template = template || this.template;\n        if (isFunction(template)) {\n            let tpl = template.bind(this);\n            template = () => patch(this.shadowRoot || this.node, tpl);\n        }\n        super.render(template);\n    }\n};\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern with IncrementalDOM templates.\n */\nimport * as IDOM from './src/lib/idom.js';\nimport { IDOMMixin } from './src/mixins/idom.js';\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\n\nMIXINS.IDOMMixin = IDOMMixin;\n\nexport * from '@dnajs/core/src/core.js';\nexport { registry, render, define } from '@dnajs/core';\nexport { IDOM };\nexport class BaseComponent extends mix().with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin,\n    IDOMMixin\n) {}\n","import { symbols, attributes, notifications } from 'incremental-dom/index.js';\nimport { COMPONENT_SYMBOL, DOM } from '@dnajs/core/src/core.js';\n\nlet _created = notifications.nodesCreated;\nlet _removed = notifications.nodesDeleted;\nlet _changed = attributes[symbols.default];\n\nnotifications.nodesCreated = function(nodes) {\n    nodes.forEach((node) => {\n        let Ctr = DOM.getComponent(node);\n        if (Ctr) {\n            let elem = new Ctr();\n            elem.node = node;\n            DOM.connect(elem);\n        }\n    });\n    /* istanbul ignore if */\n    if (_created) {\n        _created(nodes);\n    }\n};\n\nnotifications.nodesDeleted = function(nodes) {\n    nodes.forEach((node) => {\n        if (node[COMPONENT_SYMBOL]) {\n            DOM.disconnect(node[COMPONENT_SYMBOL]);\n        }\n    });\n    /* istanbul ignore if */\n    if (_removed) {\n        _removed(nodes);\n    }\n};\n\nattributes[symbols.default] = function(node, attrName, attrValue) {\n    let oldValue = node.getAttribute(attrName);\n    /* istanbul ignore if */\n    if (_changed) {\n        _changed(node, attrName, attrValue);\n    }\n    let elem = node[COMPONENT_SYMBOL];\n    if (elem) {\n        let attrs = elem.constructor.observedAttributes || [];\n        if (attrs.indexOf(attrName) !== -1) {\n            attrValue = (attrValue === undefined) ? null : attrValue;\n            DOM.update(elem, attrName, oldValue, attrValue);\n        }\n    }\n};\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","getComponent","element","full","node","nodeType","Node","ELEMENT_NODE","getAttribute","tagName","registry","getDescriptor","get","isComponent","Ctr","connect","COMPONENT_SYMBOL","CONNECTED","disconnect","DISCONNECTED","update","name","oldValue","newValue","UPDATED","createElement","is","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","attrs","constructor","observedAttributes","indexOf","removeAttribute","dispatch","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","prop","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","undefined","addToPrivate","scope","callback","internal","PRIVATE_SYMBOL","PRIVATE_PROP","events","push","createStyle","doc","ownerDocument","rootDoc","styleElem","type","head","firstElementChild","Blank","NodeData","nodeName","key","createMap","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","Context","created","notifications","nodesCreated","deleted","nodesDeleted","handleChildren","children","forEach","child","interpolate","template","res","this","chunk","h","props","unshift","k","elementOpenEnd","DOM","patch","fn","originalPatch","bind","define","Component","config","defineProperty","render","components","toLowerCase","desc","NODE_SYMBOL","ComponentMixin","SuperClass","_SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","self","event","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","val","getterFn","_this","setterFn","validateType","changed","observe","unobserve","io","splice","i","len","length","clb","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","Number","PropertiesMixin","properties","reduce","partialProps","observed","propertyChangedCallback","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","rule","match","selector","trim","delegate","wrapCallback","addEventListener","_this3","removeEventListener","target","_this4","trigger","StyleMixin","updateCSS","classList","add","style","css","textContent","TemplateMixin","tpl","shadowRoot","innerHTML","t","arguments","Mixin","superclass","with","args","slice","c","mixin","mix","superClass","DOM_HELPERS","MIXINS","hasOwnProperty","create","has","map","initData","getData","importNode","isElement","localName","attributes","firstChild","getNamespaceForTag","tag","namespaceURI","namespace","el","createElementNS","createText","createTextNode","markCreated","markDeleted","notifyChanges","inAttributes","inSkip","assertNoUnclosedTags","openElement","root","currentElement","openTags","Error","join","assertNotInAttributes","functionName","assertNotInSkip","assertInAttributes","assertVirtualAttributesClosed","assertCloseMatchesOpenTag","assertNoChildrenDeclaredYet","previousNode","setInAttributes","previous","setInSkip","isDocumentRoot","Document","DocumentFragment","getAncestry","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","currentNode","currentParent","markFocused","focusPath","patchFactory","run","f","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","previousInAttributes","previousInSkip","retVal","patchInner","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","clearUnvisitedDOM","lastChild","enterNode","getNextNode","nextNode","exitNode","elementOpen","elementClose","skip","symbols","getNamespace","lastIndexOf","applyAttr","attrNS","setAttributeNS","applyProp","setStyleValue","setProperty","applyStyle","cssText","elStyle","applyAttributeTyped","updateAttribute","mutator","ATTRIBUTES_OFFSET","argsBuilder","statics","var_args","coreElementOpen","isNew","j","elementOpenStart","apply","coreElementClose","coreText","formatted","IDOMMixin","_superClass","_mix$with","extends","BaseComponent","_created","_removed","_changed","nodes","elem","attrValue"],"mappings":"4LASA,SAAgBA,GAAWC,SACD,kBAARA,GAWlB,QAAgBC,GAASD,SACC,gBAARA,GAWlB,QAAgBE,GAASF,SAC0B,oBAAxCG,OAAOC,UAAUC,SAASC,KAAKN,GAW1C,QAAgBO,GAAYP,SACF,mBAARA,GAWlB,QAAgBQ,GAAQR,SACbS,OAAMD,QAAQR,GAWzB,QAAgBU,GAAQV,SACbO,GAAYP,IAAgB,OAARA,GAAgBA,KAAQ,ECjCvD,QAAgBW,GAAaC,MAASC,iEAC9BD,GAAQE,SACEF,EAAQE,MAElBF,EAAQG,WAAaC,KAAKC,iBAChBL,EAAQM,aAAa,OAASN,EAAQO,SAE7CN,EAAOO,EAASC,cAAcT,GAAWQ,EAASE,IAAIV,GAWjE,QAAgBW,GAAYX,MACpBY,GAAMb,EAAaC,SAChBY,IAAQZ,YAAmBY,GAWtC,QAAgBC,GAAQb,QACVA,EAAQc,GACdd,EAAQc,GAAoBd,EAC5BW,EAAYX,YACJe,GAAWrB,KAAKM,IACjB,EAYf,QAAgBgB,GAAWhB,QACbA,EAAQc,GACdd,EAAQc,GAAoBd,EAC5BW,EAAYX,YACJiB,GAAcvB,KAAKM,IACpB,EAYf,QAAgBkB,GAAOlB,EAASmB,EAAMC,EAAUC,QAClCrB,EAAQc,GACdd,EAAQc,GAAoBd,EAC5BW,EAAYX,YACJsB,GAAS5B,KAAKM,EAASmB,EAAMC,EAAUC,IACxC,EAYf,QAAgBE,GAAcC,MACtBZ,GAAMb,EAAayB,MACnBZ,QACO,IAAIA,GAenB,QAAgBa,GAAYC,EAAQ1B,MAC5BA,EAAQE,KAAM,IACVA,GAAOF,EAAQE,QACfwB,IAAWxB,EAAKyB,YAAcD,EAAOE,mBAAqB1B,QACtDA,GAAKyB,cACOzB,EAAKyB,WAAY3B,KAE1ByB,YAAYvB,GACZW,EAAQb,UAGhB,EAYX,QAAgB6B,GAAYH,EAAQ1B,MAC5BA,EAAQE,cACD2B,YAAY7B,EAAQE,MACpBc,EAAWhB,GAgB1B,QAAgB8B,GAAaJ,EAAQ1B,EAAS+B,MACtC/B,EAAQE,KAAM,IACVA,GAAOF,EAAQE,UACT6B,EAAQ7B,KACd6B,EAAQ7B,KACR6B,EACA7B,EAAK8B,cAAgBD,QACjB7B,GAAKyB,cACM3B,KAER8B,aAAa5B,EAAM6B,GACnBlB,EAAQb,IAkB3B,QAAgBiC,GAAaP,EAAQ1B,EAAS+B,MACtC/B,EAAQE,KAAM,IACVA,GAAOF,EAAQE,WACfA,GAAKyB,cACM3B,GAEX+B,EAAQ7B,QACD+B,aAAa/B,EAAM6B,EAAQ7B,QACvB6B,IACJA,EAAQjB,MACRmB,aAAa/B,EAAM6B,KACfA,EAAQjB,OAEZmB,aAAa/B,EAAM6B,GAEvBlB,EAAQb,IAavB,QAAgBM,GAAaN,EAASmB,MAC9BnB,EAAQE,WACDF,GAAQE,KAAKI,aAAaa,GAczC,QAAgBe,GAAalC,EAASmB,EAAMgB,MACpCnC,EAAQE,KAAM,IACVA,GAAOF,EAAQE,KACfkB,EAAWlB,EAAKI,aAAaa,KAC5Be,aAAaf,EAAMgB,MACpBC,GAAQpC,EAAQqC,YAAYC,0BAC5BF,EAAMG,QAAQpB,MAAU,QACjBD,GAAOlB,EAASmB,EAAMC,EAAUe,IAcnD,QAAgBK,GAAgBxC,EAASmB,MACjCnB,EAAQE,KAAM,IACVA,GAAOF,EAAQE,KACfkB,EAAWlB,EAAKI,aAAaa,KAC5BqB,gBAAgBrB,MACjBiB,GAAQpC,EAAQqC,YAAYC,0BAC5BF,EAAMG,QAAQpB,MAAU,QACjBD,GAAOlB,EAASmB,EAAMC,EAAU,OC1QnD,QAAgBqB,GAASvC,EAAMwC,EAAQC,MAAMC,8DAAgBC,iEACpDxD,EAASqD,QACJ,IAAII,WAAU,8BAEpBC,GAAK,GAAIC,GAAYN,UACbC,iCAILzC,GAAK+C,cAAcF,GCqN9B,QAAgBG,GAAKC,SACbA,aAAgBC,GACTD,EAEJ,GAAIC,GAASD,GCnOxB,QAASE,GAASC,EAAUC,MACR,KAAZA,GAAkBD,EAASE,QAAQC,gBAC5B,MAENH,EAASE,QAAQE,kBAEPC,MAAKC,MAAML,GACpB,MAAOM,UAINN,GAWX,QAASrB,GAAa4B,EAASC,EAAM5B,MAC7B6B,GAAmBF,EAAQxD,aAAayD,MACxCC,IAAqB7B,KACP,OAAVA,GAA4B8B,SAAV9B,GAAuBA,KAAU,4BACpCA,iBAAAA,QACV,aACA,WACOD,aAAa6B,EAAM5B,aAE1B,YACOD,aAAa6B,EAAM,QAEH,QAArBC,KACCxB,gBAAgBuB,GCxCpC,QAASG,GAAaC,EAAOzB,EAAQ0B,MAC7BC,GAAWF,EAAMG,GAAgBC,IAAgBJ,EAAMG,GAAgBC,QACvEC,EAASH,EAAS3B,GAAU2B,EAAS3B,SAClC+B,KAAKL,GCHhB,QAAgBM,GAAYxE,MACpByE,GAAMzE,EAAK0E,eAAiBC,GAC5BC,EAAYH,EAAIpD,cAAc,WACxBwD,KAAO,aACP7C,aAAa,cAAehC,EAAKsB,OACvCwD,GAAOL,EAAIK,WAEXA,GAAKC,oBACAnD,aAAagD,EAAWE,EAAKC,qBAE7BxD,YAAYqD,GAEdA,ECOX,QAASI,MCFT,QAASC,GAASC,EAAUC,QAKrBjD,MAAQkD,UAQRC,iBAMAC,SAAWF,UAMXG,gBAAiB,OAOjBJ,IAAMA,OAMNK,OAASJ,UAMTK,aAAc,OAMdC,SAAU,OAMVR,SAAWA,OAKXS,KAAO,KC/Dd,QAASC,UAIFC,QAAUC,GAAcC,sBAKxBC,QAAUF,GAAcG,iBCrB/B,QAASC,GAAeC,KACXC,QAAQ,SAACC,GACVpH,EAAWoH,OAEJ3G,EAAQ2G,KACAA,GACRA,MACFA,KAKjB,QAASC,GAAYC,EAAU9D,iBACvBxD,EAAWsH,GAAW,IAClBC,GAAMD,EAAS/G,KAAKiH,KAAMhE,KAClBjD,KAAKiH,KAAMD,OAChB9G,GAAQ6G,MACNH,QAAQ,SAACM,KACFlH,OAAWkH,KAMnC,QAAgBC,GAAE7G,EAAS8G,8BAAUT,yDAC1B,eACcrG,GAEZV,EAASwH,KACNA,KACSC,QAAQD,aAKpB,GAAIE,KAAKF,GACLhH,EAAQgH,EAAME,QACVA,EAAGF,EAAME,OAIhB9G,GAAO+G,GAAejH,GACtBW,EAAcuG,GAAInH,aAAaG,SAEjCS,UAGe0F,MAENrG,GACNE,GAIf,QAAgBiH,GAAMhD,EAAOiD,EAAIzE,SACtB0E,IAAclD,EAAOqC,EAAYc,KAAKX,KAAMS,EAAIzE,ICvC3D,QAAgB4E,GAAOhH,EAASiH,EAAWC,iBAChCC,eAAeF,EAAUhI,UAAW,UAClC,iBAAMe,MAERC,EAAS+G,OAAOhH,EAASiH,EAAWC,GAa/C,QAAgBE,GAAOzH,EAAMsH,EAAWV,MAChC9G,GAAU,GAAIwH,OACb,GAAIR,KAAKF,KACFE,GAAKF,EAAME,aAEnBvF,YAAYvB,EAAMF,GACfA,ECxCX,GAAaQ,kCAYFW,EAAMP,MAAK6G,kEACTG,WAAWzG,EAAK0G,mBACb1G,0CAWEA,MACN9B,EAAS8B,SACFwF,MAAKiB,WAAWzG,EAAK0G,cACzB,IAAI1I,EAAWgC,OACb,GAAI6F,KAAKL,MAAKiB,WAAY,IACvBE,GAAOnB,KAAKiB,WAAWZ,MACvBc,EAAKlH,MAAQO,QACN2G,kBAUnB3G,MACI2G,GAAOnB,KAAKlG,cAAcU,MAC1B2G,QACOA,GAAKlH,MCvDXE,EAAmB,cACnBiH,EAAc,SACdzD,EAAiB,YZQxBvD,EAAY,oBAQZE,EAAe,uBAQfK,EAAU,quCalBH0G,EAAiB,SAACC,0DAEvBC,uBACK5D,kCAQT6D,kCACSjI,KAAKY,GAAoB6F,kBAQlCyB,8CAWAC,yCA/BwDJ,ICRxDjF,QAEJ,KAEa,GAAIsF,MAAKtF,YAAY,UAChBsF,KAAKtF,YACrB,MAAMa,KACU,SAAS0E,EAAOC,KACjBA,aACI,cACG,SACJvE,WAERwE,GAAMC,SAASC,YAAY,wBAC3BC,gBAAgBL,EAAOC,EAAO5F,QAAS4F,EAAO3F,WAAY2F,EAAOK,QAC9DJ,KAECjJ,UAAY8I,KAAKtF,YAAYxD,UZV7C,GAAM+H,GAAShI,OAAOmI,eAOhBtE,wBAMUD,6BACH2F,OACE3F,MACFvD,EAAQuD,QACDA,SAEPA,KAAOA,OACP4F,UAAY,kBAAM,QAClBC,QAAU,SAACC,SAAQA,SACnBC,SAAW,iBAAMC,GAAKhH,YACtBiH,SAAW,SAACH,QACPE,EAAKH,QAAQC,KACN,OAARA,GAAwBhF,SAARgF,GACjBE,EAAKE,aAAaJ,IAAQE,EAAKJ,UAAUE,SAQnC,IAAInG,uBACOmG,kBAAqBE,EAAKhI,wBAAyBgI,EAAKhF,MAAM3C,YAR3EJ,GAAW+H,EAAKhH,KAChBf,KAAa6H,MACR9G,MAAQ8G,IACRK,QAAQL,EAAK7H,wBAelCmI,iBAAQnF,UACAjF,EAAWiF,IAAa/E,EAAS+E,UAC5B0E,EAAErE,KAAKL,GAETuC,kBAOX6C,mBAAUpF,MACFqF,GAAK9C,KAAKmC,EAAEvG,QAAQ6B,SACpBqF,MAAO,QACFX,EAAEY,OAAOD,EAAI,GAEf9C,kBAQX2C,iBAAQjI,EAAUD,OACT,GAAIuI,GAAI,EAAGC,EAAMjD,KAAKmC,EAAEe,OAAQF,EAAIC,EAAKD,IAAK,IAC3CG,GAAMnD,KAAKmC,EAAEa,EACbtK,GAASyK,QACJ3F,MAAM2F,GAAKpK,KAAKiH,KAAKxC,MAAOwC,KAAMtF,EAAUD,KAE7CuF,KAAMtF,EAAUD,iBAShCoC,iBAAQ5C,SACG+F,MAAKxD,KAAKZ,QAAQ3B,MAAS,eAStCmJ,eAAM5I,eACGA,KAAOA,EACRwF,KAAKqD,iBAAkB,SAClBC,SAAWtD,KAAKxF,MAElBwF,kBAOXuD,iBAAQC,eACCC,aAAe9K,EAAS6K,GACzB5K,OAAO8K,OAAOF,GACdA,EACGxD,kBAQX2D,wBAAUL,oEACF5K,GAAS4K,SACJD,eAAgB,OAChBC,SAAWA,SAEXD,gBAAkBC,OAClBA,SAAWtD,KAAKxF,MAElBwF,kBAOXlE,kBAASC,eACA6H,UAAY7H,EACViE,kBAQX6D,gBAAOpG,oBACCjF,GAAWiF,UACN8E,SAAW,iBAAM9E,GAASqG,EAAKtI,SAEjCwE,kBASX+D,gBAAOtG,SACCjF,GAAWiF,UACN4E,QAAU5E,GAEZuC,kBASXgE,kBAASvG,SACDjF,GAAWiF,UACN2E,UAAY3E,GAEduC,kBAQX0C,sBAAaJ,MACLU,GAAI,EACJxG,EAAOwD,KAAKxD,QACI,IAAhBA,EAAK0G,cACE,OAEJF,EAAIxG,EAAK0G,QAAQ,IAChBZ,YAAe9F,GAAKwG,IACpBV,EAAI5G,aAAe4G,EAAI5G,cAAgBc,EAAKwG,UAErC,aAIR,eAOXiB,cAAKzG,QACIA,MAAQA,IACNA,EAAOwC,KAAKxF,UACVwF,KAAKuC,SAAS5B,KAAKX,UACnBA,KAAKyC,SAAS9B,KAAKX,oBACV,IAEbhH,EAAYgH,KAAKyD,kBACZzD,KAAKxF,MAAQwF,KAAKyD,mBA2BpC7C,GAAOrE,EAAM,4BAAwBA,QACrCqE,EAAOrE,EAAM,+BAA2BA,GAAKQ,WAC7C6D,EAAOrE,EAAM,gCAA4BA,GAAKO,YAC9C8D,EAAOrE,EAAM,+BAA2BA,GAAK2H,UCvK7C,IAAaC,GAAkB,SAAC7C,0DAQxBC,cACIpB,EAAQqC,EAAK4B,UACbjE,IACKlH,EAAQkH,QACAA,MAELA,EAAMkE,OAAO,SAACtE,EAAKuE,OAClB,GAAIjE,KAAKiE,KACNjE,GAAK9D,EAAK+H,EAAajE,UAExBN,qBAKRgB,iBAAqB,oBACjBZ,YACG,gBACI,OAEdoE,GAAW/B,EAAK9G,YAAYC,kCACvB0E,MACD9D,GAAO4D,EAAME,KACZ+C,MAAM/C,GACNuC,QAAQ,SAACrG,EAAM7B,EAAUD,SACtB+H,GAAKgC,wBAAwBjI,EAAK/B,KAAMC,EAAUC,KAErDuJ,WACCX,GAAwB/G,EAAxB+G,SAAUM,EAAcrH,EAAdqH,SACXN,IAAYiB,EAAS3I,QAAQyE,MAAO,MAChCsD,cACMtD,IAEXiD,GAAYM,MACPhB,QAAQ,WACLU,KACad,EAAKjJ,KAAM+J,EAAUd,EAAKjG,EAAK/B,OAE5CoJ,KACSpB,EAAKjJ,KAAMqK,UAlB/B,GAAIvD,KAAKF,KAALE,sCA8BbmB,yCACUA,gCACFrB,GAAQH,KAAKoE,eACZ,GAAI/D,KAAKF,GAAO,IACb5D,GAAO4D,EAAME,GACXiD,EAAa/G,EAAb+G,QACFA,KACItK,EAAYgH,KAAKzD,EAAK/B,OAClBwF,KAAKzG,KAAKkL,aAAanB,UAClB/G,EAAK/B,MAAQkC,EAASH,EAAMyD,KAAKzG,KAAKI,aAAa2J,OAG/CtD,KAAKzG,KAAM+J,EAAUtD,KAAKzD,EAAK/B,sBAe5DkH,kCAAyBtE,EAAMsH,EAAQC,eAC7BjD,mCAAyBtE,EAAMsH,EAAQC,MACzCxE,GAAQH,KAAKoE,eACZ,GAAI/D,KAAKF,GAAO,IACb5D,GAAO4D,EAAME,MACb9D,EAAK+G,WAAalG,mBACbb,EAAK/B,MAAQkC,EAASH,EAAMoI,kBAgB7CH,iDAWAI,yBAAgBC,EAAUpH,SACfuC,MAAKoE,WAAWS,GAAUjC,QAAQnF,gBAW7CqH,2BAAkBD,EAAUpH,QACnB2G,WAAWS,GAAUhC,UAAUpF,OApIiB6D,IYhFvDyD,EAAaC,QAAQnM,UAEdoM,GAAUF,EAAWE,SAC9BF,EAAWG,iBACXH,EAAWI,oBACXJ,EAAWK,mBACXL,EAAWM,kBACXN,EAAWO,sBXFTC,GAAiB,gBACjB3H,GAAe,SA0CR4H,GAAc,SAAClE,8GAOxBE,oDACUA,gCAEF3D,GAASmC,KAAKnC,sBACTwC,MACD5C,GAAW/E,EAASmF,EAAOwC,IAC3ByD,EAAKjG,EAAOwC,IACZxC,EAAOwC,OACP7H,EAAWiF,QAcL,IAAItB,WAAU,kCAbhBsJ,GAAOpF,EAAEqF,MAAMH,IACfxJ,EAAS0J,EAAK,GACdE,GAAYF,EAAK,IAAM,IAAIG,UAC3BD,IACKE,SAAS9J,EAAQ4J,EAAUlI,OAC7B,IACCqI,GAAe,SAAClE,KACP7I,OAAW6I,QAEnBrI,KAAKwM,iBAAiBhK,EAAQ+J,OAChB/J,EAAQ+J,SAflC,GAAIzF,KAAKxC,KAALwC,gBA4BboB,uDACUA,mCACF5D,GAASmC,KAAKrC,GAAgBC,mBACzByC,KACEA,GAAGV,QAAQ,SAAClC,SAAauI,GAAKzM,KAAK0M,oBAAoB5F,EAAG5C,UADhE,GAAI4C,KAAKxC,KAALwC,gBAcbwF,kBAAS9J,EAAQ4J,EAAUlI,cACnBqI,EAAe,SAAClE,UACZsE,GAAStE,EAAMsE,OACf3M,EAAO4M,EAAK5M,KACT2M,GAAUA,IAAW3M,GACpB0L,GAAQlM,KAAKmN,EAAQP,MACZ5M,OAAW6I,EAAOsE,KAEtBA,EAAOlL,iBAGnBzB,KAAKwM,iBAAiBhK,EAAQ+J,KACtB9F,KAAMjE,EAAQ+J,gBAc/BM,iBAAQrK,EAAQC,MAAMC,8DAAgBC,mEAC3BJ,GAASkE,KAAKzG,KAAMwC,EAAQC,EAAMC,EAASC,OAnFDoF,IChDnDpD,GAAU6D,SW8BHsE,GAAa,SAAC/E,0DAKnBC,kBACKiB,EAAK9G,YAAYyC,UAAW,IACzBlE,GAAMuI,EAAK9G,mBACRqF,eAAe9G,EAAK,mBAChB8D,gBAGVuI,wCAGT9E,yCACUA,kCACDjI,KAAKgN,UAAUC,IAAIxG,KAAKnF,iBAGjCyL,wBACQG,GAAQzG,KAAK0G,GACbhO,GAAS+N,UACJ/K,YAAYyC,UAAUwI,YAAcF,OAvBGnF,ICG3CsF,GAAgB,SAACtF,8GAO1BE,6BACSrI,EAAQ6G,KAAKF,gBACTkB,qBAEHQ,0CAQVgD,iCAAwBK,EAAUpK,EAAUC,eAClC8J,kCAAwBK,EAAUpK,EAAUC,GAC7CvB,EAAQ6G,KAAKF,gBACTkB,sBAabA,gBAAO6F,QACGA,GAAO7G,KAAKF,SACdtH,EAAWqO,KACP9N,KAAKiH,UACN,IAAItH,EAASmO,IACf7G,KAAK8G,YAAc9G,KAAKzG,MAAMwN,UAAYF,MACxC,KAAK1N,EAAQ0N,QACV,IAAI1K,WAAU,kCA1C2BmF,IChC9C+C,GAASnL,MAAML,UAAUwL,QAAU,SAAS5G,MAEjDuJ,GAAIhH,KACJiD,EAAM+D,EAAE9D,OACR7C,EAAI,EACJ7E,YACqB,IAArByL,UAAU/D,SACF+D,UAAU,OACf,MACI5G,EAAI4C,KAAS5C,IAAK2G,WAGjBA,EAAE3G,UAEPA,EAAI4C,EAAK5C,IACRA,IAAK2G,OACGvJ,EAASjC,EAAOwL,EAAE3G,GAAIA,EAAG2G,UAGlCxL,IC4BL0L,yBAKUC,eACKA,sDACRA,WAAaA,qBAOtBC,mBAEQC,MAAUC,MAAMvO,KAAKkO,UAAW,SAC7B5C,IAAOtL,KAAKsO,EAAM,SAACE,EAAGC,SAAUA,GAAMD,IAAIvH,KAAKmH,kBAQjDM,GAAM,SAACC,SAAe,IAAIR,IAAMQ,IC1DhCnH,GAAMoH,EAQNC,sFdHPC,GAAiBjP,OAAOC,UAAUgP,cASxCtJ,GAAM1F,UAAYD,OAAOkP,OAAO,KAShC,IAAMC,IAAM,SAASC,EAAKrL,SACjBkL,IAAe9O,KAAKiP,EAAKrL,IAQ5BgC,GAAY,iBACT,IAAIJ,ICkDP0J,GAAW,SAAS1O,EAAMkF,EAAUC,MAClC1C,GAAO,GAAIwC,GAASC,EAAUC,YACpC,qBAA+B1C,EACxBA,GAUHkM,GAAU,SAAS3O,aACZA,GACJA,EAAA,sBASH4O,GAAa,QAAbA,GAAsB5O,OACtBA,EAAA,yBAIE6O,GAAY7O,YAAgByL,SAC5BvG,EAAW2J,EAAY7O,EAAK8O,UAAY9O,EAAKkF,SAC7CC,EAAM0J,EAAY7O,EAAKI,aAAa,OAAS,KAC7CqC,EAAOiM,GAAS1O,EAAMkF,EAAUC,MAElCA,OACMnF,EAAKyB,YAAY+D,OAAOL,GAAOnF,GAGrC6O,MAMG,GALCE,GAAa/O,EAAK+O,WAClB7M,EAAQO,EAAKP,MACboD,EAAW7C,EAAK6C,SAChBD,EAAW5C,EAAK4C,SAEboE,EAAI,EAAGA,EAAIsF,EAAWpF,OAAQF,GAAK,EAAG,IACvC5F,GAAOkL,EAAWtF,GAClBxI,EAAO4C,EAAK5C,KACZgB,EAAQ4B,EAAK5B,QAEbhB,GAAQgB,IACLhB,GAAQ8C,SACRQ,KAAKtD,KACLsD,KAAKtC,OAIb,GAAIoE,GAAQrG,EAAKgP,WAAY3I,EAAOA,EAAQA,EAAMvE,cAC1CuE,Kc/HT4I,GAAqB,SAASC,EAAK1N,SAC3B,QAAR0N,EACK,6BAGwB,kBAA7BP,GAAQnN,GAAQ0D,SACX,KAGF1D,EAAO2N,cAYV9N,GAAgB,SAASoD,EAAKjD,EAAQ0N,EAAK/J,MACzCiK,GAAYH,GAAmBC,EAAK1N,GACtC6N,kBAEAD,EACG3K,EAAI6K,gBAAgBF,EAAWF,GAE/BzK,EAAIpD,cAAc6N,MAGhBG,EAAIH,EAAK/J,GAEXkK,GASHE,GAAa,SAAS9K,MACpBzE,GAAOyE,EAAI+K,eAAe,cACvBxP,EAAM,QAAS,MACjBA,GCxDH8F,iBAMU,kBAQA,KdQhBF,GAAQtG,UAAUmQ,YAAc,SAASzP,GACnCyG,KAAKZ,cACFA,QAAQtB,KAAKvE,IAQtB4F,EAAQtG,UAAUoQ,YAAc,SAAS1P,GACnCyG,KAAKT,cACFA,QAAQzB,KAAKvE,IAQtB4F,EAAQtG,UAAUqQ,cAAgB,WAC5BlJ,KAAKZ,SAAWY,KAAKZ,QAAQ8D,OAAS,MAC1B5D,aAAaU,KAAKZ,SAG9BY,KAAKT,SAAWS,KAAKT,QAAQ2D,OAAS,MAC1B1D,aAAaQ,KAAKT,Se3CpC,IAAI4J,KAAe,EAQfC,IAAS,EAoBPC,GAAuB,SAASC,EAAaC,MAC7CD,IAAgBC,UAIhBC,GAAiBF,EACfG,KACCD,GAAkBA,IAAmBD,KACjCzL,KAAK0L,EAAe/K,SAASyC,iBACrBsI,EAAexO,gBAG5B,IAAI0O,OAAM,sCACZD,EAASE,KAAK,SAQdC,GAAwB,SAASC,MACjCV,QACI,IAAIO,OAAMG,EAAe,0EAU7BC,GAAkB,SAASD,MAC3BT,QACI,IAAIM,OAAMG,EAAe,mEAU7BE,GAAqB,SAASF,OAC7BV,QACG,IAAIO,OAAMG,EAAe,4DAS7BG,GAAgC,cAChCb,QACI,IAAIO,OAAM,sEAWdO,GAA4B,SAASxL,EAAUgK,MAC/ChK,IAAagK,OACT,IAAIiB,OAAM,6BAA+BjB,EAAM,UACjDhK,EAAW,gBAWbyL,GAA8B,SAASL,EAAcM,MACpC,OAAjBA,OACI,IAAIT,OAAMG,EAAe,2EAuC7BO,GAAkB,SAAS5O,MACzB6O,GAAWlB,aACF3N,EACR6O,GASHC,GAAY,SAAS9O,MACnB6O,GAAWjB,aACR5N,EACF6O,GCxKHE,GAAiB,SAAShR,SAIvBA,aAAgBiR,WAAYjR,YAAgBkR,mBAS/CC,GAAc,SAASnR,EAAMgQ,UAC3BoB,MACFC,EAAMrR,EAEHqR,IAAQrB,KACJzL,KAAK8M,KACRA,EAAI5P,iBAGL2P,IAQHE,GAAU,SAAStR,UACnBqR,GAAMrR,EACNuR,EAAOF,EAEJA,KACEA,IACDA,EAAI5P,iBAGL8P,IASHC,GAAmB,SAASxR,MAC1BgQ,GAAOsB,GAAQtR,SACdgR,IAAehB,GAAQA,EAAKyB,cAAgB,MAW/CC,GAAiB,SAAS1R,EAAMgQ,MAC9ByB,GAAgBD,GAAiBxR,SAElCyR,IAAkBzR,EAAK2R,SAASF,GAI9BN,GAAYM,EAAezB,OAW9B4B,GAAa,SAASnQ,EAAYzB,EAAM6R,UACtCC,GAAsB9R,EAAK8B,YAC7BuP,EAAMQ,EAEHR,IAAQrR,GAAM,IACb+R,GAAOV,EAAIvP,cACNF,aAAayP,EAAKS,KACvBC,ICpENnO,GAAU,KAGVoO,GAAc,KAGdC,GAAgB,KAGhBxN,GAAM,KAOJyN,GAAc,SAASC,EAAWzM,OACjC,GAAI+D,GAAI,EAAGA,EAAI0I,EAAUxI,OAAQF,GAAK,KACjC0I,EAAU1I,IAAI/D,QAAUA,GAY9B0M,GAAe,SAASC,MAWtBC,GAAI,SAAStS,EAAMkH,EAAIzE,MACrB8P,GAAc3O,GACd4O,EAAU/N,GACVgO,EAAkBT,GAClBU,EAAoBT,GACtBU,GAAuB,EACvBC,GAAiB,KAEX,GAAIhN,MACR5F,EAAK0E,iBACK1E,EAAKyB,aAGIoP,IAAgB,KACtBE,IAAU,MAGvBoB,GAAYT,GAAe1R,EAAMiS,OAC3BE,GAAW,MACjBU,GAASR,EAAIrS,EAAMkH,EAAIzE,aACjB0P,GAAW,WAILQ,MACNC,MAGJjD,mBAEE4C,KACJC,KACQC,KACEC,EAETG,SAEFP,IAeHQ,GAAaV,GAAa,SAASpS,EAAMkH,EAAIzE,aACnCzC,SAGXyC,WAIoBuP,GAAahS,GAG7BA,IAmDH0L,GAAU,SAASqH,EAAW7N,EAAUC,MACtC1C,GAAOkM,GAAQoE,SAKd7N,KAAazC,EAAKyC,UAAYC,GAAO1C,EAAK0C,KAW7C6N,GAAe,SAAS9N,EAAUC,OAClC6M,KAAetG,GAAQsG,GAAa9M,EAAUC,OAI5C8N,GAAatE,GAAQsD,IACrBiB,EAAkBlB,IAAerD,GAAQqD,IACzCxM,EAASyN,EAAWzN,OACtBxF,YAGAmF,EAAK,IACDgO,GAAU3N,EAAOL,EACnBgO,KACEzH,GAAQyH,EAASjO,EAAUC,KACtBgO,EACEA,IAAYnB,MACbtC,YAAYyD,MAERlB,GAAekB,EAAS3N,IAMrCxF,MACc,UAAbkF,EACKqK,GAAW9K,IAEXpD,GAAcoD,GAAKwN,GAAe/M,EAAUC,GAGjDA,MACKA,GAAOnF,MAGRyP,YAAYzP,IAMlB2O,GAAQ3O,GAAM0F,WAELuM,GAAejS,EAAMgS,IACvBkB,GAAmBA,EAAgB/N,MAAQ+N,EAAgBxN,YAItD3D,aAAa/B,EAAMgS,MACtBvM,aAAc,MAEX7D,aAAa5B,EAAMgS,OAGrBhS,IASV2B,GAAc,SAAS3B,EAAMqG,EAAOb,KACnC7D,YAAY0E,MACTqJ,YAAgCrJ,MAElClB,GAAMwJ,GAAQtI,GAAOlB,GACvBA,UACKK,GAAOL,IASZiO,GAAoB,cAClBpT,GAAOiS,GACPxP,EAAOkM,GAAQ3O,GACfwF,EAAS/C,EAAK+C,OACdC,EAAchD,EAAKgD,YACrBY,EAAQrG,EAAKqT,UACblO,YAEAkB,IAAU2L,KAAevM,QAItBY,IAAU2L,OACHhS,EAAMqG,EAAOb,KACjBxF,EAAKqT,cAIV5N,EAAa,KACXN,IAAOK,KACFA,EAAOL,GACXkB,EAAM5E,aAAezB,OACf0P,YAAYrJ,SACbb,GAAOL,MAIbM,aAAc,KAQjB6N,GAAY,cACAtB,MACF,MAOVuB,GAAc,iBACdvB,IACKA,GAAYlQ,YAEZmQ,GAAcjD,YAQnBwE,GAAW,cACDD,MAOVE,GAAW,mBAGDxB,MACEA,GAAcxQ,YAc1BiS,GAAc,SAASxE,EAAK/J,kBAEnB+J,EAAK/J,QAEX,IAUHwO,GAAe,sBAEP,QAIL,IAUHhO,GAAO,0BAEE,QAAS,MACf,IAiCHiO,GAAO,cAEmB,OAAQ5B,QAC1B,MAEEC,GAAcoB,WC1axBQ,YACK,aCULC,GAAe,SAAS7S,SACQ,KAAhCA,EAAK8S,YAAY,OAAQ,GACpB,uCAG6B,IAAlC9S,EAAK8S,YAAY,SAAU,GACtB,uCAaLC,GAAY,SAAS3E,EAAIpO,EAAMgB,MACtB,MAATA,IACCK,gBAAgBrB,OACd,IACCgT,GAASH,GAAa7S,EACxBgT,KACCC,eAAeD,EAAQhT,EAAMgB,KAE7BD,aAAaf,EAAMgB,KAWtBkS,GAAY,SAAS9E,EAAIpO,EAAMgB,KAChChB,GAAQgB,GAWPmS,GAAgB,SAASlH,EAAOlK,EAAMf,GACtCe,EAAKX,QAAQ,MAAQ,IACjBgS,YAAYrR,EAA4Bf,KAExCe,GAAQf,GAaZqS,GAAa,SAASjF,EAAIpO,EAAMiM,MACf,gBAAVA,KACNA,MAAMqH,QAAUrH,MACd,GACFA,MAAMqH,QAAU,MACbC,GAAUnF,EAAGnC,MACbhO,EAA4CgO,MAE7C,GAAMlK,KAAQ9D,GACbsP,GAAItP,EAAK8D,OACGwR,EAASxR,EAAM9D,EAAI8D,MAenCyR,GAAsB,SAASpF,EAAIpO,EAAMgB,MACvC4C,sBAAc5C,iBAAAA,EAEP,YAAT4C,GAA8B,aAATA,KACbwK,EAAIpO,EAAMgB,MAEVoN,EAAIpO,EAA8CgB,IAW1DyS,GAAkB,SAASrF,EAAIpO,EAAMgB,MACnCQ,GAAOkM,GAAQU,GACfnN,EAAQO,EAAKP,SAEfA,EAAMjB,KAAUgB,MAId0S,GAAU5F,GAAW9N,IAAS8N,GAAW8E,GAAQ7J,WAC/CqF,EAAIpO,EAAMgB,KAEZhB,GAAQgB,IAQV8M,GAAa3J,IAInB2J,IAAW8E,GAAQ7J,SAAWyK,GAE9B1F,GAAA,MAAsBuF,EC7HtB,IAAMM,IAAoB,EAQpBC,MAeAnB,GAAc,SAASxE,EAAK/J,EAAK2P,EAASC,MAEtB,kBACN,kBAGZ/U,GAAOgV,GAAgB9F,EAAK/J,GAC5B1C,EAAOkM,GAAQ3O,OAEhByC,EAAK8C,eAAgB,IACpBuP,MACG,GAAIrL,GAAI,EAAGA,EAAIqL,EAAQnL,OAAQF,GAAK,EAAG,IACpCxI,GAA6B6T,EAAQrL,GACrCxH,EAAQ6S,EAAQrL,EAAI,MACVzJ,EAAMiB,EAAMgB,KAM3BsD,gBAAiB,SASlBF,GAAW5C,EAAK4C,SAChBC,EAAW7C,EAAK6C,SAChB2P,GAAS5P,EAASsE,OACpBF,EAAImL,GACJM,EAAI,EAEDzL,EAAIiE,UAAU/D,OAAQF,GAAK,EAAGyL,GAAK,EAAG,IACrCrR,GAAO6J,UAAUjE,MACnBwL,IACOC,GAAKrR,IACLA,GAAQE,WACZ,IAAIsB,EAAS6P,KAAOrR,WAIrB5B,GAAQyL,UAAUjE,EAAI,IACxBwL,GAAS5P,EAAS6P,EAAI,KAAOjT,OACtBiT,EAAI,GAAKjT,KACFjC,EAAM6D,EAAM5B,OAI5BwH,EAAIiE,UAAU/D,QAAUuL,EAAI7P,EAASsE,OAAQ,MACxCF,EAAIiE,UAAU/D,OAAQF,GAAK,EAAGyL,GAAK,IAC/BA,GAAKxH,UAAUjE,OAGtByL,EAAI7P,EAASsE,WACNA,OAASuL,GAMfzL,EAAI,EAAGA,EAAIpE,EAASsE,OAAQF,GAAK,EAAG,IACjCxI,GAA6BoE,EAASoE,GACtCxH,EAAQoD,EAASoE,EAAI,KAClBxI,GAAQgB,MAGd,GAAM4B,KAAQyB,MACDtF,EAAM6D,EAAMyB,EAASzB,MAC5BA,GAAQE,aAId/D,IAkBHmV,GAAmB,SAASjG,EAAK/J,EAAK2P,MAElB,wBACN,MAGN,GAAK5F,KACL,GAAK/J,KACL,GAAK2P,GAWbjR,GAAO,SAAS5C,EAAMgB,MAEL,WAGTsC,KAAKtD,MACLsD,KAAKtC,IAQb8E,GAAiB,cAEA,sBACH,MAGZ/G,GAAO0T,GAAY0B,MAAM,KAAMP,cACzBlL,OAAS,EACd3J,GAUH2T,GAAe,SAASzE,MAEJ,mBAGlBlP,GAAOqV,eAGe1G,GAAQ3O,GAAMkF,SAAUgK,GAG7ClP,GAiCH2F,GAAO,SAAS1D,EAAO8S,MAEH,WACN,WAGZ/U,GAAOsV,KACP7S,EAAOkM,GAAQ3O,MAEjByC,EAAKkD,OAAS1D,EAAO,GAClB0D,KAA6B1D,MAG7B,GADDsT,GAAYtT,EACPwH,EAAI,EAAGA,EAAIiE,UAAU/D,OAAQF,GAAK,EAAG,IAKtCvC,GAAKwG,UAAUjE,KACTvC,EAAGqO,KAGZ9S,KAAO8S,QAGPvV,4CC9QIwV,GAAY,SAACrH,0DAkBlBsH,uBACKzV,KAAOwI,SAASnH,cAAc4H,EAAK3H,0DAVjCmF,MAAKoB,iBAGP7H,KACAY,GAAoB6F,UACpBoB,GAAe7H,kBAQxByH,gBAAOlB,gBACQA,GAAYE,KAAKF,SACxBtH,EAAWsH,mBACP+G,GAAM/G,EAASa,UACR,iBAAMH,GAAMsD,EAAKgD,YAAchD,EAAKvK,KAAMsN,mBAEnD7F,iBAAOlB,OA5BkC4H,qDnB0F/CuH,cACI9N,EAAOtH,EAASC,cAAc0I,EAAK9G,aACnCoF,EAASK,EAAKL,gBACbvH,KAAOwI,SAASnH,cACjBkG,EAAOoO,QAAUpO,EAAOoO,QAAU/N,EAAKtG,IAEvCiG,EAAOoO,WACF3V,KAAKgC,aAAa,KAAM4F,EAAKtG,wBAfX4M,KAAML,KACrCQ,GAAOvG,eACPuG,GAAOzD,gBACPyD,GAAOvB,WACPuB,GAAOpC,YACPoC,GAAOhB,eoBnFXgB,IAIOmH,UAAYA,EAEnB,IAGaI,+FAAsB1H,KAAML,KACrCQ,GAAOvG,eACPuG,GAAOzD,gBACPyD,GAAOvB,WACPuB,GAAOpC,YACPoC,GAAOhB,cACPmI,KCnBAK,GAAW/P,GAAcC,aACzB+P,GAAWhQ,GAAcG,aACzB8P,GAAWhH,GAAW8E,GAAQ7J,QAElClE,IAAcC,aAAe,SAASiQ,KAC5B5P,QAAQ,SAACpG,MACPU,GAAMsG,GAAInH,aAAaG,MACvBU,EAAK,IACDuV,GAAO,GAAIvV,KACVV,KAAOA,KACRW,QAAQsV,MAIhBJ,OACSG,IAIjBlQ,GAAcG,aAAe,SAAS+P,KAC5B5P,QAAQ,SAACpG,GACPA,EAAKY,OACDE,WAAWd,EAAKY,MAIxBkV,OACSE,IAIjBjH,GAAW8E,GAAQ7J,SAAW,SAAShK,EAAM+J,EAAUmM,MAC/ChV,GAAWlB,EAAKI,aAAa2J,EAE7BgM,QACS/V,EAAM+J,EAAUmM,MAEzBD,GAAOjW,EAAKY,MACZqV,EAAM,IACF/T,GAAQ+T,EAAK9T,YAAYC,sBACzBF,GAAMG,QAAQ0H,MAAc,MACDhG,SAAdmS,EAA2B,KAAOA,KAC3ClV,OAAOiV,EAAMlM,EAAU7I,EAAUgV"}