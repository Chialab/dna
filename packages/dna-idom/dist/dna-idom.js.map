{"version":3,"file":"dna-idom.js","sources":["node_modules/incremental-dom/src/util.js","node_modules/incremental-dom/src/node_data.js","node_modules/incremental-dom/src/context.js","node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/nodes.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/lib/style.js","node_modules/@dnajs/core/src/lib/shim.js","node_modules/@dnajs/core/index.js","node_modules/incremental-dom/src/nodes.js","node_modules/incremental-dom/src/notifications.js","node_modules/incremental-dom/src/assertions.js","node_modules/incremental-dom/src/dom_util.js","node_modules/incremental-dom/src/core.js","node_modules/incremental-dom/src/symbols.js","node_modules/incremental-dom/src/attributes.js","node_modules/incremental-dom/src/virtual_elements.js","packages/dna-idom/src/mixins/idom.js","node_modules/@dnajs/core/src/polyfills/custom-event.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/polyfills/matches.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/polyfills/reduce.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/library-helpers.js","packages/dna-idom/src/idom-observer.js","packages/dna-idom/index.js"],"sourcesContent":["/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","export function isFunction(fn) {\n    return typeof fn === 'function';\n}\n\nexport function isString(str) {\n    return typeof str === 'string';\n}\n\nexport function isObject(obj) {\n    return typeof obj === 'object';\n}\n\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { registry } from './registry.js';\n\nconst CONNECTED = 'connectedCallback';\nconst DISCONNECTED = 'disconnectedCallback';\nconst UPDATED = 'attributeChangedCallback';\n\nexport function getComponent(node) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n        let is = node.getAttribute('is') || node.tagName;\n        return registry.get(is);\n    }\n    return registry.get(node);\n}\n\nexport function isComponent(node) {\n    let desc = getComponent(node);\n    return desc && (node instanceof desc.Ctr);\n}\n\nexport function connect(node) {\n    if (isComponent(node)) {\n        node[CONNECTED].call(node);\n        return true;\n    }\n}\n\nexport function disconnect(node) {\n    if (isComponent(node)) {\n        node[DISCONNECTED].call(node);\n        return true;\n    }\n}\n\nexport function update(node, name, oldValue, newValue) {\n    if (isComponent(node)) {\n        node[UPDATED].call(node, name, oldValue, newValue);\n        return true;\n    }\n}\n\nexport function bind(node, Ctr) {\n    Ctr = Ctr || getComponent(node).Ctr;\n    node.__proto__ = Ctr.prototype;\n    Object.defineProperty(node, 'constructor', {\n        value: Ctr,\n        configurable: true,\n        writable: true,\n    });\n    Ctr.call(node);\n}\n\nexport function create(node, descriptor) {\n    descriptor = descriptor || getComponent(node);\n    if (descriptor) {\n        bind(node, descriptor.Ctr);\n        return true;\n    }\n    return false;\n}\n\nexport function createElement(is) {\n    let descriptor = getComponent(is);\n    if (descriptor) {\n        return new descriptor.Ctr();\n    }\n}\n\nexport function appendChild(parent, node) {\n    if (parent !== node.parentNode || parent.lastElementChild !== node) {\n        if (node.parentNode) {\n            removeChild(node.parentNode, node);\n        }\n        parent.appendChild(node);\n        return connect(node);\n    }\n    return false;\n}\n\nexport function removeChild(parent, node) {\n    parent.removeChild(node);\n    return disconnect(node);\n}\n\nexport function insertBefore(parent, node, refNode) {\n    parent.insertBefore(node, refNode);\n    return connect(node);\n}\n\nexport function replaceChild(parent, node, refNode) {\n    parent.replaceChild(node, refNode);\n    disconnect(refNode);\n    return connect(node);\n}\n\nexport function setAttribute(node, name, value) {\n    let oldValue = node.getAttribute(name);\n    node.setAttribute(name, value);\n    let attrs = node.constructor.observedAttributes || [];\n    if (attrs.indexOf(name) !== -1) {\n        update(node, name, oldValue, value);\n        return true;\n    }\n    return false;\n}\n\nexport function removeAttribute(node, name) {\n    let oldValue = node.getAttribute(name);\n    node.removeAttribute(name);\n    let attrs = node.constructor.observedAttributes || [];\n    if (attrs.indexOf(name) !== -1) {\n        update(node, name, oldValue, null);\n        return true;\n    }\n    return false;\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\nconst define = Object.defineProperty;\n\nclass Property {\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if (this.validateType(val)) {\n                if (this.validator(val)) {\n                    let oldValue = this.value;\n                    if (oldValue !== val) {\n                        this.value = val;\n                        this.changed(val, oldValue);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n\n    observe(fn) {\n        if (isFunction(fn) || isString(fn)) {\n            this._.push(fn);\n        }\n        return this;\n    }\n\n    unobserve(fn) {\n        let io = this._.indexOf(fn);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n        }\n        return this;\n    }\n\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n\n    validateType(val) {\n        if (val === null || val === undefined) {\n            return true;\n        }\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        // eslint-disable-next-line\n        throw new TypeError(\n            `Invalid \\`${val}\\` value for \"${this.name}\" property${this.scope ? ` for ${this.scope.is}` : ''}.`\n        );\n    }\n\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, PropertiesMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(PropertiesMixin) {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * On `created` callback, apply attributes to properties.\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k).init(this);\n            let { attrName, eventName } = prop;\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this, eventName);\n                    }\n                });\n            }\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * On `attributeChanged` callback, sync attributes with properties.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        this.properties[propName].observe(callback);\n    }\n};\n","let doc = document;\n\nexport function createStyle(id) {\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${id}`);\n    let head = doc.head;\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n\n/**\n * Add `<style>` tag for the component.\n * @param {String} styleElem The CSS style element.\n * @param {String} style A CSS string.\n * @return {HTMLStyleElement} the style tag created.\n */\nexport function importStyle(styleElem, style) {\n    if (style !== styleElem.textContent) {\n        styleElem.textContent = style;\n        return true;\n    }\n    return false;\n}\n","import { registry } from './registry.js';\nimport { isString } from './typeof.js';\n\nfunction isNew(node) {\n    try {\n        return !isString(node.outerHTML);\n    } catch (ex) {\n        return true;\n    }\n}\n\nexport function shim(Original) {\n    class Polyfilled {\n        constructor() {\n            if (!isNew(this)) {\n                return this;\n            }\n            let desc = registry.get(this.constructor);\n            let config = desc.config;\n            // Find the tagname of the constructor and create a new element with it\n            let element = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            element.__proto__ = desc.Ctr.prototype;\n            if (config.extends) {\n                element.setAttribute('is', desc.is);\n            }\n            return element;\n        }\n    }\n    Polyfilled.prototype = Object.create(Original.prototype, {\n        constructor: {\n            value: Polyfilled,\n            configurable: true,\n            writable: true,\n        },\n    });\n    return Polyfilled;\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, prop, shim, HELPERS, DOM, MIXINS } from './src/library-helpers.js';\nimport { registry } from './src/lib/registry.js';\n\nexport { mix, prop, shim, HELPERS, DOM, MIXINS };\nexport { registry };\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    DOM.appendChild(node, element);\n    return element;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n *\n * @example\n * my-component.js\n * ```js\n * import { BaseComponent } from 'dna/component';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n */\nexport class BaseComponent extends mix(\n    shim(self.HTMLElement)\n).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {}\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nlet inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nconst assertInPatch = function(functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nconst assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nconst assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nconst assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nconst assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nconst assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nconst assertCloseMatchesOpenTag = function(nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close \"' + tag + '\" but \"' +\n        nodeName + '\" was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nconst assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nconst assertPatchElementNoExtras = function(\n    startNode,\n    currentNode,\n    expectedNextNode,\n    expectedPrevNode) {\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInAttributes = function(value) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInSkip = function(value) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","import * as IDOM from 'incremental-dom';\n\nexport const IDomTemplateMixin = (superClass) => class extends superClass {\n    render() {\n        if (this.template && typeof this.template === 'function') {\n            IDOM.patch(this, this.template);\n        } else {\n            super.render();\n        }\n    }\n};\n","let CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    let ev = new self.CustomEvent('test');\n    CustomEvent = self.CustomEvent;\n} catch(ex) {\n    CustomEvent = function(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined,\n        };\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\nexport { CustomEvent };\n","import { isFunction, isString } from './typeof.js';\n\nexport const registry = {\n    components: {},\n    define(name, Ctr, config = {}) {\n        this.components[name.toLowerCase()] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    get(name) {\n        if (isString(name)) {\n            return this.components[name.toLowerCase()];\n        } else if (isFunction(name)) {\n            for (let k in this.components) {\n                let desc = this.components[k];\n                if (desc.Ctr === name) {\n                    return desc;\n                }\n            }\n        }\n    },\n};\n","export const ComponentMixin = (SuperClass) => class extends SuperClass {\n    get is() {\n        return this.getAttribute('is') || this.localName;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     */\n    connectedCallback() {}\n    /**\n     * Fires when an instance was detached from the document.\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.matchesSelector ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n *\n * @example\n * my-component.js\n * ```js\n * import { EventsMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(EventsMixin) {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    this.addEventListener(evName, (ev) => {\n                        callback.call(this, ev, this);\n                    });\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    delegate(evName, selector, callback) {\n        this.addEventListener(evName, (event) => {\n            let target = event.target;\n            while (target && target !== this) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        });\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","import { createStyle, importStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { StyleMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(StyleMixin) {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr.prototype, 'styleElem', {\n                value: createStyle(this.is),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (style) {\n            importStyle(this.styleElem, style);\n        }\n    }\n};\n","import { isFunction, isString } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, TemplateMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(TemplateMixin) {\n *   get template() {\n *     return '<h1>${this.name}</h1>';\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        if (this.template) {\n            let props = this.properties;\n            if (props) {\n                let callback = () => {\n                    this.render();\n                };\n                for (let k in props) {\n                    props[k].observe(callback);\n                }\n            }\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.template) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        /* istanbul ignore else */\n        if (isFunction(tpl)) {\n            tpl();\n        } else if (isString(tpl)) {\n            this.innerHTML = tpl;\n        } else {\n            throw new Error('Invalid template property.');\n        }\n    }\n};\n","/* eslint-disable prefer-rest-params */\nexport const reduce = Array.prototype.reduce || function(callback /*, initialValue*/ ) {\n    'use strict';\n    let t = this;\n    let len = t.length;\n    let k = 0;\n    let value;\n    if (arguments.length === 2) {\n        value = arguments[1];\n    } else {\n        while (k < len && !(k in t)) {\n            k++;\n        }\n        value = t[k++];\n    }\n    for (; k < len; k++) {\n        if (k in t) {\n            value = callback(value, t[k], k, t);\n        }\n    }\n    return value;\n};\n","import { reduce } from '../polyfills/reduce.js';\n/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nclass Mixin {\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce.call(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\nexport const mix = (superClass) => new Mixin(superClass);\n","import { dispatch } from './lib/dispatch.js';\nimport * as DOM_HELPERS from './lib/nodes.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\nexport const DOM = DOM_HELPERS;\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport const HELPERS = {\n    dispatch,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport { shim } from './lib/shim.js';\nexport * from './lib/typeof.js';\n","import * as IDOM from 'incremental-dom';\nimport { DOM } from '@dnajs/core/src/library-helpers.js';\n\nconst notifications = IDOM.notifications;\nconst attributes = IDOM.attributes;\nconst symbols = IDOM.symbols;\nlet _created = notifications.nodesCreated;\nlet _removed = notifications.nodesDeleted;\nlet _changed = attributes[symbols.default];\n\nnotifications.nodesCreated = function(nodes) {\n    nodes.forEach((node) => {\n        if (!DOM.isComponent(node)) {\n            if (DOM.create(node)) {\n                DOM.connect(node);\n            }\n        }\n    });\n    /* istanbul ignore if */\n    if (_created) {\n        _created(nodes);\n    }\n};\n\nnotifications.nodesDeleted = function(nodes) {\n    nodes.forEach((node) => DOM.disconnect(node));\n    /* istanbul ignore if */\n    if (_removed) {\n        _removed(nodes);\n    }\n};\n\nattributes[symbols.default] = function(node, attrName, attrValue) {\n    if (DOM.isComponent(node)) {\n        let oldValue = node.getAttribute(attrName);\n        let attrs = node.constructor.observedAttributes || [];\n        if (attrs.indexOf(attrName) !== -1) {\n            attrValue = (attrValue === undefined) ? null : attrValue;\n            setTimeout(() =>\n                DOM.update(node, attrName, oldValue, attrValue)\n            );\n        }\n    }\n    /* istanbul ignore if */\n    if (_changed) {\n        _changed(node, attrName, attrValue);\n    }\n};\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Incremental DOM notifications.\n */\nimport * as IDOM from 'incremental-dom';\nimport { IDomTemplateMixin } from './src/mixins/idom.js';\nimport { mix, prop, shim, HELPERS, DOM, MIXINS } from '@dnajs/core/src/library-helpers.js';\nimport { BaseComponent as OriginalComponent } from '@dnajs/core';\nimport './src/idom-observer.js';\n\nMIXINS.IDomTemplateMixin = IDomTemplateMixin;\n\nexport { mix, prop, shim, HELPERS, DOM, MIXINS };\nexport { registry, render, define } from '@dnajs/core';\nexport { IDOM };\nexport class BaseComponent extends mix(OriginalComponent).with(IDomTemplateMixin) {}\n"],"names":["Blank","NodeData","nodeName","key","attrs","createMap","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","Context","created","notifications","nodesCreated","deleted","nodesDeleted","isFunction","fn","isString","str","isObject","obj","isUndefined","isArray","Array","dispatch","node","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","getComponent","nodeType","Node","ELEMENT_NODE","is","getAttribute","tagName","registry","get","isComponent","desc","Ctr","connect","CONNECTED","call","disconnect","DISCONNECTED","update","name","oldValue","newValue","UPDATED","bind","__proto__","prototype","defineProperty","create","descriptor","createElement","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","replaceChild","setAttribute","value","constructor","observedAttributes","indexOf","removeAttribute","prop","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","undefined","createStyle","id","styleElem","doc","type","head","firstElementChild","importStyle","style","textContent","isNew","outerHTML","shim","Original","Polyfilled","this","config","element","document","extends","Object","define","Component","render","props","k","hasOwnProperty","has","map","initData","getData","importNode","isElement","Element","localName","attributes","i","length","push","child","firstChild","nextSibling","getNamespaceForTag","tag","namespaceURI","namespace","el","createElementNS","createText","createTextNode","markCreated","markDeleted","notifyChanges","isDocumentRoot","Document","DocumentFragment","getAncestry","root","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","currentNode","currentParent","markFocused","focusPath","patchFactory","run","f","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","ownerDocument","retVal","patchInner","patchOuter","startNode","matches","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","clearUnvisitedDOM","lastChild","enterNode","getNextNode","nextNode","exitNode","elementOpen","elementClose","currentElement","currentPointer","skip","skipNode","symbols","getNamespace","lastIndexOf","applyAttr","attrNS","setAttributeNS","applyProp","setStyleValue","setProperty","applyStyle","cssText","elStyle","applyAttributeTyped","updateAttribute","mutator","default","ATTRIBUTES_OFFSET","argsBuilder","statics","var_args","coreElementOpen","j","arguments","elementOpenStart","elementOpenEnd","apply","coreElementClose","elementVoid","coreText","formatted","IDomTemplateMixin","superClass","template","self","event","params","evt","createEvent","initCustomEvent","detail","components","toLowerCase","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","_","validator","_setter","val","getterFn","_this","setterFn","validateType","changed","observe","unobserve","io","splice","len","clb","scope","named","attrRequested","attrName","initValue","defaultValue","freeze","attribute","eventName","getter","callback","_this2","setter","validate","init","Number","PropertiesMixin","_SuperClass","properties","reduce","res","partialProps","hasAttribute","oldVal","newVal","observeProperty","propName","ELEM_PROTO","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","events","rule","match","selector","trim","delegate","addEventListener","target","trigger","StyleMixin","updateCSS","classList","add","css","TemplateMixin","tpl","Error","innerHTML","t","Mixin","superclass","with","args","slice","c","mixin","mix","DOM","DOM_HELPERS","MIXINS","HELPERS","BaseComponent","HTMLElement","IDOM","_created","_removed","_changed","nodes","forEach","attrValue","OriginalComponent"],"mappings":"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"}