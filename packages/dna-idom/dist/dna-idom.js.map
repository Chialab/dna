{"version":3,"file":"dna-idom.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/lib/dom.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/polyfills/custom-event.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/polyfills/matches.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/lib/style.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/polyfills/reduce.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/lib/shim.js","node_modules/@dnajs/core/src/core.js","node_modules/incremental-dom/src/util.js","node_modules/incremental-dom/src/node_data.js","node_modules/incremental-dom/src/nodes.js","node_modules/incremental-dom/src/notifications.js","node_modules/incremental-dom/src/context.js","node_modules/incremental-dom/src/assertions.js","node_modules/incremental-dom/src/dom_util.js","node_modules/incremental-dom/src/core.js","node_modules/incremental-dom/src/symbols.js","node_modules/incremental-dom/src/attributes.js","node_modules/incremental-dom/src/virtual_elements.js","node_modules/incremental-dom/index.js","node_modules/@dnajs/core/index.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n","import { isFunction, isString } from './typeof.js';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace registry\n * @memberof! DNA.\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @type {Object}\n     */\n    components: {},\n    /**\n     * Register a new component.\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        this.components[name.toLowerCase()] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component descriptor by id.\n     * @private\n     * @param {String} name The component id.\n     * @return {Object} The component descriptor.\n     */\n    getDescriptor(name) {\n        if (isString(name)) {\n            return this.components[name.toLowerCase()];\n        } else if (isFunction(name)) {\n            for (let k in this.components) {\n                let desc = this.components[k];\n                if (desc.Ctr === name) {\n                    return desc;\n                }\n            }\n        }\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @param {String} name The component id.\n     * @return {Function} The component constructor.\n     */\n    get(name) {\n        let desc = this.getDescriptor(name);\n        if (desc) {\n            return desc.Ctr;\n        }\n    },\n};\n","export const COMPONENT_SYMBOL = '__component';\n","import { isFunction } from './typeof.js';\nimport { registry } from './registry.js';\nimport { COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * Retrieve a component constructor from an Element or from a tag name.\n * @method getComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component|String} element The element or the tag name.\n * @param {Boolean} full Retrieve full component information.\n * @return {Function} The component constructor for the given param.\n */\nexport function getComponent(element, full = false) {\n    if (element.node) {\n        element = element.node;\n    }\n    if (element.nodeType === Node.ELEMENT_NODE) {\n        element = element.getAttribute('is') || element.tagName;\n    }\n    return full ? registry.getDescriptor(element) : registry.get(element);\n}\n/**\n * Check if a node is an instance of a component.\n * @method isComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to check.\n * @return {Boolean}\n */\nexport function isComponent(element) {\n    let Ctr = getComponent(element);\n    return Ctr && (element instanceof Ctr);\n}\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    if (isComponent(element)) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    if (isComponent(element)) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    if (isComponent(element)) {\n        element[UPDATED].call(element, name, oldValue, newValue);\n        return true;\n    }\n}\n/**\n * Attach a component prototype to an already instantiated HTMLElement.\n * @method bind\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} node The node to update.\n * @param {Function} Ctr The component class to use (leave empty for auto detect).\n * @return {Boolean} The prototype has been attached.\n */\nexport function bind(node, Ctr) {\n    if (!isFunction(Ctr)) {\n        Ctr = getComponent(node);\n    }\n    if (isFunction(Ctr)) {\n        node.__proto__ = Ctr.prototype;\n        Object.defineProperty(node, 'constructor', {\n            value: Ctr,\n            configurable: true,\n            writable: true,\n        });\n        Ctr.call(node);\n        return true;\n    }\n    return false;\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {String} is The component tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(is) {\n    let Ctr = getComponent(is);\n    if (Ctr) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    if (element.node) {\n        let node = element.node;\n        if (parent !== node.parentNode || parent.lastElementChild !== node) {\n            if (node.parentNode) {\n                removeChild(node.parentNode, element);\n            }\n            parent.appendChild(node);\n            return connect(element);\n        }\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    if (element.node) {\n        parent.removeChild(element.node);\n        return disconnect(element);\n    }\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        if (node.nextSibling !== refNode) {\n            if (node.parentNode) {\n                disconnect(element);\n            }\n            parent.insertBefore(node, refNode);\n            return connect(element);\n        }\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        if (node.parentNode) {\n            disconnect(element);\n        }\n        parent.replaceChild(node, refNode);\n        if (refNode[COMPONENT_SYMBOL]) {\n            disconnect(refNode[COMPONENT_SYMBOL]);\n        }\n        return connect(node);\n    }\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.setAttribute(name, value);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, value);\n        }\n    }\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.removeAttribute(name);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, null);\n        }\n    }\n}\n","import { COMPONENT_SYMBOL } from '../lib/symbols.js';\n\n/**\n * THe base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @property {String} is Get component id.\n     * @name is\n     * @type {String}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get is() {\n        return (this.getAttribute('is') || this.localName).toLowerCase();\n    }\n    /**\n     * @property {HTMLElement} node Get component node reference.\n     * @name node\n     * @type {HTMLElement}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get node() {\n        return this;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","let CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    let ev = new self.CustomEvent('test');\n    CustomEvent = self.CustomEvent;\n} catch(ex) {\n    CustomEvent = function(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined,\n        };\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\nexport { CustomEvent };\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\n/**\n * Shortcut to `Object.defineProperty`.\n * @type {Function}\n * @private\n */\nconst define = Object.defineProperty;\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n * @private\n */\nclass Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    this.changed(val, oldValue);\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Property|Function|Array} ctrs A Property to clone or a single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k).init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.node.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.node.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this.node, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.matchesSelector ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach and delegate events to the component.\n     * @method constructor\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    this.node.addEventListener(evName, (ev) => {\n                        callback.call(this, ev, this);\n                    });\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire when the event fires.\n     */\n    delegate(evName, selector, callback) {\n        this.node.addEventListener(evName, (event) => {\n            let target = event.target;\n            while (target && target !== this) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        });\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","const rootDoc = document;\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nexport function createStyle(node) {\n    let doc = node.ownerDocument || rootDoc;\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${node.is}`);\n    let head = doc.head;\n    /* istanbul ignore else */\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n","import { isString } from '../lib/typeof.js';\nimport { createStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.constructor.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr, 'styleElem', {\n                value: createStyle(this),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.node.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (isString(style)) {\n            this.constructor.styleElem.textContent = style;\n        }\n    }\n};\n","import { isUndefined, isFunction, isString } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @property {Boolean} autoRender Should the component re-render on properties changes.\n     * @name autoRender\n     * @type {Boolean}\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    get autoRender() {\n        return true;\n    }\n    /**\n     * Attach properties observers in order to update children.\n     * @method constructor\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        if (this.autoRender && !isUndefined(this.template)) {\n            let props = this.properties;\n            if (props) {\n                let callback = () => {\n                    this.render();\n                };\n                for (let k in props) {\n                    props[k].observe(callback);\n                }\n            }\n        }\n    }\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (!isUndefined(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            this.node.innerHTML = tpl;\n        } else {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","/* eslint-disable prefer-rest-params */\nexport const reduce = Array.prototype.reduce || function(callback /*, initialValue*/ ) {\n    'use strict';\n    let t = this;\n    let len = t.length;\n    let k = 0;\n    let value;\n    if (arguments.length === 2) {\n        value = arguments[1];\n    } else {\n        while (k < len && !(k in t)) {\n            k++;\n        }\n        value = t[k++];\n    }\n    for (; k < len; k++) {\n        if (k in t) {\n            value = callback(value, t[k], k, t);\n        }\n    }\n    return value;\n};\n","/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nimport { reduce } from '../polyfills/reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extend superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce.call(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import { registry } from './registry.js';\nimport { isString } from './typeof.js';\n\n/**\n * Check if a node is already instantiated HTMLElement for programmatically `constructor` calls.\n * @private\n * @param {HTMLElement} node The node to check.\n * @return {Boolean} The node should be instantiated.\n */\nfunction isNew(node) {\n    try {\n        return !isString(node.outerHTML);\n    } catch (ex) {\n        return true;\n    }\n}\n\n/**\n * Shim original Element constructors in order to be used with `new`.\n * @method shim\n * @memberof! DNA.\n * @static\n *\n * @param {Function} Original The original constructor to shim.\n * @return {Function} The shimmed constructor.\n *\n * @example\n * ```js\n * // shim audio element\n * import { shim } from '@dnajs/core';\n *\n * class MyAudio extends shim(HTMLAudioElement) {\n *     ...\n * }\n *\n * let audio = new MyAudio();\n * ```\n */\nexport function shim(Original) {\n    class Polyfilled {\n        constructor() {\n            if (!isNew(this)) {\n                return this;\n            }\n            let desc = registry.getDescriptor(this.constructor);\n            let config = desc.config;\n            // Find the tagname of the constructor and create a new element with it\n            let element = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            element.__proto__ = desc.Ctr.prototype;\n            if (config.extends) {\n                element.setAttribute('is', desc.is);\n            }\n            return element;\n        }\n    }\n    // Clone the prototype overriding the constructor.\n    Polyfilled.prototype = Object.create(Original.prototype, {\n        constructor: {\n            value: Polyfilled,\n            configurable: true,\n            writable: true,\n        },\n    });\n    return Polyfilled;\n}\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DOM\n * @memberof! DNA.\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace MIXINS\n * @memberof! DNA.\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport { shim } from './lib/shim.js';\nexport * from './lib/symbols.js';\nexport * from './lib/typeof.js';\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nlet inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nconst assertInPatch = function(functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nconst assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nconst assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nconst assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nconst assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nconst assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nconst assertCloseMatchesOpenTag = function(nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close \"' + tag + '\" but \"' +\n        nodeName + '\" was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nconst assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nconst assertPatchElementNoExtras = function(\n    startNode,\n    currentNode,\n    expectedNextNode,\n    expectedPrevNode) {\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInAttributes = function(value) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInSkip = function(value) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  patchInner as patch,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n} from './src/core';\nexport {\n  elementVoid,\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementClose,\n  text,\n  attr\n} from './src/virtual_elements';\nexport { symbols } from './src/symbols';\nexport {\n  attributes,\n  applyAttr,\n  applyProp\n} from './src/attributes';\nexport { notifications } from './src/notifications';\nexport { importNode } from './src/node_data';\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, prop, shim, DOM, MIXINS } from './src/core.js';\nimport { registry } from './src/lib/registry.js';\n\n/**\n * @namespace DNA\n */\nexport { mix, prop, shim, DOM, MIXINS };\nexport { registry };\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    DOM.appendChild(node, element);\n    return element;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n * @memberof DNA.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n * ```\n */\nexport class BaseComponent extends mix(\n    shim(self.HTMLElement)\n).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {}\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","registry","name","Ctr","config","components","toLowerCase","k","desc","getDescriptor","COMPONENT_SYMBOL","CONNECTED","DISCONNECTED","UPDATED","getComponent","element","full","node","nodeType","Node","ELEMENT_NODE","getAttribute","tagName","get","isComponent","connect","disconnect","update","oldValue","newValue","bind","__proto__","defineProperty","createElement","is","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","attrs","constructor","observedAttributes","indexOf","removeAttribute","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","localName","CustomEvent","ev","self","ex","event","params","undefined","evt","document","createEvent","initCustomEvent","bubbles","cancelable","detail","dispatch","evName","data","TypeError","dispatchEvent","define","Property","ctrs","_","validator","_setter","val","getterFn","setterFn","validateType","changed","scope","observe","callback","push","unobserve","io","splice","i","len","length","clb","accepts","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","setter","validate","init","prop","String","Boolean","Number","getValue","property","attrVal","JSON","parse","context","attr","currentAttrValue","PropertiesMixin","props","properties","reduce","res","partialProps","observed","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","events","rule","match","selector","trim","delegate","addEventListener","target","trigger","rootDoc","createStyle","doc","ownerDocument","styleElem","type","head","firstElementChild","StyleMixin","updateCSS","classList","add","style","css","textContent","TemplateMixin","autoRender","template","render","tpl","innerHTML","t","arguments","Mixin","superclass","with","args","slice","c","mixin","mix","superClass","isNew","outerHTML","shim","Original","Polyfilled","extends","create","DOM","DOM_HELPERS","MIXINS","hasOwnProperty","Blank","has","map","createMap","NodeData","nodeName","key","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","initData","getData","importNode","isElement","attributes","child","firstChild","getNamespaceForTag","tag","namespaceURI","namespace","el","createElementNS","createText","createTextNode","notifications","Context","created","nodesCreated","deleted","nodesDeleted","markCreated","markDeleted","notifyChanges","inAttributes","inSkip","assertNoUnclosedTags","openElement","root","currentElement","openTags","Error","join","assertNotInAttributes","functionName","assertNotInSkip","assertInAttributes","assertVirtualAttributesClosed","assertCloseMatchesOpenTag","assertNoChildrenDeclaredYet","previousNode","assertPatchElementNoExtras","startNode","currentNode","expectedNextNode","expectedPrevNode","wasUpdated","previousSibling","wasChanged","wasRemoved","setInAttributes","previous","setInSkip","isDocumentRoot","Document","DocumentFragment","getAncestry","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","currentParent","markFocused","focusPath","patchFactory","run","f","fn","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","previousInAttributes","previousInSkip","retVal","patchInner","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","clearUnvisitedDOM","lastChild","enterNode","getNextNode","nextNode","exitNode","elementOpen","elementClose","skip","symbols","getNamespace","lastIndexOf","applyAttr","attrNS","setAttributeNS","applyProp","setStyleValue","setProperty","applyStyle","cssText","elStyle","applyAttributeTyped","updateAttribute","mutator","ATTRIBUTES_OFFSET","argsBuilder","statics","var_args","coreElementOpen","j","elementOpenStart","elementOpenEnd","apply","coreElementClose","coreText","formatted","Component","BaseComponent","HTMLElement"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}