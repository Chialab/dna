{"version":3,"file":"dna-idom.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/incremental-dom/src/util.js","node_modules/incremental-dom/src/node_data.js","node_modules/incremental-dom/src/context.js","packages/dna-idom/src/lib/idom.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/lib/dom.js","node_modules/@dnajs/core/src/lib/reduce.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/lib/matches.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/index.js","node_modules/@dnajs/core/src/lib/obj-define.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/incremental-dom/src/nodes.js","node_modules/incremental-dom/src/notifications.js","node_modules/incremental-dom/src/assertions.js","node_modules/incremental-dom/src/dom_util.js","node_modules/incremental-dom/src/core.js","node_modules/incremental-dom/src/symbols.js","node_modules/incremental-dom/src/attributes.js","node_modules/incremental-dom/src/virtual_elements.js","packages/dna-idom/src/mixins/idom.js","node_modules/@dnajs/core/src/lib/notifications.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/lib/custom-event.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/core.js","packages/dna-idom/index.js","packages/dna-idom/observer.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","import { isFalsy, isObject, isFunction, isArray } from '@dnajs/core/src/lib/typeof.js';\nimport { registry } from '@dnajs/core/src/lib/registry.js';\nimport {\n    skip,\n    text,\n    attr,\n    elementClose,\n    elementOpenStart,\n    elementOpenEnd,\n    patch as originalPatch,\n} from 'incremental-dom/index.js';\n\nfunction handleChildren(children) {\n    children.forEach((child) => {\n        if (isFunction(child)) {\n            child();\n        } else if (isArray(child)) {\n            handleChildren(child);\n        } else if (child) {\n            text(child);\n        }\n    });\n}\n\nfunction interpolate(template, data) {\n    if (isFunction(template)) {\n        let res = template.call(this, data);\n        interpolate.call(this, res);\n    } else if (isArray(template)) {\n        template.forEach((chunk) => {\n            interpolate.call(this, chunk);\n        });\n    }\n}\n\n\nexport function h(element, props, ...children) {\n    return () => {\n        if (!isObject(props)) {\n            if (props) {\n                children.unshift(props);\n            }\n            props = {};\n        }\n        let key = props.key;\n        delete props.key;\n\n        elementOpenStart(element, key);\n\n        for (let k in props) {\n            if (!isFalsy(props[k])) {\n                attr(k, props[k]);\n            }\n        }\n\n        const node = elementOpenEnd(element);\n        const isComponent = !!registry.get(\n            node.getAttribute('is') || node.tagName\n        );\n\n        if (isComponent) {\n            skip();\n        } else {\n            handleChildren(children);\n        }\n        elementClose(element);\n        return node;\n    };\n}\n\nexport function patch(scope, fn, data) {\n    return originalPatch(scope, interpolate.bind(this, fn, data));\n}\n\nexport { text };\n","/**\n * Wrap Symbol function.\n * @private\n *\n * @param {String} name The symbol name.\n * @return {Symbol|String} A real symbol if supported or a string key.\n */\nfunction Sym(name) {\n    if (self.Symbol) {\n        return self.Symbol(name);\n    }\n    return `__${name}`;\n}\n\n/**\n * Symbol for DNA component mixin.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const DNA_SYMBOL = Sym('dna');\n/**\n * Symbol for component instance.\n * Bound to a node.\n * @type {String}\n * @private\n */\nexport const COMPONENT_SYMBOL = Sym('component');\n/**\n * Symbol for node instance.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const NODE_SYMBOL = Sym('node');\n/**\n * Symbol for style element.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const STYLE_SYMBOL = Sym('style');\n","import { isFunction, isString } from './typeof.js';\nimport { registry } from './registry.js';\nimport { DNA_SYMBOL, COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * Retrieve a HTMLElement instance from a component instance.\n * @method getComponentNode\n * @memberof DNA.DOM\n *\n * @param {Object} elem The component instance.\n * @return {HTMLElement} The node for the component instance.\n */\nexport function getComponentNode(elem) {\n    return elem && elem.node;\n}\n/**\n * Retrieve a component instance from a HTMLElement instance.\n * @method getNodeComponent\n * @memberof DNA.DOM\n *\n * @param {HTMLElement} elem The node instance.\n * @return {Object} The component for the node instance.\n */\nexport function getNodeComponent(elem) {\n    return elem && elem[COMPONENT_SYMBOL];\n}\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            element[UPDATED].call(element, name, oldValue, newValue);\n            return true;\n        }\n    }\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {Function|String} Ctr The component constructor or tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(Ctr) {\n    if (isString(Ctr)) {\n        Ctr = registry.get(Ctr);\n    }\n    if (isFunction(Ctr)) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    if (parent !== element.parentNode || parent.lastElementChild !== element) {\n        if (element.parentNode) {\n            removeChild(element.parentNode, element);\n        }\n        parent.appendChild(element);\n        return connect(element);\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    parent.removeChild(element);\n    return disconnect(element);\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.nextSibling !== refNode) {\n        if (element.parentNode) {\n            disconnect(element);\n        }\n        parent.insertBefore(element, refNode);\n        return connect(element);\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.parentNode) {\n        disconnect(element);\n    }\n    parent.replaceChild(element, refNode);\n    disconnect(refNode);\n    return connect(element);\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.setAttribute(name, value);\n    return update(element, name, oldValue, value);\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.removeAttribute(name);\n    return update(element, name, oldValue, null);\n}\n","/**\n * Reduce an array to a single value.\n * Similar to `Array.prototype.reduce`.\n * @method reduce\n * @ignore\n *\n * @param {Array} arr The array to reduce.\n * @param {Function} callback The reducer function to fire for all value of the array.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced array.\n */\nexport function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n/**\n * Reduce an object prototype chain to a single value.\n * @method reducePrototype\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {Function} callback The reducer function to fire for all value of the prototype chain.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced prototype chain.\n */\nexport function reducePrototype(obj, callback, value) {\n    while (obj) {\n        value = callback(value, obj);\n        obj = obj.__proto__;\n    }\n    return value;\n}\n/**\n * Reduce to array of property values of a prototype chain.\n * @method reduceProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Array} A list of property values.\n */\nexport function reduceProperty(obj, key) {\n    return reducePrototype(obj, (properties, proto) => {\n        if (proto.hasOwnProperty(key)) {\n            properties.push(proto[key]);\n        }\n        return properties;\n    }, []);\n}\n/**\n * Marge an array of property values of a prototype chain.\n * @method reduceObjectProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Object} A merged list of property values.\n */\nexport function reduceObjectProperty(scope, prop) {\n    let protoProp = reduceProperty(scope, prop);\n    return reduce(protoProp, (res, proto) => {\n        for (let k in proto) {\n            if (!res.hasOwnProperty(k)) {\n                res[k] = proto[k];\n            }\n        }\n        return res;\n    }, {});\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from './custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\nimport { define } from './obj-define.js';\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n */\nexport class Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    if (this.initialized) {\n                        this.changed(val, oldValue);\n                    }\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb.call(this.scope, this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n        this.initialized = true;\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Function|Array} ctrs A single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { define } from '../lib/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isFalsy, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop, Property } from '../lib/property.js';\nimport { notifications } from '../lib/notifications.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = reduceObjectProperty(this, 'properties');\n        for (let k in props) {\n            if (!(props[k] instanceof Property)) {\n                props[k] = prop(props[k]);\n            }\n        }\n        define(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (isUndefined(this[name])) {\n                if (this.node.hasAttribute(attrName || name)) {\n                    this[name] = getValue(prop, this.node.getAttribute(attrName || name));\n                } else if (!isUndefined(this.node[name])) {\n                    this[name] = this.node[name];\n                }\n            } else if (attrName) {\n                setAttribute(this.node, attrName, this[name]);\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback(propName, oldVal, newVal) {\n        notifications.trigger('updated', this, propName, oldVal, newVal);\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","/**\n * Alias to Element prototype.\n * @type {Object}\n * @private\n */\nconst ELEM_PROTO = Element.prototype;\n\n/**\n * Alias to `Element.prototype.matches`.\n * @type {Function}\n * @private\n */\nconst MATCHES_SELECTOR = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n\n/**\n * Polyfill for `Element.matches API`.\n * @private\n *\n * @param {HTMLElement} target The node to check.\n * @param {String} selector The selector to match.\n * @return {Boolean} The target matches the selector.\n */\nexport function matches(target, selector) {\n    return MATCHES_SELECTOR.call(target, selector);\n}\n","import { define } from '../lib/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../lib/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\n/**\n * Check if an event has a selector in mathc in target list.\n * @private\n *\n * @param {Event} event The event to check.\n * @param {HTMLElement} node The root node.\n * @param {String} selector The CSS selector to match.\n * @return {HTMLElement} The element in target list which matches the selector.\n */\nfunction checkDelegate(event, node, selector) {\n    if (!selector) {\n        return node;\n    }\n    let target = event.target;\n    while (target && target !== node) {\n        if (matches(target, selector)) {\n            return target;\n        }\n        target = target.parentNode;\n    }\n    return null;\n}\n/**\n * Generate a delegate listener for an event.\n * @private\n *\n * @param {String} selector The CSS selector to match.\n * @param {Function} callback The original callback for the event.\n * @return {Function} Wrapped callback with a delegation check.\n */\nfunction delegateCallback(selector, callback) {\n    return (ev) => {\n        let target = checkDelegate(ev, this.node, selector);\n        if (target) {\n            callback.call(this, ev, target);\n        }\n    };\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        let events = reduceObjectProperty(this, 'events');\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let selector = k.split(' ').slice(1).join(' ').trim();\n                events[k] = delegateCallback.call(this, selector, callback);\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n        define(this, 'events', { value: events });\n    }\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events;\n        for (let k in events) {\n            let evName = k.split(' ').shift();\n            this.node.addEventListener(evName, events[k]);\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        let events = this.events;\n        for (let k in events) {\n            let evName = k.split(' ').shift();\n            this.node.removeEventListener(evName, events[k]);\n        }\n        super.disconnectedCallback();\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = delegateCallback.call(this, selector, callback);\n        this.node.addEventListener(evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this.node, evName, data, bubbles, cancelable);\n    }\n};\n","import { define } from '../lib/obj-define.js';\nimport { reduceProperty } from '../lib/reduce.js';\nimport { isString } from '../lib/typeof.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * A regex to match css `:host` selector.\n * @type {RegExp}\n * @private\n */\nconst HOST_REGEX = /(\\:host)(\\([^)]*\\))?/g;\n/**\n * A regex to match css rules.\n * @type {RegExp}\n * @private\n */\nconst CSS_RULES_REGEX = /(#|\\.|\\@|\\[|[a-zA-Z]|\\:)([^{\\;\\}]*){/g;\n/**\n * A regex to split css rules.\n * @type {RegExp}\n * @private\n */\nconst SEPARATOR_REGEX = /\\,\\s*/;\n/**\n * The root document element.\n * @type {DocumentFragment}\n * @private\n */\nconst ROOT_DOC = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || ROOT_DOC;\n}\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(node) {\n    let styleElem = ownerDocument(node).createElement('style');\n    styleElem.id = `style-${node.is}`;\n    return styleElem;\n}\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nfunction convertShadowCSS(css, is) {\n    const scope = `.${is}`;\n    return css\n        .replace(CSS_RULES_REGEX, (fullMatch) => {\n            let rules = fullMatch\n                .slice(0, -1)\n                .split(SEPARATOR_REGEX)\n                .map((rule) => {\n                    if (rule.indexOf(':host') === 0) {\n                        return rule.replace(HOST_REGEX, (fullMatch, host, state) => {\n                            state = state ? state.slice(1, -1) : '';\n                            return `${scope}${state}`;\n                        });\n                    } else {\n                        return `${scope} ${rule}`;\n                    }\n                })\n                .join(', ');\n            return `${rules}{`;\n        });\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Inherit all css properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let css = reduceProperty(this, 'css')\n            .filter((protoCSS) => isString(protoCSS))\n            .join('\\n');\n        define(this, 'css', { value: css });\n    }\n    /**\n     * Create or update a style element for a component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (isString(this.css)) {\n            if (this.node.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this.node);\n                    this.node.shadowRoot.appendChild(style);\n                    style.textContent = this.css;\n                }\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this.node);\n                ownerDocument(this.node).head.appendChild(style);\n                style.textContent = convertShadowCSS(this.css, this.is);\n            }\n        }\n        this.node.classList.add(this.is);\n    }\n};\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, DOM, MIXINS } from './src/core.js';\nimport { registry } from './src/lib/registry.js';\n\n/**\n * @namespace DNA\n */\nexport * from './src/core.js';\nexport { registry };\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    DOM.appendChild(node, element);\n    return element;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @memberof DNA.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n * ```\n */\nexport class BaseComponent extends mix().with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {\n    constructor() {\n        super();\n        let desc = registry.get(this.is, true);\n        let config = desc.config;\n        this.node = document.createElement(\n            config.extends ? config.extends : desc.is\n        );\n        if (config.extends) {\n            this.node.setAttribute('is', desc.is);\n        }\n    }\n}\n","/**\n * A shortande to `Object.defineProperty` method.\n * @ignore\n */\nexport const define = Object.defineProperty;\n","import { define } from './obj-define.js';\nconst sym = 'components';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace DNA.registry\n * @memberof DNA\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @memberof DNA.registry\n     * @type {Object}\n     * @private\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        define(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nlet inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nconst assertInPatch = function(functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nconst assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nconst assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nconst assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nconst assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nconst assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nconst assertCloseMatchesOpenTag = function(nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close \"' + tag + '\" but \"' +\n        nodeName + '\" was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nconst assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nconst assertPatchElementNoExtras = function(\n    startNode,\n    currentNode,\n    expectedNextNode,\n    expectedPrevNode) {\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInAttributes = function(value) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInSkip = function(value) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","import { isFunction } from '@dnajs/core/src/lib/typeof.js';\nimport { patch } from '../lib/idom.js';\n\nexport const IDOMMixin = (superClass) => class extends superClass {\n    constructor() {\n        super();\n        this.node = document.createElement(this.is);\n    }\n\n    render(template) {\n        template = template || this.template;\n        if (isFunction(template)) {\n            let tpl = template.bind(this);\n            template = () => patch(this.node.shadowRoot || this.node, tpl);\n        }\n        super.render(template);\n    }\n};\n","import { isArray, isFunction } from './typeof.js';\n\n/**\n * Notifications handler for DNA components.\n * @namespace DNA.notifications\n * @memberof DNA\n */\nexport const notifications = {\n    /**\n     * A list of callbacks for component creation.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    created: [],\n    /**\n     * A list of callbacks for component connection.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    connected: [],\n    /**\n     * A list of callbacks for component disconnection.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    disconnected: [],\n    /**\n     * A list of callbacks for component update.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    updated: [],\n    /**\n     * Attach a callback for a notifications.\n     * @method on\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name.\n     * @param {Function} callback The callback to trigger.\n     */\n    on(notification, callback) {\n        if (isArray(this[notification]) && isFunction(callback)) {\n            this[notification].push(callback);\n        }\n    },\n    /**\n     * Remove a callback for a notifications.\n     * @method off\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name.\n     * @param {Function} callback The callback to remove.\n     */\n    off(notification, callback) {\n        if (isArray(this[notification]) && isFunction(callback)) {\n            let io = this[notification].indexOf(callback);\n            if (io !== -1) {\n                this[notification].splice(io);\n            }\n        }\n    },\n    /**\n     * Trigger a list of callbacks.\n     * @method trigger\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name to trigger.\n     * @param {Object} elem The component scope.\n     * @param {*} ...args All the arguments to pass to the callback.\n     */\n    trigger(notification, elem, ...args) {\n        if (isArray(this[notification])) {\n            this[notification].forEach((clb) => clb.call(null, elem, ...args));\n        }\n    },\n};\n","import { DNA_SYMBOL, COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\nimport { notifications } from '../lib/notifications.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @private\n     */\n    get [DNA_SYMBOL]() {\n        return true;\n    }\n    /**\n     * @property {HTMLElement} node Get component node reference.\n     * @name node\n     * @type {HTMLElement}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get node() {\n        return this[NODE_SYMBOL];\n    }\n    set node(node) {\n        node[COMPONENT_SYMBOL] = this;\n        this[NODE_SYMBOL] = node;\n    }\n    /**\n     * Fires on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        notifications.trigger('created', this);\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n        notifications.trigger('connected', this);\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        notifications.trigger('disconnected', this);\n    }\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","/**\n * Alias to native `CustomEvent`.\n * @type {Function}\n * @private\n */\nlet CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    /**\n     * Polyfill `CustomEvent`.\n     * @type {Function}\n     * @private\n     */\n    CustomEvent = function(ev, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\n/** Polyfill for CustomEvent constructor. */\nexport { CustomEvent };\n","import { isFunction, isString, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            (this.node.shadowRoot || this.node).innerHTML = tpl;\n        } else if (!isFalsy(tpl)) {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","import { reduce } from './reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @author Justin Fagnani (https://github.com/justinfagnani)\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extends superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DNA.DOM\n * @memberof DNA\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace DNA.MIXINS\n * @memberof DNA\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport * from './lib/notifications.js';\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern with IncrementalDOM templates.\n */\nimport * as IDOM from './src/lib/idom.js';\nimport { IDOMMixin } from './src/mixins/idom.js';\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\n\nMIXINS.IDOMMixin = IDOMMixin;\n\nexport * from '@dnajs/core/src/core.js';\nexport { registry, render, define } from '@dnajs/core';\nexport { IDOM };\nexport class BaseComponent extends mix().with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin,\n    IDOMMixin\n) {}\n","import { symbols, attributes, notifications } from 'incremental-dom/index.js';\nimport { DOM } from '@dnajs/core/src/core.js';\nimport { registry } from '@dnajs/core/src/lib/registry.js';\nimport { isFalsy } from '@dnajs/core/src/lib/typeof.js';\n\nconst _created = notifications.nodesCreated;\nconst _removed = notifications.nodesDeleted;\nconst _changed = attributes[symbols.default];\n\nnotifications.nodesCreated = function(nodes) {\n    nodes.forEach((node) => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n            let Ctr = registry.get(node.getAttribute('is') || node.tagName);\n            if (Ctr) {\n                let elem = new Ctr();\n                elem.node = node;\n                DOM.connect(elem);\n            }\n        }\n    });\n    /* istanbul ignore if */\n    if (_created) {\n        _created(nodes);\n    }\n};\n\nnotifications.nodesDeleted = function(nodes) {\n    nodes.forEach((node) => {\n        DOM.disconnect(node);\n    });\n    /* istanbul ignore if */\n    if (_removed) {\n        _removed(nodes);\n    }\n};\n\nattributes[symbols.default] = function(node, attrName, attrValue) {\n    let oldValue = node.getAttribute(attrName);\n    /* istanbul ignore if */\n    if (_changed) {\n        _changed(node, attrName, attrValue);\n    }\n    let elem = DOM.getNodeComponent(node);\n    if (elem) {\n        let attrs = elem.constructor.observedAttributes || [];\n        if (attrs.indexOf(attrName) !== -1) {\n            attrValue = (isFalsy(attrValue)) ? null : attrValue;\n            DOM.update(elem, attrName, oldValue, attrValue);\n        } else if (elem.properties && elem.properties.hasOwnProperty(attrName)) {\n            elem[attrName] = attrValue;\n        }\n    }\n};\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","Blank","NodeData","nodeName","key","attrs","createMap","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","Context","created","notifications","nodesCreated","deleted","nodesDeleted","handleChildren","children","forEach","child","interpolate","template","data","res","this","chunk","h","element","props","unshift","k","node","elementOpenEnd","isComponent","registry","get","getAttribute","tagName","patch","scope","fn","originalPatch","bind","Sym","name","self","Symbol","getComponentNode","elem","getNodeComponent","COMPONENT_SYMBOL","connect","DNA_SYMBOL","CONNECTED","disconnect","DISCONNECTED","update","oldValue","newValue","constructor","observedAttributes","indexOf","UPDATED","createElement","Ctr","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","removeAttribute","reduce","arr","callback","len","length","reducePrototype","__proto__","reduceProperty","properties","proto","hasOwnProperty","push","reduceObjectProperty","prop","protoProp","dispatch","evName","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","matches","target","selector","MATCHES_SELECTOR","checkDelegate","event","delegateCallback","_this","ownerDocument","ROOT_DOC","createStyle","styleElem","id","is","convertShadowCSS","css","replace","CSS_RULES_REGEX","fullMatch","rules","slice","split","SEPARATOR_REGEX","map","rule","HOST_REGEX","host","state","join","define","Component","config","render","defineProperty","sym","toLowerCase","full","desc","create","has","initData","getData","importNode","isElement","Element","localName","attributes","i","undefined","firstChild","getNamespaceForTag","tag","namespaceURI","doc","namespace","el","createElementNS","createText","createTextNode","markCreated","markDeleted","notifyChanges","inAttributes","inSkip","assertNoUnclosedTags","openElement","root","currentElement","openTags","Error","assertNotInAttributes","functionName","assertNotInSkip","assertInAttributes","assertVirtualAttributesClosed","assertCloseMatchesOpenTag","assertNoChildrenDeclaredYet","previousNode","setInAttributes","previous","setInSkip","isDocumentRoot","Document","DocumentFragment","getAncestry","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","currentNode","currentParent","markFocused","focusPath","patchFactory","run","f","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","previousInAttributes","previousInSkip","retVal","patchInner","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","clearUnvisitedDOM","lastChild","enterNode","getNextNode","nextNode","exitNode","elementOpen","elementClose","skip","symbols","getNamespace","lastIndexOf","applyAttr","attrNS","setAttributeNS","applyProp","setStyleValue","style","setProperty","applyStyle","cssText","elStyle","applyAttributeTyped","type","updateAttribute","mutator","default","ATTRIBUTES_OFFSET","argsBuilder","statics","var_args","coreElementOpen","isNew","j","arguments","elementOpenStart","apply","coreElementClose","coreText","formatted","IDOMMixin","superClass","_superClass","document","tpl","_this2","shadowRoot","NODE_SYMBOL","STYLE_SYMBOL","notification","io","splice","args","clb","ComponentMixin","SuperClass","_SuperClass","trigger","connectedCallback","disconnectedCallback","attributeChangedCallback","params","evt","createEvent","initCustomEvent","detail","_","validator","_setter","val","getterFn","setterFn","validateType","initialized","changed","observe","unobserve","named","attrRequested","attrName","initValue","defaultValue","freeze","attribute","eventName","getter","setter","validate","init","Number","PropertiesMixin","observed","propertyChangedCallback","hasAttribute","oldVal","newVal","propName","observeProperty","unobserveProperty","ELEM_PROTO","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","EventsMixin","events","trim","shift","addEventListener","removeEventListener","delegate","wrapCallback","StyleMixin","filter","protoCSS","textContent","head","classList","add","TemplateMixin","innerHTML","Mixin","superclass","with","c","mixin","mix","DOM","DOM_HELPERS","MIXINS","_mix$with","extends","BaseComponent","_created","_removed","_changed","nodes","nodeType","Node","ELEMENT_NODE","attrValue"],"mappings":"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"}