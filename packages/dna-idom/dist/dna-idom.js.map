{"version":3,"file":"dna-idom.js","sources":["packages/dna-core/src/lib/typeof.js","packages/dna-core/src/helpers/symbol.js","packages/dna-core/src/lib/dom.js","packages/dna-core/src/helpers/arr-reduce.js","packages/dna-core/src/lib/reduce.js","packages/dna-core/src/lib/dispatch.js","packages/dna-core/src/lib/property.js","packages/dna-core/src/mixins/properties-component.js","packages/dna-core/src/helpers/matches.js","packages/dna-core/src/mixins/events-component.js","packages/dna-core/src/lib/shadow-css.js","packages/dna-core/src/mixins/style-component.js","node_modules/incremental-dom/src/util.js","node_modules/incremental-dom/src/node_data.js","node_modules/incremental-dom/src/context.js","packages/dna-idom/src/lib/idom.js","packages/dna-core/src/lib/proxy.js","packages/dna-core/src/lib/bootstrap.js","packages/dna-core/src/lib/define.js","packages/dna-core/src/lib/render.js","packages/dna-core/src/helpers/obj-define.js","packages/dna-core/src/lib/registry.js","packages/dna-core/src/lib/symbols.js","packages/dna-core/src/mixins/component.js","packages/dna-core/src/helpers/custom-event.js","packages/dna-core/src/mixins/template-component.js","packages/dna-core/src/lib/mixins.js","packages/dna-core/src/core.js","node_modules/incremental-dom/src/nodes.js","node_modules/incremental-dom/src/notifications.js","node_modules/incremental-dom/src/dom_util.js","node_modules/incremental-dom/src/core.js","node_modules/incremental-dom/src/symbols.js","node_modules/incremental-dom/src/attributes.js","node_modules/incremental-dom/src/virtual_elements.js","packages/dna-idom/src/mixins/idom.js","packages/dna-idom/index.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","/**\n * Wrap Symbol function.\n * @private\n *\n * @param {String} name The symbol name.\n * @return {Symbol|String} A real symbol if supported or a string key.\n */\nexport function Symbol(name) {\n    if (self.Symbol) {\n        return self.Symbol(name);\n    }\n    return `__${name}`;\n}\n","import { isFunction, isString } from './typeof.js';\nimport { registry } from './registry.js';\nimport { DNA_SYMBOL, COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * Retrieve a HTMLElement instance from a component instance.\n * @method getComponentNode\n * @memberof DNA.DOM\n *\n * @param {Object} elem The component instance.\n * @return {HTMLElement} The node for the component instance.\n */\nexport function getComponentNode(elem) {\n    return elem && elem.node;\n}\n/**\n * Retrieve a component instance from a HTMLElement instance.\n * @method getNodeComponent\n * @memberof DNA.DOM\n *\n * @param {HTMLElement} elem The node instance.\n * @return {Object} The component for the node instance.\n */\nexport function getNodeComponent(elem) {\n    return elem && elem[COMPONENT_SYMBOL];\n}\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            element[UPDATED].call(element, name, oldValue, newValue);\n            return true;\n        }\n    }\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {Function|String} Ctr The component constructor or tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(Ctr) {\n    if (isString(Ctr)) {\n        Ctr = registry.get(Ctr);\n    }\n    if (isFunction(Ctr)) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    if (parent !== element.parentNode || parent.lastElementChild !== element) {\n        if (element.parentNode) {\n            removeChild(element.parentNode, element);\n        }\n        parent.appendChild(element);\n        return connect(element);\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    parent.removeChild(element);\n    return disconnect(element);\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.nextSibling !== refNode) {\n        if (element.parentNode) {\n            disconnect(element);\n        }\n        parent.insertBefore(element, refNode);\n        return connect(element);\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.parentNode) {\n        disconnect(element);\n    }\n    parent.replaceChild(element, refNode);\n    disconnect(refNode);\n    return connect(element);\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.setAttribute(name, value);\n    return update(element, name, oldValue, value);\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.removeAttribute(name);\n    return update(element, name, oldValue, null);\n}\n","/**\n * Reduce an array to a single value.\n * Similar to `Array.prototype.reduce`.\n * @method reduce\n * @ignore\n *\n * @param {Array} arr The array to reduce.\n * @param {Function} callback The reducer function to fire for all value of the array.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced array.\n */\nexport function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n","import { reduce } from '../helpers/arr-reduce.js';\n\n/**\n * Reduce an object prototype chain to a single value.\n * @method reducePrototype\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {Function} callback The reducer function to fire for all value of the prototype chain.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced prototype chain.\n */\nexport function reducePrototype(obj, callback, value) {\n    while (obj) {\n        value = callback(value, obj);\n        obj = Object.getPrototypeOf(obj);\n    }\n    return value;\n}\n/**\n * Reduce to array of property values of a prototype chain.\n * @method reduceProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Array} A list of property values.\n */\nexport function reduceProperty(obj, key) {\n    return reducePrototype(obj, (properties, proto) => {\n        if (proto.hasOwnProperty(key)) {\n            let desc = Object.getOwnPropertyDescriptor(proto, key);\n            let res;\n            if (desc.hasOwnProperty('value')) {\n                res = desc.value;\n            } else if (desc.hasOwnProperty('get')) {\n                res = desc.get.call(obj);\n            }\n            properties.push(res);\n        }\n        return properties;\n    }, []);\n}\n/**\n * Marge an array of property values of a prototype chain.\n * @method reduceObjectProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Object} A merged list of property values.\n */\nexport function reduceObjectProperty(scope, prop) {\n    let protoProp = reduceProperty(scope, prop);\n    return reduce(protoProp, (res, proto) => {\n        for (let k in proto) {\n            if (!res.hasOwnProperty(k)) {\n                res[k] = proto[k];\n            }\n        }\n        return res;\n    }, {});\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../helpers/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\nimport { define } from '../helpers/obj-define.js';\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n */\nexport class Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    if (this.initialized) {\n                        this.changed(val, oldValue);\n                    }\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        this.defaultSet = false;\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb.call(this.scope, this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n            this.defaultSet = true;\n        }\n        this.initialized = true;\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Function|Array} ctrs A single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { define } from '../helpers/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isFalsy, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop, Property } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {Object} component The component to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let props = reduceObjectProperty(this, 'properties');\n        for (let k in props) {\n            if (!(props[k] instanceof Property)) {\n                props[k] = prop(props[k]);\n            }\n        }\n        define(this, 'properties', { value: props });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe((changedProp, newValue, oldValue) => {\n                    if (attrName) {\n                        setAttribute(this, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this, eventName, {\n                            component: this,\n                            property: changedProp.name,\n                            newValue,\n                            oldValue,\n                        });\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (isUndefined(this[name]) || prop.defaultSet) {\n                if (this.hasAttribute(attrName || name)) {\n                    this[name] = getValue(prop, this.getAttribute(attrName || name));\n                } else if (!isUndefined(this.node[name])) {\n                    this[name] = this.node[name];\n                }\n            }\n            if (attrName) {\n                setAttribute(this, attrName, this[name]);\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback() {}\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","/**\n * Alias to Element prototype.\n * @type {Object}\n * @private\n */\nconst ELEM_PROTO = Element.prototype;\n\n/**\n * Alias to `Element.prototype.matches`.\n * @type {Function}\n * @private\n */\nconst MATCHES_SELECTOR = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n\n/**\n * Polyfill for `Element.matches API`.\n * @private\n *\n * @param {HTMLElement} target The node to check.\n * @param {String} selector The selector to match.\n * @return {Boolean} The target matches the selector.\n */\nexport function matches(target, selector) {\n    return MATCHES_SELECTOR.call(target, selector);\n}\n","import { define } from '../helpers/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../helpers/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\n/**\n * Check if an event has a selector in mathc in target list.\n * @private\n *\n * @param {Event} event The event to check.\n * @param {HTMLElement} node The root node.\n * @param {String} selector The CSS selector to match.\n * @return {HTMLElement} The element in target list which matches the selector.\n */\nfunction checkDelegate(event, node, selector) {\n    if (!selector) {\n        return node;\n    }\n    let target = event.target;\n    while (target && target !== node) {\n        if (matches(target, selector)) {\n            return target;\n        }\n        target = target.parentNode;\n    }\n    return null;\n}\n/**\n * Generate a delegate listener for an event.\n * @private\n *\n * @param {String} selector The CSS selector to match.\n * @param {Function} callback The original callback for the event.\n * @return {Function} Wrapped callback with a delegation check.\n */\nfunction delegateCallback(selector, callback) {\n    return (ev) => {\n        let target = checkDelegate(ev, this.node, selector);\n        if (target) {\n            callback.call(this, ev, target);\n        }\n    };\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Iterate `events` properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let events = reduceObjectProperty(this, 'events');\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let ev = k.trim().split(' ');\n                let name = ev.shift();\n                let selector = ev.join(' ');\n                events[k] = {\n                    name,\n                    selector,\n                    callback: delegateCallback.call(this, selector, callback),\n                };\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n        define(this, 'events', { value: events });\n    }\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events;\n        for (let k in events) {\n            this.addEventListener(events[k].name, events[k].callback);\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        let events = this.events;\n        for (let k in events) {\n            this.removeEventListener(events[k].name, events[k].callback);\n        }\n        super.disconnectedCallback();\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = delegateCallback.call(this, selector, callback);\n        return this.addEventListener(evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","/**\n * A regex to match css `:host` selector.\n * @type {RegExp}\n * @private\n */\nconst HOST_REGEX = /\\:host(\\(([^({)]+(\\([^)]*\\))?)+\\))?/g;\n\n/**\n * Add a scope to all selectors.\n * @private\n *\n * @param {CSSStyleSheet} sheet The css sheet to scope.\n * @param {String} scope The scope selector.\n * @return {String} The scoped css.\n */\nfunction scoped(sheet, scope) {\n    let rules = sheet.cssRules || sheet.rules;\n    if (sheet.insertRule) {\n        let reg = new RegExp(`${scope}([\\\\s\\.\\[:]|$)`);\n        let text = '';\n        for (let i = 0, len = rules.length; i < len; i++) {\n            let rule = rules[i];\n            let body = rule.cssText;\n            if (rule.selectorText) {\n                let selector = rule.cssText.split('{').shift().split(',')\n                    .map((rule) => {\n                        rule = rule.trim();\n                        if (rule.match(reg)) {\n                            return rule;\n                        }\n                        return `${scope} ${rule}`;\n                    })\n                    .join(', ');\n                text += rule.cssText.replace(rule.selectorText, selector);\n            } else if (rule.cssRules || rule.rules) {\n                scoped(rule, scope);\n                text += rule.cssText;\n            } else {\n                text += body;\n            }\n        }\n        return text;\n    }\n}\n\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {HTMLStyleElement} style The style element.\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nexport function convertShadowCSS(style, css, is) {\n    let scope = `.${is}`;\n    style.textContent = css.replace(HOST_REGEX, (fullMatch, mod) =>\n        `${scope}${mod ? mod.slice(1, -1) : ''}`\n    );\n    style.textContent = scoped(style.sheet, scope) || '';\n}\n","import { define } from '../helpers/obj-define.js';\nimport { reduceProperty } from '../lib/reduce.js';\nimport { isString } from '../lib/typeof.js';\nimport { convertShadowCSS } from '../lib/shadow-css.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The root document element.\n * @type {DocumentFragment}\n * @private\n */\nconst ROOT_DOC = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || ROOT_DOC;\n}\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {Object} component A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(component) {\n    let styleElem = ownerDocument(component.node).createElement('style');\n    styleElem.id = `style-${component.is}`;\n    return styleElem;\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Inherit all css properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let css = reduceProperty(this, 'css')\n            .filter((protoCSS) => isString(protoCSS))\n            .join('\\n');\n        if (css) {\n            define(this, 'css', { value: css });\n        }\n    }\n    /**\n     * Create or update a style element for a component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (isString(this.css)) {\n            if (this.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this);\n                    style.textContent = this.css;\n                    this.shadowRoot.appendChild(style);\n                }\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this);\n                ownerDocument(this.node).head.appendChild(style);\n                convertShadowCSS(style, this.css, this.is);\n            }\n        }\n        this.classList.add(this.is);\n    }\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","import { isFalsy, isObject, isFunction, isArray, isString } from '@dnajs/core/src/lib/typeof.js';\nimport { DOM } from '@dnajs/core/src/core.js';\nimport { registry } from '@dnajs/core/src/lib/registry.js';\nimport {\n    skip,\n    text,\n    attr,\n    elementClose,\n    elementOpenStart,\n    elementOpenEnd,\n    patch as originalPatch,\n} from 'incremental-dom/index.js';\n\nfunction handleChildren(children) {\n    children.forEach((child) => {\n        if (isFunction(child)) {\n            child();\n        } else if (isArray(child)) {\n            handleChildren(child);\n        } else if (child) {\n            text(child);\n        }\n    });\n}\n\nfunction interpolate(template, data) {\n    if (isFunction(template)) {\n        let res = template.call(this, data);\n        interpolate.call(this, res);\n    } else if (isArray(template)) {\n        template.forEach((chunk) => {\n            interpolate.call(this, chunk);\n        });\n    }\n}\n\n\nexport function h(element, props, ...children) {\n    return () => {\n        if (!isObject(props)) {\n            if (props) {\n                children.unshift(props);\n            }\n            props = {};\n        }\n        let key = props.key;\n        delete props.key;\n\n        const Component = registry.get(props.is || element);\n        elementOpenStart(element, key);\n\n        for (let k in props) {\n            let val = props[k];\n            if (!isFalsy(val) && (!Component || isString(val) || !isNaN(val) || val === true)) {\n                attr(k, val);\n            }\n        }\n\n        const node = elementOpenEnd(element);\n        const component = Component && (DOM.getNodeComponent(node) || new Component(node));\n\n        if (component && isObject(component.properties)) {\n            let componentProperties = component.properties;\n            for (let k in props) {\n                if (componentProperties.hasOwnProperty(k)) {\n                    component[k] = props[k];\n                }\n            }\n        }\n\n        if (component && children.length === 0) {\n            skip();\n        } else {\n            handleChildren(children);\n        }\n        elementClose(element);\n        return node;\n    };\n}\n\nexport function patch(scope, fn, data) {\n    return originalPatch(scope, interpolate.bind(this, fn, data));\n}\n\nexport { text };\n","/**\n * A list of HTMLElement properties to proxy from the node to the component instance.\n * @type Array\n * @private\n */\nconst DOM_PROXY = {\n    attributes: 1,\n    classList: 1,\n    getAttribute: 0,\n    hasAttribute: 0,\n    setAttribute: 0,\n    removeAttribute: 0,\n    addEventListener: 0,\n    removeEventListener: 0,\n    dispatchEvent: 0,\n    style: 1,\n    querySelector: 0,\n    querySelectorAll: 0,\n    shadowRoot: 1,\n    attachShadow: 0,\n    createShadowRoot: 0,\n    innerText: 2,\n    innerHTML: 2,\n};\n\n/**\n * Reference to Node prototype.\n * @type Object\n * @private\n */\nfunction checkNode() {\n    /* istanbul ignore if  */\n    if (!this.node) {\n        throw new ReferenceError('The component\\'s `node` is undefined.');\n    }\n}\n\n/**\n * Add a proxy property descriptor to a prototype.\n * @private\n *\n * @param {Object} proto The prototype to update.\n * @param {String} property The property name to proxy.\n * @param {Number} type The property type (0: function, 1: getter, 2: setter).\n */\nfunction proxyProperty(proto, property, type) {\n    let desc = {};\n    if (type === 0) {\n        desc.value = function(...args) {\n            checkNode.call(this);\n            return this.node[property].call(this.node, ...args);\n        };\n    } else if (type > 0) {\n        desc.get = function() {\n            checkNode.call(this);\n            return this.node[property];\n        };\n        if (type > 1) {\n            desc.set = function(val) {\n                checkNode.call(this);\n                return this.node[property] = val;\n            };\n        }\n    }\n    Object.defineProperty(proto, property, desc);\n}\n\n/**\n * Add HTMLElement properties and methods proxies to a prototype.\n * @method proxy\n * @memberof DNA\n *\n * @param {Function} Component The component class to proxy.\n * @return {Function} The updated class.\n */\nexport function proxy(Component) {\n    for (let k in DOM_PROXY) {\n        proxyProperty(Component.prototype, k, DOM_PROXY[k]);\n    }\n    return Component;\n}\n","import { registry } from './registry.js';\nimport { connect } from './dom.js';\n\n/**\n * Instantiate all defined components in a DOM tree.\n * @param {HTMLElement} root The root Node of the tree.\n */\nexport function bootstrap(root) {\n    for (let k in registry.components) {\n        let Component = registry.get(k);\n        let elements = root.querySelectorAll(`${k}, [is=\"${k}\"]`);\n        for (let i = 0, len = elements.length; i < len; i++) {\n            let component = new Component(elements[i]);\n            connect(component);\n        }\n    }\n}\n","import { registry } from './registry.js';\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\n","import { appendChild } from './dom.js';\n\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    appendChild(node, element);\n    return element;\n}\n","/**\n * A shortande to `Object.defineProperty` method.\n * @ignore\n */\nexport const define = Object.defineProperty;\n","import { define } from '../helpers/obj-define.js';\nconst sym = 'components';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace DNA.registry\n * @memberof DNA\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @memberof DNA.registry\n     * @type {Object}\n     * @private\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        define(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","import { Symbol } from '../helpers/symbol.js';\n\n/**\n * Symbol for DNA component mixin.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const DNA_SYMBOL = Symbol('dna');\n/**\n * Symbol for component instance.\n * Bound to a node.\n * @type {String}\n * @private\n */\nexport const COMPONENT_SYMBOL = Symbol('component');\n/**\n * Symbol for node instance.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const NODE_SYMBOL = Symbol('node');\n/**\n * Symbol for style element.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const STYLE_SYMBOL = Symbol('style');\n","import { DNA_SYMBOL, COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => {\n    const Component = class extends SuperClass {\n        /**\n         * @private\n         */\n        get [DNA_SYMBOL]() {\n            return true;\n        }\n        /**\n         * @property {HTMLElement} node Get component node reference.\n         * @name node\n         * @type {HTMLElement}\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        get node() {\n            return this[NODE_SYMBOL];\n        }\n        set node(node) {\n            node[COMPONENT_SYMBOL] = this;\n            this[NODE_SYMBOL] = node;\n        }\n        /**\n         * Fires when an instance was inserted into the document.\n         * @method connectedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        connectedCallback() {\n            this.node[COMPONENT_SYMBOL] = this;\n        }\n        /**\n         * Fires when an instance was detached from the document.\n         * @method disconnectedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        disconnectedCallback() {}\n        /**\n         * Fires when an attribute was added, removed, or updated.\n         * @method attributeChangedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         *\n         * @param {String} attrName The changed attribute name.\n         * @param {String} oldVal The value of the attribute before the change.\n         * @param {String} newVal The value of the attribute after the change.\n         */\n        attributeChangedCallback() {}\n    };\n\n    return Component;\n};\n","/**\n * Alias to native `CustomEvent`.\n * @type {Function}\n * @private\n */\nlet CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    /**\n     * Polyfill `CustomEvent`.\n     * @type {Function}\n     * @private\n     */\n    CustomEvent = function(ev, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\n/** Polyfill for CustomEvent constructor. */\nexport { CustomEvent };\n","import { isUndefined, isFunction, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|*} tpl A template to use instead of `this.template`.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            return tpl.call(this);\n        }\n        let root = this.shadowRoot || this;\n        if (isUndefined(this.__innerHTML)) {\n            this.__innerHTML = root.innerHTML;\n        }\n        root.innerHTML = `${this.__innerHTML}${tpl}`;\n    }\n};\n","import { reduce } from '../helpers/arr-reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @author Justin Fagnani (https://github.com/justinfagnani)\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extends superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DNA.DOM\n * @memberof DNA\n * @static\n */\nexport { DOM };\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace DNA.MIXINS\n * @memberof DNA\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","import { isFunction } from '@dnajs/core/src/lib/typeof.js';\nimport { patch } from '../lib/idom.js';\n\nexport const IDOMMixin = (superClass) => class extends superClass {\n    render(template) {\n        template = template || this.template;\n        if (isFunction(template)) {\n            let tpl = template.bind(this);\n            template = () => patch(this.shadowRoot || this.node, tpl);\n        }\n        super.render(template);\n    }\n};\n","/**\n * DNA\n * (c) 2015-2017 Chialab (http://www.chialab.it) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern with IncrementalDOM templates.\n */\nimport * as IDOM from './src/lib/idom.js';\nimport { IDOMMixin } from './src/mixins/idom.js';\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\nimport { proxy } from '@dnajs/core/src/lib/proxy.js';\n\nMIXINS.IDOMMixin = IDOMMixin;\n\nexport * from '@dnajs/core/src/core.js';\nexport { proxy };\nexport { registry } from '@dnajs/core/src/lib/registry.js';\nexport { bootstrap } from '@dnajs/core/src/lib/bootstrap.js';\nexport { define } from '@dnajs/core/src/lib/define.js';\nexport { render } from '@dnajs/core/src/lib/render.js';\nexport { IDOM };\n\nconst Component = proxy(class {\n    constructor(node) {\n        this.node = node || document.createElement(this.is);\n    }\n});\n\nexport class BaseComponent extends mix(Component).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin,\n    IDOMMixin\n) {}\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","Symbol","name","self","getComponentNode","elem","node","getNodeComponent","COMPONENT_SYMBOL","connect","element","DNA_SYMBOL","disconnect","update","oldValue","newValue","constructor","observedAttributes","indexOf","createElement","Ctr","registry","get","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","getAttribute","removeAttribute","reduce","arr","callback","k","len","length","reducePrototype","getPrototypeOf","reduceProperty","key","properties","proto","hasOwnProperty","desc","getOwnPropertyDescriptor","res","push","reduceObjectProperty","scope","prop","dispatch","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","matches","target","selector","MATCHES_SELECTOR","checkDelegate","event","delegateCallback","_this","scoped","sheet","rules","cssRules","insertRule","reg","RegExp","text","i","rule","body","cssText","selectorText","split","shift","map","trim","match","join","replace","convertShadowCSS","style","css","is","textContent","fullMatch","mod","slice","ownerDocument","ROOT_DOC","createStyle","component","styleElem","id","Blank","NodeData","nodeName","attrs","createMap","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","Context","created","notifications","nodesCreated","deleted","nodesDeleted","handleChildren","children","forEach","child","interpolate","template","this","chunk","h","props","unshift","Component","val","isNaN","elementOpenEnd","DOM","componentProperties","patch","fn","originalPatch","bind","checkNode","ReferenceError","proxyProperty","type","args","set","defineProperty","proxy","DOM_PROXY","bootstrap","root","components","elements","querySelectorAll","define","tagName","config","render","sym","toLowerCase","full","NODE_SYMBOL","STYLE_SYMBOL","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","getterFn","setterFn","undefined","validateType","initialized","changed","observe","unobserve","io","splice","defaultSet","clb","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","Number","PropertiesMixin","_SuperClass","observed","propertyChangedCallback","changedProp","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","EventsMixin","events","addEventListener","removeEventListener","delegate","wrapCallback","trigger","StyleMixin","filter","protoCSS","shadowRoot","head","classList","add","TemplateMixin","tpl","__innerHTML","innerHTML","Mixin","superclass","with","arguments","c","mixin","mix","superClass","MIXINS","create","has","initData","getData","importNode","isElement","localName","attributes","firstChild","getNamespaceForTag","tag","namespaceURI","doc","namespace","el","createElementNS","createText","createTextNode","markCreated","markDeleted","notifyChanges","isDocumentRoot","Document","DocumentFragment","getAncestry","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","currentNode","currentParent","markFocused","focusPath","patchFactory","run","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","retVal","patchInner","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","clearUnvisitedDOM","lastChild","enterNode","getNextNode","nextNode","exitNode","elementOpen","elementClose","skip","symbols","getNamespace","lastIndexOf","applyAttr","attrNS","setAttributeNS","applyProp","setStyleValue","setProperty","applyStyle","elStyle","applyAttributeTyped","updateAttribute","argsBuilder","statics","var_args","coreElementOpen","isNew","j","elementOpenStart","apply","coreElementClose","coreText","formatted","IDOMMixin","BaseComponent"],"mappings":"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"}