{"version":3,"file":"dna-idom.observer.js","sources":["node_modules/incremental-dom/src/util.js","node_modules/incremental-dom/src/node_data.js","node_modules/incremental-dom/src/context.js","packages/dna-core/src/lib/typeof.js","packages/dna-core/src/helpers/symbol.js","packages/dna-core/src/lib/dom.js","packages/dna-core/src/helpers/arr-reduce.js","packages/dna-core/src/lib/reduce.js","packages/dna-core/src/lib/dispatch.js","packages/dna-core/src/lib/property.js","packages/dna-core/src/mixins/properties-component.js","packages/dna-core/src/helpers/matches.js","packages/dna-core/src/mixins/events-component.js","packages/dna-core/src/lib/shadow-css.js","packages/dna-core/src/mixins/style-component.js","packages/dna-idom/src/lib/idom.js","packages/dna-core/src/lib/proxy.js","packages/dna-core/src/lib/bootstrap.js","packages/dna-core/src/lib/define.js","packages/dna-core/src/lib/render.js","node_modules/incremental-dom/src/nodes.js","node_modules/incremental-dom/src/notifications.js","node_modules/incremental-dom/src/dom_util.js","node_modules/incremental-dom/src/core.js","node_modules/incremental-dom/src/symbols.js","node_modules/incremental-dom/src/attributes.js","node_modules/incremental-dom/src/virtual_elements.js","packages/dna-core/src/helpers/obj-define.js","packages/dna-core/src/lib/registry.js","packages/dna-core/src/lib/symbols.js","packages/dna-core/src/mixins/component.js","packages/dna-core/src/helpers/custom-event.js","packages/dna-core/src/mixins/template-component.js","packages/dna-core/src/lib/mixins.js","packages/dna-core/src/core.js","packages/dna-idom/src/lib/observer.js","packages/dna-idom/src/mixins/idom.js","packages/dna-idom/index.js"],"sourcesContent":["/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","/**\n * Check if an value is a function.\n * @method isFunction\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","/**\n * Wrap Symbol function.\n * @private\n *\n * @param {String} name The symbol name.\n * @return {Symbol|String} A real symbol if supported or a string key.\n */\nexport function Symbol(name) {\n    if (self.Symbol) {\n        return self.Symbol(name);\n    }\n    return `__${name}`;\n}\n","import { isFunction, isString } from './typeof.js';\nimport { registry } from './registry.js';\nimport { DNA_SYMBOL, COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * Retrieve a HTMLElement instance from a component instance.\n * @method getComponentNode\n * @memberof DNA.DOM\n *\n * @param {Object} elem The component instance.\n * @return {HTMLElement} The node for the component instance.\n */\nexport function getComponentNode(elem) {\n    return elem && elem.node;\n}\n/**\n * Retrieve a component instance from a HTMLElement instance.\n * @method getNodeComponent\n * @memberof DNA.DOM\n *\n * @param {HTMLElement} elem The node instance.\n * @return {Object} The component for the node instance.\n */\nexport function getNodeComponent(elem) {\n    return elem && elem[COMPONENT_SYMBOL];\n}\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    element = getNodeComponent(element) || element;\n    if (element[DNA_SYMBOL]) {\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            element[UPDATED].call(element, name, oldValue, newValue);\n            return true;\n        }\n    }\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {Function|String} Ctr The component constructor or tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(Ctr) {\n    if (isString(Ctr)) {\n        Ctr = registry.get(Ctr);\n    }\n    if (isFunction(Ctr)) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    if (parent !== element.parentNode || parent.lastElementChild !== element) {\n        if (element.parentNode) {\n            removeChild(element.parentNode, element);\n        }\n        parent.appendChild(element);\n        return connect(element);\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    parent.removeChild(element);\n    return disconnect(element);\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    parent = getComponentNode(parent) || parent;\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.nextSibling !== refNode) {\n        if (element.parentNode) {\n            disconnect(element);\n        }\n        parent.insertBefore(element, refNode);\n        return connect(element);\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {HTMLElement} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    element = getComponentNode(element) || element;\n    refNode = getComponentNode(refNode) || refNode;\n    if (element.parentNode) {\n        disconnect(element);\n    }\n    parent.replaceChild(element, refNode);\n    disconnect(refNode);\n    return connect(element);\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.setAttribute(name, value);\n    return update(element, name, oldValue, value);\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    element = getComponentNode(element) || element;\n    let oldValue = element.getAttribute(name);\n    element.removeAttribute(name);\n    return update(element, name, oldValue, null);\n}\n","/**\n * Reduce an array to a single value.\n * Similar to `Array.prototype.reduce`.\n * @method reduce\n * @ignore\n *\n * @param {Array} arr The array to reduce.\n * @param {Function} callback The reducer function to fire for all value of the array.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced array.\n */\nexport function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n","import { reduce } from '../helpers/arr-reduce.js';\n\n/**\n * Reduce an object prototype chain to a single value.\n * @method reducePrototype\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {Function} callback The reducer function to fire for all value of the prototype chain.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced prototype chain.\n */\nexport function reducePrototype(obj, callback, value) {\n    while (obj) {\n        value = callback(value, obj);\n        obj = Object.getPrototypeOf(obj);\n    }\n    return value;\n}\n/**\n * Reduce to array of property values of a prototype chain.\n * @method reduceProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Array} A list of property values.\n */\nexport function reduceProperty(obj, key) {\n    return reducePrototype(obj, (properties, proto) => {\n        if (proto.hasOwnProperty(key)) {\n            let desc = Object.getOwnPropertyDescriptor(proto, key);\n            let res;\n            if (desc.hasOwnProperty('value')) {\n                res = desc.value;\n            } else if (desc.hasOwnProperty('get')) {\n                res = desc.get.call(obj);\n            }\n            properties.push(res);\n        }\n        return properties;\n    }, []);\n}\n/**\n * Marge an array of property values of a prototype chain.\n * @method reduceObjectProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Object} A merged list of property values.\n */\nexport function reduceObjectProperty(scope, prop) {\n    let protoProp = reduceProperty(scope, prop);\n    return reduce(protoProp, (res, proto) => {\n        for (let k in proto) {\n            if (!res.hasOwnProperty(k)) {\n                res[k] = proto[k];\n            }\n        }\n        return res;\n    }, {});\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../helpers/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\nimport { define } from '../helpers/obj-define.js';\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n */\nexport class Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    if (this.initialized) {\n                        this.changed(val, oldValue);\n                    }\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        this.defaultSet = false;\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb.call(this.scope, this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n            this.defaultSet = true;\n        }\n        this.initialized = true;\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Function|Array} ctrs A single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { define } from '../helpers/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isFalsy, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop, Property } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {Object} component The component to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let props = reduceObjectProperty(this, 'properties');\n        for (let k in props) {\n            if (!(props[k] instanceof Property)) {\n                props[k] = prop(props[k]);\n            }\n        }\n        define(this, 'properties', { value: props });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe((changedProp, newValue, oldValue) => {\n                    if (attrName) {\n                        setAttribute(this, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this, eventName, {\n                            component: this,\n                            property: changedProp.name,\n                            newValue,\n                            oldValue,\n                        });\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (isUndefined(this[name]) || prop.defaultSet) {\n                if (this.hasAttribute(attrName || name)) {\n                    this[name] = getValue(prop, this.getAttribute(attrName || name));\n                } else if (!isUndefined(this.node[name])) {\n                    this[name] = this.node[name];\n                }\n            }\n            if (attrName) {\n                setAttribute(this, attrName, this[name]);\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback() {}\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","/**\n * Alias to Element prototype.\n * @type {Object}\n * @private\n */\nconst ELEM_PROTO = Element.prototype;\n\n/**\n * Alias to `Element.prototype.matches`.\n * @type {Function}\n * @private\n */\nconst MATCHES_SELECTOR = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n\n/**\n * Polyfill for `Element.matches API`.\n * @private\n *\n * @param {HTMLElement} target The node to check.\n * @param {String} selector The selector to match.\n * @return {Boolean} The target matches the selector.\n */\nexport function matches(target, selector) {\n    return MATCHES_SELECTOR.call(target, selector);\n}\n","import { define } from '../helpers/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../helpers/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\n/**\n * Check if an event has a selector in mathc in target list.\n * @private\n *\n * @param {Event} event The event to check.\n * @param {HTMLElement} node The root node.\n * @param {String} selector The CSS selector to match.\n * @return {HTMLElement} The element in target list which matches the selector.\n */\nfunction checkDelegate(event, node, selector) {\n    if (!selector) {\n        return node;\n    }\n    let target = event.target;\n    while (target && target !== node) {\n        if (matches(target, selector)) {\n            return target;\n        }\n        target = target.parentNode;\n    }\n    return null;\n}\n/**\n * Generate a delegate listener for an event.\n * @private\n *\n * @param {String} selector The CSS selector to match.\n * @param {Function} callback The original callback for the event.\n * @return {Function} Wrapped callback with a delegation check.\n */\nfunction delegateCallback(selector, callback) {\n    return (ev) => {\n        let target = checkDelegate(ev, this.node, selector);\n        if (target) {\n            callback.call(this, ev, target);\n        }\n    };\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Iterate `events` properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let events = reduceObjectProperty(this, 'events');\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let ev = k.trim().split(' ');\n                let name = ev.shift();\n                let selector = ev.join(' ');\n                events[k] = {\n                    name,\n                    selector,\n                    callback: delegateCallback.call(this, selector, callback),\n                };\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n        define(this, 'events', { value: events });\n    }\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events;\n        for (let k in events) {\n            this.addEventListener(events[k].name, events[k].callback);\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        let events = this.events;\n        for (let k in events) {\n            this.removeEventListener(events[k].name, events[k].callback);\n        }\n        super.disconnectedCallback();\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = delegateCallback.call(this, selector, callback);\n        return this.addEventListener(evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","/**\n * A regex to match css `:host` selector.\n * @type {RegExp}\n * @private\n */\nconst HOST_REGEX = /\\:host(\\(([^({)]+(\\([^)]*\\))?)+\\))?/g;\n\n/**\n * Add a scope to all selectors.\n * @private\n *\n * @param {CSSStyleSheet} sheet The css sheet to scope.\n * @param {String} scope The scope selector.\n * @return {String} The scoped css.\n */\nfunction scoped(sheet, scope) {\n    let rules = sheet.cssRules || sheet.rules;\n    if (sheet.insertRule) {\n        let reg = new RegExp(`${scope}([\\\\s\\.\\[:]|$)`);\n        let text = '';\n        for (let i = 0, len = rules.length; i < len; i++) {\n            let rule = rules[i];\n            let body = rule.cssText;\n            if (rule.selectorText) {\n                let selector = rule.cssText.split('{').shift().split(',')\n                    .map((rule) => {\n                        rule = rule.trim();\n                        if (rule.match(reg)) {\n                            return rule;\n                        }\n                        return `${scope} ${rule}`;\n                    })\n                    .join(', ');\n                text += rule.cssText.replace(rule.selectorText, selector);\n            } else if (rule.cssRules || rule.rules) {\n                scoped(rule, scope);\n                text += rule.cssText;\n            } else {\n                text += body;\n            }\n        }\n        return text;\n    }\n}\n\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {HTMLStyleElement} style The style element.\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nexport function convertShadowCSS(style, css, is) {\n    let scope = `.${is}`;\n    style.textContent = css.replace(HOST_REGEX, (fullMatch, mod) =>\n        `${scope}${mod ? mod.slice(1, -1) : ''}`\n    );\n    style.textContent = scoped(style.sheet, scope) || '';\n}\n","import { define } from '../helpers/obj-define.js';\nimport { reduceProperty } from '../lib/reduce.js';\nimport { isString } from '../lib/typeof.js';\nimport { convertShadowCSS } from '../lib/shadow-css.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The root document element.\n * @type {DocumentFragment}\n * @private\n */\nconst ROOT_DOC = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || ROOT_DOC;\n}\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {Object} component A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(component) {\n    let styleElem = ownerDocument(component.node).createElement('style');\n    styleElem.id = `style-${component.is}`;\n    return styleElem;\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Inherit all css properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    constructor(node) {\n        super(node);\n        let css = reduceProperty(this, 'css')\n            .filter((protoCSS) => isString(protoCSS))\n            .join('\\n');\n        if (css) {\n            define(this, 'css', { value: css });\n        }\n    }\n    /**\n     * Create or update a style element for a component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (isString(this.css)) {\n            if (this.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this);\n                    style.textContent = this.css;\n                    this.shadowRoot.appendChild(style);\n                }\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this);\n                ownerDocument(this.node).head.appendChild(style);\n                convertShadowCSS(style, this.css, this.is);\n            }\n        }\n        this.classList.add(this.is);\n    }\n};\n","import { isFalsy, isObject, isFunction, isArray, isString } from '@dnajs/core/src/lib/typeof.js';\nimport { DOM } from '@dnajs/core/src/core.js';\nimport { registry } from '@dnajs/core/src/lib/registry.js';\nimport {\n    skip,\n    text,\n    attr,\n    elementClose,\n    elementOpenStart,\n    elementOpenEnd,\n    patch as originalPatch,\n} from 'incremental-dom/index.js';\n\nfunction handleChildren(children) {\n    children.forEach((child) => {\n        if (isFunction(child)) {\n            child();\n        } else if (isArray(child)) {\n            handleChildren(child);\n        } else if (child) {\n            text(child);\n        }\n    });\n}\n\nfunction interpolate(template, data) {\n    if (isFunction(template)) {\n        let res = template.call(this, data);\n        interpolate.call(this, res);\n    } else if (isArray(template)) {\n        template.forEach((chunk) => {\n            interpolate.call(this, chunk);\n        });\n    }\n}\n\n\nexport function h(element, props, ...children) {\n    return () => {\n        if (!isObject(props)) {\n            if (props) {\n                children.unshift(props);\n            }\n            props = {};\n        }\n        let key = props.key;\n        delete props.key;\n\n        const Component = registry.get(props.is || element);\n        elementOpenStart(element, key);\n\n        for (let k in props) {\n            let val = props[k];\n            if (!isFalsy(val) && (!Component || isString(val) || !isNaN(val) || val === true)) {\n                attr(k, val);\n            }\n        }\n\n        const node = elementOpenEnd(element);\n        const component = Component && (DOM.getNodeComponent(node) || new Component(node));\n\n        if (component && isObject(component.properties)) {\n            let componentProperties = component.properties;\n            for (let k in props) {\n                if (componentProperties.hasOwnProperty(k)) {\n                    component[k] = props[k];\n                }\n            }\n        }\n\n        if (component && children.length === 0) {\n            skip();\n        } else {\n            handleChildren(children);\n        }\n        elementClose(element);\n        return node;\n    };\n}\n\nexport function patch(scope, fn, data) {\n    return originalPatch(scope, interpolate.bind(this, fn, data));\n}\n\nexport { text };\n","/**\n * A list of HTMLElement properties to proxy from the node to the component instance.\n * @type Array\n * @private\n */\nconst DOM_PROXY = {\n    attributes: 1,\n    classList: 1,\n    getAttribute: 0,\n    hasAttribute: 0,\n    setAttribute: 0,\n    removeAttribute: 0,\n    addEventListener: 0,\n    removeEventListener: 0,\n    dispatchEvent: 0,\n    style: 1,\n    querySelector: 0,\n    querySelectorAll: 0,\n    shadowRoot: 1,\n    attachShadow: 0,\n    createShadowRoot: 0,\n    innerText: 2,\n    innerHTML: 2,\n};\n\n/**\n * Reference to Node prototype.\n * @type Object\n * @private\n */\nfunction checkNode() {\n    /* istanbul ignore if  */\n    if (!this.node) {\n        throw new ReferenceError('The component\\'s `node` is undefined.');\n    }\n}\n\n/**\n * Add a proxy property descriptor to a prototype.\n * @private\n *\n * @param {Object} proto The prototype to update.\n * @param {String} property The property name to proxy.\n * @param {Number} type The property type (0: function, 1: getter, 2: setter).\n */\nfunction proxyProperty(proto, property, type) {\n    let desc = {};\n    if (type === 0) {\n        desc.value = function(...args) {\n            checkNode.call(this);\n            return this.node[property].call(this.node, ...args);\n        };\n    } else if (type > 0) {\n        desc.get = function() {\n            checkNode.call(this);\n            return this.node[property];\n        };\n        if (type > 1) {\n            desc.set = function(val) {\n                checkNode.call(this);\n                return this.node[property] = val;\n            };\n        }\n    }\n    Object.defineProperty(proto, property, desc);\n}\n\n/**\n * Add HTMLElement properties and methods proxies to a prototype.\n * @method proxy\n * @memberof DNA\n *\n * @param {Function} Component The component class to proxy.\n * @return {Function} The updated class.\n */\nexport function proxy(Component) {\n    for (let k in DOM_PROXY) {\n        proxyProperty(Component.prototype, k, DOM_PROXY[k]);\n    }\n    return Component;\n}\n","import { registry } from './registry.js';\nimport { connect } from './dom.js';\n\n/**\n * Instantiate all defined components in a DOM tree.\n * @param {HTMLElement} root The root Node of the tree.\n */\nexport function bootstrap(root) {\n    for (let k in registry.components) {\n        let Component = registry.get(k);\n        let elements = root.querySelectorAll(`${k}, [is=\"${k}\"]`);\n        for (let i = 0, len = elements.length; i < len; i++) {\n            let component = new Component(elements[i]);\n            connect(component);\n        }\n    }\n}\n","import { registry } from './registry.js';\n\n/**\n * Register a new component.\n * @method define\n * @memberof! DNA.\n * @static\n *\n * @param {String} name The id of the component.\n * @param {Function} Ctr The component constructor.\n * @param {Object} config Optional component configuration.\n */\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\n","import { appendChild } from './dom.js';\n\n/**\n * Create and append a new component instance.\n * @method render\n * @memberof! DNA.\n * @static\n *\n * @param {HTMLElement} node The parent node.\n * @param {Function} Component The component constructor.\n * @param {Object} props Optional set of properties to set to the component.\n * @return {HTMLElement} The new component instance.\n */\nexport function render(node, Component, props) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    appendChild(node, element);\n    return element;\n}\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n","/**\n * A shortande to `Object.defineProperty` method.\n * @ignore\n */\nexport const define = Object.defineProperty;\n","import { define } from '../helpers/obj-define.js';\nconst sym = 'components';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace DNA.registry\n * @memberof DNA\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @memberof DNA.registry\n     * @type {Object}\n     * @private\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        define(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","import { Symbol } from '../helpers/symbol.js';\n\n/**\n * Symbol for DNA component mixin.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const DNA_SYMBOL = Symbol('dna');\n/**\n * Symbol for component instance.\n * Bound to a node.\n * @type {String}\n * @private\n */\nexport const COMPONENT_SYMBOL = Symbol('component');\n/**\n * Symbol for node instance.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const NODE_SYMBOL = Symbol('node');\n/**\n * Symbol for style element.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const STYLE_SYMBOL = Symbol('style');\n","import { DNA_SYMBOL, COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => {\n    const Component = class extends SuperClass {\n        /**\n         * @private\n         */\n        get [DNA_SYMBOL]() {\n            return true;\n        }\n        /**\n         * @property {HTMLElement} node Get component node reference.\n         * @name node\n         * @type {HTMLElement}\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        get node() {\n            return this[NODE_SYMBOL];\n        }\n        set node(node) {\n            node[COMPONENT_SYMBOL] = this;\n            this[NODE_SYMBOL] = node;\n        }\n        /**\n         * Fires when an instance was inserted into the document.\n         * @method connectedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        connectedCallback() {\n            this.node[COMPONENT_SYMBOL] = this;\n        }\n        /**\n         * Fires when an instance was detached from the document.\n         * @method disconnectedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         */\n        disconnectedCallback() {}\n        /**\n         * Fires when an attribute was added, removed, or updated.\n         * @method attributeChangedCallback\n         * @memberof DNA.MIXINS.ComponentMixin\n         * @instance\n         *\n         * @param {String} attrName The changed attribute name.\n         * @param {String} oldVal The value of the attribute before the change.\n         * @param {String} newVal The value of the attribute after the change.\n         */\n        attributeChangedCallback() {}\n    };\n\n    return Component;\n};\n","/**\n * Alias to native `CustomEvent`.\n * @type {Function}\n * @private\n */\nlet CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    /**\n     * Polyfill `CustomEvent`.\n     * @type {Function}\n     * @private\n     */\n    CustomEvent = function(ev, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\n/** Polyfill for CustomEvent constructor. */\nexport { CustomEvent };\n","import { isUndefined, isFunction, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|*} tpl A template to use instead of `this.template`.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            return tpl.call(this);\n        }\n        let root = this.shadowRoot || this;\n        if (isUndefined(this.__innerHTML)) {\n            this.__innerHTML = root.innerHTML;\n        }\n        root.innerHTML = `${this.__innerHTML}${tpl}`;\n    }\n};\n","import { reduce } from '../helpers/arr-reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @author Justin Fagnani (https://github.com/justinfagnani)\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extends superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DNA.DOM\n * @memberof DNA\n * @static\n */\nexport { DOM };\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace DNA.MIXINS\n * @memberof DNA\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\n","import { symbols, attributes, notifications } from 'incremental-dom/index.js';\nimport { DOM } from '@dnajs/core/src/core.js';\nimport { registry } from '@dnajs/core/src/lib/registry.js';\nimport { isFalsy } from '@dnajs/core/src/lib/typeof.js';\n\nconst _created = notifications.nodesCreated;\nconst _removed = notifications.nodesDeleted;\nconst _changed = attributes[symbols.default];\n\nnotifications.nodesCreated = function(nodes) {\n    nodes.forEach((node) => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n            let Ctr = registry.get(node.getAttribute('is') || node.tagName);\n            let component = DOM.getNodeComponent(node) || (Ctr && new Ctr(node));\n            if (component) {\n                DOM.connect(component);\n            }\n        }\n    });\n    /* istanbul ignore if */\n    if (_created) {\n        _created(nodes);\n    }\n};\n\nnotifications.nodesDeleted = function(nodes) {\n    nodes.forEach((node) => {\n        DOM.disconnect(node);\n    });\n    /* istanbul ignore if */\n    if (_removed) {\n        _removed(nodes);\n    }\n};\n\nattributes[symbols.default] = function(node, attrName, attrValue) {\n    let oldValue = node.getAttribute(attrName);\n    /* istanbul ignore if */\n    if (_changed) {\n        _changed(node, attrName, attrValue);\n    }\n    let elem = DOM.getNodeComponent(node);\n    if (elem) {\n        let attrs = elem.constructor.observedAttributes || [];\n        if (attrs.indexOf(attrName) !== -1) {\n            attrValue = (isFalsy(attrValue)) ? null : attrValue;\n            DOM.update(elem, attrName, oldValue, attrValue);\n        } else if (elem.properties && elem.properties.hasOwnProperty(attrName)) {\n            elem[attrName] = attrValue;\n        }\n    }\n};\n","import { isFunction } from '@dnajs/core/src/lib/typeof.js';\nimport { patch } from '../lib/idom.js';\n\nexport const IDOMMixin = (superClass) => class extends superClass {\n    render(template) {\n        template = template || this.template;\n        if (isFunction(template)) {\n            let tpl = template.bind(this);\n            template = () => patch(this.shadowRoot || this.node, tpl);\n        }\n        super.render(template);\n    }\n};\n","/**\n * DNA\n * (c) 2015-2017 Chialab (http://www.chialab.it) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern with IncrementalDOM templates.\n */\nimport * as IDOM from './src/lib/idom.js';\nimport { IDOMMixin } from './src/mixins/idom.js';\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\nimport { proxy } from '@dnajs/core/src/lib/proxy.js';\n\nMIXINS.IDOMMixin = IDOMMixin;\n\nexport * from '@dnajs/core/src/core.js';\nexport { proxy };\nexport { registry } from '@dnajs/core/src/lib/registry.js';\nexport { bootstrap } from '@dnajs/core/src/lib/bootstrap.js';\nexport { define } from '@dnajs/core/src/lib/define.js';\nexport { render } from '@dnajs/core/src/lib/render.js';\nexport { IDOM };\n\nconst Component = proxy(class {\n    constructor(node) {\n        this.node = node || document.createElement(this.is);\n    }\n});\n\nexport class BaseComponent extends mix(Component).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin,\n    IDOMMixin\n) {}\n"],"names":["Blank","NodeData","nodeName","key","attrs","createMap","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","Context","created","notifications","nodesCreated","deleted","nodesDeleted","isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","Symbol","name","self","getComponentNode","elem","node","getNodeComponent","COMPONENT_SYMBOL","connect","element","DNA_SYMBOL","disconnect","update","oldValue","newValue","constructor","observedAttributes","indexOf","createElement","Ctr","registry","get","appendChild","parent","parentNode","lastElementChild","removeChild","insertBefore","refNode","nextSibling","replaceChild","setAttribute","value","getAttribute","removeAttribute","reduce","arr","callback","k","len","length","reducePrototype","getPrototypeOf","reduceProperty","properties","proto","hasOwnProperty","desc","getOwnPropertyDescriptor","res","push","reduceObjectProperty","scope","prop","dispatch","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","context","attr","currentAttrValue","matches","target","selector","MATCHES_SELECTOR","checkDelegate","event","delegateCallback","_this","scoped","sheet","rules","cssRules","insertRule","reg","RegExp","i","rule","body","cssText","selectorText","split","shift","map","trim","match","join","replace","convertShadowCSS","style","css","is","textContent","fullMatch","mod","slice","ownerDocument","ROOT_DOC","createStyle","component","styleElem","id","handleChildren","children","forEach","child","interpolate","template","this","chunk","h","props","unshift","Component","val","isNaN","elementOpenEnd","DOM","componentProperties","patch","fn","originalPatch","bind","checkNode","ReferenceError","proxyProperty","type","args","set","defineProperty","proxy","DOM_PROXY","bootstrap","root","components","elements","querySelectorAll","define","tagName","config","render","create","has","initData","getData","importNode","isElement","Element","localName","attributes","undefined","firstChild","getNamespaceForTag","tag","namespaceURI","doc","namespace","el","createElementNS","createText","createTextNode","markCreated","markDeleted","notifyChanges","isDocumentRoot","Document","DocumentFragment","getAncestry","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","currentNode","currentParent","markFocused","focusPath","patchFactory","run","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","retVal","patchInner","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","clearUnvisitedDOM","lastChild","enterNode","getNextNode","nextNode","exitNode","elementOpen","elementClose","skip","symbols","getNamespace","lastIndexOf","applyAttr","attrNS","setAttributeNS","applyProp","setStyleValue","setProperty","applyStyle","elStyle","applyAttributeTyped","updateAttribute","default","argsBuilder","statics","var_args","coreElementOpen","isNew","j","arguments","elementOpenStart","apply","coreElementClose","coreText","formatted","sym","toLowerCase","full","NODE_SYMBOL","STYLE_SYMBOL","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","getterFn","setterFn","validateType","initialized","changed","observe","unobserve","io","splice","defaultSet","clb","named","attrRequested","attrName","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","Number","PropertiesMixin","_SuperClass","observed","propertyChangedCallback","changedProp","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","EventsMixin","events","addEventListener","removeEventListener","delegate","wrapCallback","trigger","StyleMixin","filter","protoCSS","shadowRoot","head","classList","add","TemplateMixin","tpl","__innerHTML","innerHTML","Mixin","superclass","with","c","mixin","mix","superClass","MIXINS","_created","_removed","_changed","nodes","nodeType","Node","ELEMENT_NODE","attrValue","IDOMMixin","BaseComponent"],"mappings":"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"}