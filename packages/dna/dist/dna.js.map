{"version":3,"file":"dna.js","sources":["packages/dna/src/lib/typeof.js","packages/dna/src/lib/dispatch.js","packages/dna/src/lib/property.js","packages/dna/src/mixins/properties-component.js","packages/dna/src/lib/style.js","packages/dna/src/lib/render.js","packages/dna/index.js","packages/dna/src/lib/mixins.js","packages/dna/src/lib/shim.js","packages/dna/src/mixins/component.js","packages/dna/src/mixins/events-component.js","packages/dna/src/mixins/style-component.js","packages/dna/src/mixins/template-component.js"],"sourcesContent":["export function isFunction(fn) {\n    return typeof fn === 'function';\n}\n\nexport function isString(str) {\n    return typeof str === 'string';\n}\n\nexport function isObject(obj) {\n    return typeof obj === 'object';\n}\n\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n","import { isString } from './typeof.js';\n\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\nconst define = Object.defineProperty;\n\nclass Property {\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.required = false;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if (this.validateType(val)) {\n                if (this.validator(val)) {\n                    let oldValue = this.value;\n                    if (oldValue !== val) {\n                        this.value = val;\n                        this.changed(val, oldValue);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n\n    observe(fn) {\n        if (isFunction(fn)) {\n            this._.push(fn);\n        }\n        return this;\n    }\n\n    unobserve(fn) {\n        let io = this._.indexOf(fn);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            this._[i](this, newValue, oldValue);\n        }\n    }\n\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n\n    scoped(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        return this;\n    }\n\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n        }\n        return this;\n    }\n\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n\n    require() {\n        this.required = true;\n        return this;\n    }\n\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n\n    validateType(val) {\n        if (val === null || val === undefined) {\n            return true;\n        }\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        // eslint-disable-next-line\n        throw new TypeError(\n            `Invalid \\`${val}\\` value for \"${this.name}\" property${this.scope ? ` for ${this.scope.is}` : ''}.`\n        );\n    }\n\n    init(value) {\n        value = isUndefined(value) ? this.defaultValue : value;\n        if (!isUndefined(value)) {\n            if (!this.setter(value)) {\n                if (this.required) {\n                    throw new Error(\n                        `\"${this.name}\" property is required${this.scope ? ` for ${this.scope.is}` : ''}.`\n                    );\n                }\n            }\n        }\n    }\n}\n\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, PropertiesMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(PropertiesMixin) {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * On `created` callback, apply attributes to properties.\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k).scoped(this).init();\n            let { attrName, eventName } = prop;\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this, eventName);\n                    }\n                });\n            }\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * On `attributeChanged` callback, sync attributes with properties.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        this.properties[propName].observe(callback);\n    }\n};\n","let doc = document;\n\nexport function createStyle(id) {\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${id}`);\n    let head = doc.head;\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n\n/**\n * Add `<style>` tag for the component.\n * @param {String} styleElem The CSS style element.\n * @param {String} style A CSS string.\n * @return {HTMLStyleElement} the style tag created.\n */\nexport function importStyle(styleElem, style) {\n    if (style !== styleElem.textContent) {\n        styleElem.textContent = style;\n        return true;\n    }\n    return false;\n}\n","export function render(node, Component, props = {}) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    node.appendChild(element);\n    return element;\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix } from './src/lib/mixins.js';\nimport { Shim } from './src/lib/shim.js';\nimport { ComponentMixin } from './src/mixins/component.js';\nimport { PropertiesMixin } from './src/mixins/properties-component.js';\nimport { EventsMixin } from './src/mixins/events-component.js';\nimport { StyleMixin } from './src/mixins/style-component.js';\nimport { TemplateMixin } from './src/mixins/template-component.js';\n\nexport { ComponentMixin };\nexport { PropertiesMixin };\nexport { EventsMixin };\nexport { StyleMixin };\nexport { TemplateMixin };\nexport { Shim };\nexport { mix };\nexport { prop } from './src/lib/property.js';\nexport const registry = self.customElements;\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\nexport { render } from './src/lib/render.js';\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n *\n * @example\n * my-component.js\n * ```js\n * import { BaseComponent } from 'dna/component';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n */\nexport class BaseComponent extends mix(\n    new Shim(self.HTMLElement)\n).with(\n    ComponentMixin,\n    PropertiesMixin,\n    StyleMixin,\n    EventsMixin,\n    TemplateMixin\n) {}\n","/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nclass Mixin {\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n\n    with() {\n        // eslint-disable-next-line\n        return [].slice.call(arguments, 0).reduce((c, m) => m(c), this.superclass);\n    }\n}\n\nexport const mix = (superClass) => new Mixin(superClass);\n","export class Shim {\n    constructor(Elem) {\n        const ShimElement = function() {\n            return Reflect.construct(Elem, [], this.constructor);\n        };\n\n        ShimElement.prototype = Object.create(Elem.prototype, {\n            constructor: {\n                value: ShimElement,\n                configurable: true,\n                writable: true,\n            },\n        });\n\n        return ShimElement;\n    }\n}\n","export const ComponentMixin = (SuperClass) => class extends SuperClass {\n    get is() {\n        return this.getAttribute('is') || this.localName;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     */\n    connectedCallback() {}\n    /**\n     * Fires when an instance was detached from the document.\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n *\n * @example\n * my-component.js\n * ```js\n * import { EventsMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(EventsMixin) {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    this.addEventListener(evName, (ev) => {\n                        callback.call(this, ev, this);\n                    });\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    delegate(evName, selector, callback) {\n        this.addEventListener(evName, (event) => {\n            let target = event.target;\n            while (target && target !== this) {\n                if (target.matches(selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        });\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","import { createStyle, importStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { StyleMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(StyleMixin) {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr.prototype, 'styleElem', {\n                value: createStyle(this.is),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (style) {\n            importStyle(this.styleElem, style);\n        }\n    }\n};\n","import { isFunction, isString } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, TemplateMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(TemplateMixin) {\n *   get template() {\n *     return '<h1>${this.name}</h1>';\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        if (this.template) {\n            let props = this.properties;\n            if (props) {\n                let callback = () => {\n                    this.render();\n                };\n                for (let k in props) {\n                    props[k].observe(callback);\n                }\n            }\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.template) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     */\n    render() {\n        let tpl = this.template;\n        /* istanbul ignore else */\n        if (isFunction(tpl)) {\n            tpl();\n        } else if (isString(tpl)) {\n            this.innerHTML = tpl;\n        } else {\n            throw new Error('Invalid template property.');\n        }\n    }\n};\n"],"names":["isFunction","fn","isString","str","isObject","obj","isUndefined","isArray","Array","dispatch","node","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","prop","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","setAttribute","context","attr","value","currentAttrValue","getAttribute","undefined","removeAttribute","createStyle","id","styleElem","doc","createElement","type","head","firstElementChild","insertBefore","appendChild","importStyle","style","textContent","render","Component","props","element","k","define","tagName","config","registry","Mixin","superclass","with","slice","call","arguments","reduce","c","m","this","mix","superClass","Shim","Elem","ShimElement","Reflect","construct","constructor","prototype","Object","create","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","localName","defineProperty","_","required","validator","_setter","val","getterFn","_this","setterFn","validateType","oldValue","changed","observe","push","unobserve","io","indexOf","splice","newValue","i","len","length","Ctr","named","name","attrRequested","attrName","default","initValue","defaultValue","freeze","scoped","scope","bind","attribute","eventName","require","getter","callback","_this2","setter","validate","is","init","Error","Number","PropertiesMixin","_SuperClass","properties","res","partialProps","hasAttribute","oldVal","newVal","observeProperty","propName","SPLIT_SELECTOR","EventsMixin","events","rule","match","selector","trim","delegate","addEventListener","event","target","matches","parentNode","trigger","document","StyleMixin","updateCSS","classList","add","css","TemplateMixin","template","tpl","innerHTML","self","customElements","BaseComponent","HTMLElement"],"mappings":"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"}