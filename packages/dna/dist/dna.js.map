{"version":3,"file":"dna.js","sources":["packages/dna/src/lib/typeof.js","packages/dna/src/lib/shim-custom.js","packages/dna/src/lib/dispatch.js","packages/dna/src/lib/property.js","packages/dna/src/mixins/properties-component.js","packages/dna/src/lib/style.js","packages/dna/src/lib/render.js","packages/dna/src/lib/nodes.js","packages/dna/index.js","packages/dna/src/lib/mixins.js","packages/dna/src/lib/registry.js","packages/dna/src/mixins/component.js","packages/dna/src/mixins/events-component.js","packages/dna/src/mixins/style-component.js","packages/dna/src/mixins/template-component.js"],"sourcesContent":["export function isFunction(fn) {\n    return typeof fn === 'function';\n}\n\nexport function isString(str) {\n    return typeof str === 'string';\n}\n\nexport function isObject(obj) {\n    return typeof obj === 'object';\n}\n\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n","import { registry } from './registry.js';\nimport { isString } from './typeof.js';\n\nfunction isNew(node) {\n    try {\n        return !isString(node.outerHTML);\n    } catch (ex) {\n        return true;\n    }\n}\n\nexport function Shim(Original) {\n    class Polyfilled {\n        constructor() {\n            if (!isNew(this)) {\n                return this;\n            }\n            let desc = registry.get(this.constructor);\n            let config = desc.config;\n            // Find the tagname of the constructor and create a new element with it\n            let element = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            element.__proto__ = desc.Ctr.prototype;\n            if (config.extends) {\n                element.setAttribute('is', desc.is);\n            }\n            return element;\n        }\n    }\n    Polyfilled.prototype = Object.create(Original.prototype, {\n        constructor: {\n            value: Polyfilled,\n            configurable: true,\n            writable: true,\n        },\n    });\n    return Polyfilled;\n}\n","import { isString } from './typeof.js';\n\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\nconst define = Object.defineProperty;\n\nclass Property {\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.required = false;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if (this.validateType(val)) {\n                if (this.validator(val)) {\n                    let oldValue = this.value;\n                    if (oldValue !== val) {\n                        this.value = val;\n                        this.changed(val, oldValue);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n\n    observe(fn) {\n        if (isFunction(fn)) {\n            this._.push(fn);\n        }\n        return this;\n    }\n\n    unobserve(fn) {\n        let io = this._.indexOf(fn);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            this._[i](this, newValue, oldValue);\n        }\n    }\n\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n\n    scoped(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        return this;\n    }\n\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n        }\n        return this;\n    }\n\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n\n    require() {\n        this.required = true;\n        return this;\n    }\n\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n\n    validateType(val) {\n        if (val === null || val === undefined) {\n            return true;\n        }\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        // eslint-disable-next-line\n        throw new TypeError(\n            `Invalid \\`${val}\\` value for \"${this.name}\" property${this.scope ? ` for ${this.scope.is}` : ''}.`\n        );\n    }\n\n    init(value) {\n        value = isUndefined(value) ? this.defaultValue : value;\n        if (!isUndefined(value)) {\n            if (!this.setter(value)) {\n                if (this.required) {\n                    throw new Error(\n                        `\"${this.name}\" property is required${this.scope ? ` for ${this.scope.is}` : ''}.`\n                    );\n                }\n            }\n        }\n    }\n}\n\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, PropertiesMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(PropertiesMixin) {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * On `created` callback, apply attributes to properties.\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k).scoped(this).init();\n            let { attrName, eventName } = prop;\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this, eventName);\n                    }\n                });\n            }\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * On `attributeChanged` callback, sync attributes with properties.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        this.properties[propName].observe(callback);\n    }\n};\n","let doc = document;\n\nexport function createStyle(id) {\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${id}`);\n    let head = doc.head;\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n\n/**\n * Add `<style>` tag for the component.\n * @param {String} styleElem The CSS style element.\n * @param {String} style A CSS string.\n * @return {HTMLStyleElement} the style tag created.\n */\nexport function importStyle(styleElem, style) {\n    if (style !== styleElem.textContent) {\n        styleElem.textContent = style;\n        return true;\n    }\n    return false;\n}\n","export function render(node, Component, props = {}) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    node.appendChild(element);\n    return element;\n}\n","import { isFunction } from './typeof.js';\nimport { registry } from './registry.js';\n\nconst CONNECTED = 'connectedCallback';\nconst DISCONNECTED = 'disconnectedCallback';\nconst UPDATED = 'attributeChangedCallback';\n\nexport function getComponent(node) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n        let is = node.getAttribute('is') || node.tagName;\n        return registry.get(is);\n    }\n    return registry.get(node);\n}\n\nexport function connect(node) {\n    if (isFunction(node[CONNECTED])) {\n        node[CONNECTED].call(node);\n    }\n}\n\nexport function disconnect(node) {\n    if (isFunction(node[DISCONNECTED])) {\n        node[DISCONNECTED].call(node);\n    }\n}\n\nexport function update(node, name, oldValue, newValue) {\n    if (isFunction(node[UPDATED]) && name !== 'is') {\n        node[UPDATED].call(node, name, oldValue, newValue);\n    }\n}\n\nexport function bind(node, Ctr) {\n    node.__proto__ = Ctr.prototype;\n    Object.defineProperty(node, 'constructor', {\n        value: Ctr,\n        configurable: true,\n        writable: true,\n    });\n    Ctr.call(node);\n}\n\nexport function create(node, descriptor) {\n    descriptor = descriptor || getComponent(node);\n    if (descriptor) {\n        bind(node, descriptor.Ctr);\n        connect(node);\n    }\n}\n\nexport function createElement(is) {\n    let descriptor = getComponent(is);\n    if (descriptor) {\n        return new descriptor.Ctr();\n    }\n}\n\nexport function appendChild(parent, node) {\n    if (parent !== node.parentNode || parent.lastElementChild !== node) {\n        if (node.parentNode) {\n            removeChild(node.parentNode, node);\n        }\n        parent.appendChild(node);\n        connect(node);\n    }\n}\n\nexport function removeChild(parent, node) {\n    parent.removeChild(node);\n    disconnect(node);\n}\n\nexport function setAttribute(node, name, value) {\n    let oldValue = node.getAttribute(name);\n    node.setAttribute(name, value);\n    let attrs = node.constructor.observedAttributes || [];\n    if (attrs.indexOf(name) !== -1) {\n        update(node, name, oldValue, value);\n    }\n}\n\nexport function removeAttribute(node, name) {\n    let oldValue = node.getAttribute(name);\n    node.removeAttribute(name);\n    let attrs = node.constructor.observedAttributes || [];\n    if (attrs.indexOf(name) !== -1) {\n        update(node, name, oldValue, null);\n    }\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix } from './src/lib/mixins.js';\nimport { Shim } from './src/lib/shim-custom.js';\nimport { ComponentMixin } from './src/mixins/component.js';\nimport { PropertiesMixin } from './src/mixins/properties-component.js';\nimport { EventsMixin } from './src/mixins/events-component.js';\nimport { StyleMixin } from './src/mixins/style-component.js';\nimport { TemplateMixin } from './src/mixins/template-component.js';\nimport { registry } from './src/lib/registry.js';\nimport { render as originalRender } from './src/lib/render.js';\nimport { connect } from './src/lib/nodes.js';\n\nexport { ComponentMixin };\nexport { PropertiesMixin };\nexport { EventsMixin };\nexport { StyleMixin };\nexport { TemplateMixin };\nexport { Shim };\nexport { mix };\nexport { prop } from './src/lib/property.js';\nexport * from './src/lib/nodes.js';\n// export const registry = self.customElements;\n// export function define(tagName, Component, config) {\n//     return registry.define(tagName, Component, config);\n// }\nexport { registry };\nexport function define(tagName, Component, config) {\n    return registry.define(tagName, Component, config);\n}\nexport function render(tagName, Component, config) {\n    let elem = originalRender(tagName, Component, config);\n    connect(elem);\n    return elem;\n}\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @extends HTMLElement\n *\n * @example\n * my-component.js\n * ```js\n * import { BaseComponent } from 'dna/component';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n */\nexport class BaseComponent extends mix(\n    new Shim(self.HTMLElement)\n).with(\n    ComponentMixin,\n    PropertiesMixin,\n    StyleMixin,\n    EventsMixin,\n    TemplateMixin\n) {}\n","/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nclass Mixin {\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n\n    with() {\n        // eslint-disable-next-line\n        return [].slice.call(arguments, 0).reduce((c, m) => m(c), this.superclass);\n    }\n}\n\nexport const mix = (superClass) => new Mixin(superClass);\n","import { isFunction, isString } from './typeof.js';\n\nexport const registry = {\n    components: {},\n    define(name, Ctr, config = {}) {\n        this.components[name.toLowerCase()] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    get(name) {\n        if (isString(name)) {\n            return this.components[name.toLowerCase()];\n        } else if (isFunction(name)) {\n            for (let k in this.components) {\n                let desc = this.components[k];\n                if (desc.Ctr === name) {\n                    return desc;\n                }\n            }\n        }\n    },\n};\n","export const ComponentMixin = (SuperClass) => class extends SuperClass {\n    get is() {\n        return this.getAttribute('is') || this.localName;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     */\n    connectedCallback() {}\n    /**\n     * Fires when an instance was detached from the document.\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @param {String} attrName The changed attribute name.\n     * @param {*} oldVal The value of the attribute before the change.\n     * @param {*} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n *\n * @example\n * my-component.js\n * ```js\n * import { EventsMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(EventsMixin) {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    this.addEventListener(evName, (ev) => {\n                        callback.call(this, ev, this);\n                    });\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    delegate(evName, selector, callback) {\n        this.addEventListener(evName, (event) => {\n            let target = event.target;\n            while (target && target !== this) {\n                if (target.matches(selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        });\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","import { createStyle, importStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { StyleMixin, Component, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(StyleMixin) {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr.prototype, 'styleElem', {\n                value: createStyle(this.is),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (style) {\n            importStyle(this.styleElem, style);\n        }\n    }\n};\n","import { isFunction, isString } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n *\n * @example\n * my-component.js\n * ```js\n * import { Component, TemplateMixin, mix } from 'dna/component';\n * export class MyComponent extends mix(Component).with(TemplateMixin) {\n *   get template() {\n *     return '<h1>${this.name}</h1>';\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * app.js\n * ```js\n * import { define } from 'dna/component';\n * import { MyComponent } from './components/my-component/my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        if (this.template) {\n            let props = this.properties;\n            if (props) {\n                let callback = () => {\n                    this.render();\n                };\n                for (let k in props) {\n                    props[k].observe(callback);\n                }\n            }\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.template) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     */\n    render() {\n        let tpl = this.template;\n        /* istanbul ignore else */\n        if (isFunction(tpl)) {\n            tpl();\n        } else if (isString(tpl)) {\n            this.innerHTML = tpl;\n        } else {\n            throw new Error('Invalid template property.');\n        }\n    }\n};\n"],"names":["isFunction","fn","isString","str","isObject","obj","isUndefined","isArray","Array","isNew","node","outerHTML","ex","Shim","Original","Polyfilled","this","desc","registry","get","constructor","config","element","document","createElement","extends","is","__proto__","Ctr","prototype","setAttribute","Object","create","dispatch","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","prop","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","context","attr","value","currentAttrValue","getAttribute","undefined","removeAttribute","createStyle","id","styleElem","doc","type","head","firstElementChild","insertBefore","appendChild","importStyle","style","textContent","render","Component","props","k","getComponent","nodeType","Node","ELEMENT_NODE","tagName","connect","CONNECTED","call","disconnect","DISCONNECTED","update","name","oldValue","newValue","UPDATED","bind","defineProperty","descriptor","parent","parentNode","lastElementChild","removeChild","attrs","observedAttributes","indexOf","define","elem","originalRender","Mixin","superclass","with","slice","arguments","reduce","c","m","mix","superClass","components","toLowerCase","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","localName","_","required","validator","_setter","val","getterFn","_this","setterFn","validateType","changed","observe","push","unobserve","io","splice","i","len","length","named","attrRequested","attrName","default","initValue","defaultValue","freeze","scoped","scope","attribute","eventName","require","getter","callback","_this2","setter","validate","init","Error","Number","PropertiesMixin","_SuperClass","properties","res","partialProps","hasAttribute","oldVal","newVal","observeProperty","propName","SPLIT_SELECTOR","EventsMixin","events","rule","match","selector","trim","delegate","addEventListener","event","target","matches","trigger","StyleMixin","updateCSS","classList","add","css","TemplateMixin","template","tpl","innerHTML","BaseComponent","self","HTMLElement"],"mappings":"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"}