{"version":3,"file":"dna-custom-elements-v1.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/lib/mixins.js","packages/dna-custom-elements-v1/src/lib/shim.js","packages/dna-custom-elements-v1/index.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/polyfills/custom-event.js","node_modules/@dnajs/core/src/polyfills/matches.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/core.js","packages/dna-custom-elements-v1/src/mixins/custom-element.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\n/**\n * Shortcut to `Object.defineProperty`.\n * @type {Function}\n * @private\n */\nconst define = Object.defineProperty;\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n * @private\n */\nclass Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    this.changed(val, oldValue);\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Property|Function|Array} ctrs A Property to clone or a single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isFalsy, isArray, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (attrName) {\n                if (isUndefined(this[name])) {\n                    if (this.node.hasAttribute(attrName)) {\n                        this[name] = getValue(prop, this.node.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this.node, attrName, this[name]);\n                }\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback() {}\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { EVENTS_SYMBOL } from '../lib/symbols.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\nfunction addToPrivate(scope, evName, callback) {\n    let internal = scope[EVENTS_SYMBOL] = scope[EVENTS_SYMBOL] || {};\n    let events = internal[evName] = internal[evName] || [];\n    events.push(callback);\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    let wrapCallback = (event) => {\n                        callback.call(this, event, this);\n                    };\n                    this.node.addEventListener(evName, wrapCallback);\n                    addToPrivate(this, evName, wrapCallback);\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        let events = this[EVENTS_SYMBOL] || {};\n        for (let k in events) {\n            events[k].forEach((callback) => this.node.removeEventListener(k, callback));\n        }\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire when the event fires.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = (event) => {\n            let target = event.target;\n            let node = this.node;\n            while (target && target !== node) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        };\n        this.node.addEventListener(evName, wrapCallback);\n        addToPrivate(this, evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this.node, evName, data, bubbles, cancelable);\n    }\n};\n","import { isString } from '../lib/typeof.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\nconst HOST_REGEX = /(\\:host)(\\([^)]*\\))?/g;\nconst CSS_RULES_REGEX = /(#|\\.|\\@|\\[|[a-zA-Z]|\\:)([^{\\;\\}]*){/g;\nconst SEPARATOR_REGEX = /\\,\\s*/;\nconst rootDoc = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || rootDoc;\n}\n\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(node) {\n    let styleElem = ownerDocument(node).createElement('style');\n    styleElem.id = `style-${node.is}`;\n    return styleElem;\n}\n\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nfunction convertShadowCSS(css, is) {\n    const scope = `.${is}`;\n    return css\n        .replace(CSS_RULES_REGEX, (fullMatch) => {\n            let rules = fullMatch\n                .slice(0, -1)\n                .split(SEPARATOR_REGEX)\n                .map((rule) => {\n                    if (rule.indexOf(':host') === 0) {\n                        return rule.replace(HOST_REGEX, (fullMatch, host, state) => {\n                            state = state ? state.slice(1, -1) : '';\n                            return `${scope}${state}`;\n                        });\n                    } else {\n                        return `${scope} ${rule}`;\n                    }\n                })\n                .join(', ');\n            return `${rules}{`;\n        });\n}\n\nfunction updateCSS(element) {\n    let style = element.css;\n    if (isString(style)) {\n        if (element.node.shadowRoot) {\n            element[STYLE_SYMBOL].textContent = style;\n        } else {\n            element.constructor[STYLE_SYMBOL].textContent = convertShadowCSS(style, element.is);\n        }\n    }\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.css) {\n            if (this.node.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this.node);\n                    this.node.shadowRoot.appendChild(style);\n                }\n                updateCSS(this);\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this.node);\n                ownerDocument(this.node).head.appendChild(style);\n                updateCSS(this);\n            }\n        }\n        this.node.classList.add(this.is);\n    }\n};\n","function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n\n/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n * Mix a class with a mixin.\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extend superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","export function shim(Elem) {\n    const ShimElement = function() {\n        return Reflect.construct(Elem, [], this.constructor);\n    };\n\n    ShimElement.prototype = Object.create(Elem.prototype, {\n        constructor: {\n            value: ShimElement,\n            configurable: true,\n            writable: true,\n        },\n    });\n\n    return ShimElement;\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements spec.\n */\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\nimport { CustomElementMixin } from './src/mixins/custom-element.js';\nimport { shim } from './src/lib/shim.js';\n\nMIXINS.CustomElementMixin = CustomElementMixin;\n\nexport { prop } from '@dnajs/core/src/core.js';\nexport { shim, mix, MIXINS };\nexport const registry = self.customElements;\nexport function define(...args) {\n    return registry.define(...args);\n}\nexport function render(node, Component, props = {}) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    node.appendChild(element);\n    return element;\n}\n\nexport class BaseComponent extends mix(\n    shim(self.HTMLElement)\n).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin,\n    CustomElementMixin\n) {}\n","/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace registry\n * @memberof! DNA.\n * @static\n */\n\nconst sym = 'components';\n\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @type {Object}\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        Object.defineProperty(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","export const COMPONENT_SYMBOL = '__component';\nexport const NODE_SYMBOL = '__node';\nexport const EVENTS_SYMBOL = '__events';\nexport const STYLE_SYMBOL = '__style';\n","import { COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @property {HTMLElement} node Get component node reference.\n     * @name node\n     * @type {HTMLElement}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get node() {\n        return this[NODE_SYMBOL];\n    }\n    set node(node) {\n        node[COMPONENT_SYMBOL] = this;\n        this[NODE_SYMBOL] = node;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","let CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    let proto = CustomEvent.prototype;\n    CustomEvent = function(event, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = proto;\n}\n\nexport { CustomEvent };\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isFunction, isString, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            (this.node.shadowRoot || this.node).innerHTML = tpl;\n        } else if (!isFalsy(tpl)) {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DOM\n * @memberof! DNA.\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace MIXINS\n * @memberof! DNA.\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport * from './lib/symbols.js';\nexport * from './lib/typeof.js';\n","import { COMPONENT_SYMBOL } from '@dnajs/core/src/core.js';\n\nexport const CustomElementMixin = (superClass) => class extends superClass {\n    /**\n     * @property {String} is Get component id.\n     * @name is\n     * @type {String}\n     * @memberof DNA.MIXINS.CustomElementMixin\n     * @instance\n     */\n    get is() {\n        return (this.node.getAttribute('is') || this.node.localName).toLowerCase();\n    }\n    constructor() {\n        super();\n        this[COMPONENT_SYMBOL] = this;\n    }\n};\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","dispatch","node","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","prop","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","setAttribute","context","attr","value","currentAttrValue","getAttribute","removeAttribute","addToPrivate","scope","callback","internal","EVENTS_SYMBOL","events","push","ownerDocument","rootDoc","createStyle","styleElem","createElement","id","is","convertShadowCSS","css","replace","CSS_RULES_REGEX","fullMatch","rules","slice","split","SEPARATOR_REGEX","map","rule","indexOf","HOST_REGEX","host","state","join","updateCSS","element","style","shadowRoot","STYLE_SYMBOL","textContent","constructor","reduce","arr","k","len","length","shim","Elem","ShimElement","Reflect","construct","this","create","define","registry","render","Component","props","appendChild","sym","COMPONENT_SYMBOL","name","Ctr","config","toLowerCase","defineProperty","full","desc","NODE_SYMBOL","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","self","proto","event","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","val","getterFn","_this","setterFn","undefined","validateType","oldValue","changed","observe","unobserve","io","splice","newValue","i","clb","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","bind","Number","PropertiesMixin","_SuperClass","properties","res","partialProps","observed","observedAttributes","propertyChangedCallback","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","match","selector","trim","delegate","wrapCallback","addEventListener","forEach","_this3","removeEventListener","target","_this4","parentNode","trigger","StyleMixin","head","classList","add","TemplateMixin","template","tpl","innerHTML","Mixin","superclass","with","args","arguments","c","mixin","mix","superClass","MIXINS","CustomElementMixin","_superClass","localName","customElements","BaseComponent","HTMLElement"],"mappings":"4LASA,SAAgBA,GAAWC,SACD,kBAARA,GAWlB,QAAgBC,GAASD,SACC,gBAARA,GAWlB,QAAgBE,GAASF,SAC0B,oBAAxCG,OAAOC,UAAUC,SAASC,KAAKN,GAW1C,QAAgBO,GAAYP,SACF,mBAARA,GAWlB,QAAgBQ,GAAQR,SACbS,OAAMD,QAAQR,GAWzB,QAAgBU,GAAQV,SACbO,GAAYP,IAAgB,OAARA,GAAgBA,KAAQ,ECxDvD,QAAgBW,GAASC,EAAMC,EAAQC,MAAMC,8DAAgBC,iEACpDf,EAASY,QACJ,IAAII,WAAU,8BAEpBC,GAAK,GAAIC,GAAYN,UACbC,iCAILF,GAAKQ,cAAcF,GCqN9B,QAAgBG,GAAKC,SACbA,aAAgBC,GACTD,EAEJ,GAAIC,GAASD,GCpOxB,QAASE,GAASC,EAAUC,MACR,KAAZA,GAAkBD,EAASE,QAAQC,gBAC5B,MAENH,EAASE,QAAQE,kBAEPC,MAAKC,MAAML,GACpB,MAAOM,UAINN,GAWX,QAASO,GAAaC,EAASC,EAAMC,MAC7BC,GAAmBH,EAAQI,aAAaH,EACxCE,KAAqBD,IAChB1B,EAAQ0B,GAKmB,OAArBC,KACCE,gBAAgBJ,IALH,iBAAVC,OACC,MAEJH,aAAaE,EAAMC,KClCvC,QAASI,GAAaC,EAAO5B,EAAQ6B,MAC7BC,GAAWF,EAAMG,GAAiBH,EAAMG,OACxCC,EAASF,EAAS9B,GAAU8B,EAAS9B,SAClCiC,KAAKJ,GCKhB,QAASK,GAAcnC,SACZA,GAAKmC,eAAiBC,EAUjC,QAASC,GAAYrC,MACbsC,GAAYH,EAAcnC,GAAMuC,cAAc,kBACxCC,YAAcxC,EAAKyC,GACtBH,EAWX,QAASI,GAAiBC,EAAKF,MACrBZ,OAAYY,QACXE,GACFC,QAAQC,EAAiB,SAACC,MACnBC,GAAQD,EACPE,MAAM,GAAG,GACTC,MAAMC,GACNC,IAAI,SAACC,SAC4B,KAA1BA,EAAKC,QAAQ,SACND,EAAKR,QAAQU,EAAY,SAACR,EAAWS,EAAMC,YACtCA,EAAQA,EAAMR,MAAM,GAAG,GAAM,MAC3BnB,EAAQ2B,IAGZ3B,MAASuB,IAG1BK,KAAK,YACAV,SAItB,QAASW,GAAUC,MACXC,GAAQD,EAAQhB,GAChBtD,GAASuE,KACLD,EAAQ3D,KAAK6D,aACLC,GAAcC,YAAcH,IAE5BI,YAAYF,GAAcC,YAAcrB,EAAiBkB,EAAOD,EAAQlB,KCpE5F,QAASwB,GAAOC,EAAKpC,EAAUN,OACtB,GAAI2C,GAAI,EAAGC,EAAMF,EAAIG,OAAQF,EAAIC,EAAKD,MAC/BrC,EAASN,EAAO0C,EAAIC,GAAIA,EAAGD,SAEhC1C,GCJJ,QAAS8C,GAAKC,MACXC,GAAc,iBACTC,SAAQC,UAAUH,KAAUI,KAAKX,uBAGhCxE,UAAYD,OAAOqF,OAAOL,EAAK/E,8BAE5BgF,gBACO,YACJ,KAIXA,ECIX,QAAgBK,WACLC,GAASD,0BAEpB,QAAgBE,GAAO/E,EAAMgF,MAAWC,6DAChCtB,EAAU,GAAIqB,OACb,GAAIb,KAAKc,KACFd,GAAKc,EAAMd,YAElBe,YAAYvB,GACVA,q7BCjBLwB,EAAM,aCTCC,YDgBRD,4BAOME,EAAMC,MAAKC,+DACPF,EAAKG,qBACLC,eAAeH,EAAI9F,UAAW,UAC5B,iBAAM6F,WAEVF,GAAKE,OACFA,uCAWRA,EAAMK,MACFC,GAAOhB,KAAKQ,GAAKE,EAAKG,kBACtBG,QACOD,GAAOC,EAAOA,EAAKL,QC3CN,eACnBM,EAAc,SACd5D,EAAgB,WAChB8B,EAAe,UCKf+B,EAAiB,SAACC,8GAqB3BC,kCACS/F,KAAKoF,GAAoBT,kBAQlCqB,8CAWAC,4EAhCWtB,MAAKiB,iBAEP5F,KACAoF,GAAoBT,UACpBiB,GAAe5F,SAbgC8F,ICRxDvF,EAAc2F,KAAK3F,WAEvB,QAEQA,GAAY,QAClB,MAAMa,MACA+E,GAAQ5F,EAAYf,YACV,SAAS4G,EAAOC,MACtBC,GAAMC,SAASC,YAAY,wBAC3BC,gBAAgBL,EAAOC,EAAOlG,QAASkG,EAAOjG,WAAYiG,EAAOK,QAC9DJ,KAEC9G,UAAY2G,EVL5B,GAAMtB,GAAStF,OAAOkG,eAOhB9E,wBAMUD,6BACHiG,OACEjG,MACFd,EAAQc,QACDA,SAEPA,KAAOA,OACPkG,UAAY,kBAAM,QAClBC,QAAU,SAACC,SAAQA,SACnBC,SAAW,iBAAMC,GAAKxF,YACtByF,SAAW,SAACH,QACPE,EAAKH,QAAQC,KACN,OAARA,GAAwBI,SAARJ,GACjBE,EAAKG,aAAaL,IAAQE,EAAKJ,UAAUE,SAQnC,IAAIzG,uBACOyG,kBAAqBE,EAAK3B,wBAAyB2B,EAAKnF,MAAMY,YAR3E2E,GAAWJ,EAAKxF,KAChB4F,KAAaN,MACRtF,MAAQsF,IACRO,QAAQP,EAAKM,wBAelCE,iBAAQxF,UACA3C,EAAW2C,IAAazC,EAASyC,UAC5B6E,EAAEzE,KAAKJ,GAET6C,kBAOX4C,mBAAUzF,MACF0F,GAAK7C,KAAKgC,EAAEtD,QAAQvB,SACpB0F,MAAO,QACFb,EAAEc,OAAOD,EAAI,GAEf7C,kBAQX0C,iBAAQK,EAAUN,OACT,GAAIO,GAAI,EAAGvD,EAAMO,KAAKgC,EAAEtC,OAAQsD,EAAIvD,EAAKuD,IAAK,IAC3CC,GAAMjD,KAAKgC,EAAEgB,EACbtI,GAASuI,QACJ/F,MAAM+F,GAAKlI,KAAKiF,KAAK9C,MAAO8C,KAAM+C,EAAUN,KAE7CzC,KAAM+C,EAAUN,iBAShCrG,iBAAQuE,SACGX,MAAKjE,KAAK2C,QAAQiC,MAAS,eAStCuC,eAAMxC,eACGA,KAAOA,EACRV,KAAKmD,iBAAkB,SAClBC,SAAWpD,KAAKU,MAElBV,kBAOXqD,iBAAQC,eACCC,aAAe5I,EAAS2I,GACzB1I,OAAO4I,OAAOF,GACdA,EACGtD,kBAQXyD,wBAAUL,oEACF1I,GAAS0I,SACJD,eAAgB,OAChBC,SAAWA,SAEXD,gBAAkBC,OAClBA,SAAWpD,KAAKU,MAElBV,kBAOX5E,kBAASE,eACAoI,UAAYpI,EACV0E,kBAQX2D,gBAAOxG,oBACC3C,GAAW2C,UACNiF,SAAW,iBAAMjF,GAASyG,EAAK/G,SAEjCmD,kBASX6D,gBAAO1G,SACC3C,GAAW2C,UACN+E,QAAU/E,GAEZ6C,kBASX8D,kBAAS3G,SACD3C,GAAW2C,UACN8E,UAAY9E,GAEd6C,kBAQXwC,sBAAaL,MACLa,GAAI,EACJjH,EAAOiE,KAAKjE,QACI,IAAhBA,EAAK2D,cACE,OAEJsD,EAAIjH,EAAK2D,QAAQ,IAChByC,YAAepG,GAAKiH,IACpBb,EAAI9C,aAAe8C,EAAI9C,cAAgBtD,EAAKiH,UAErC,aAIR,eAOXe,cAAK7G,QACIA,MAAQA,IACNA,EAAO8C,KAAKU,UACVV,KAAKoC,SAAS4B,KAAKhE,UACnBA,KAAKsC,SAAS0B,KAAKhE,oBACV,IAEbhF,EAAYgF,KAAKuD,kBACZvD,KAAKU,MAAQV,KAAKuD,mBA2BpCrD,GAAOpE,EAAM,4BAAwBA,QACrCoE,EAAOpE,EAAM,+BAA2BA,GAAKQ,WAC7C4D,EAAOpE,EAAM,gCAA4BA,GAAKO,YAC9C6D,EAAOpE,EAAM,+BAA2BA,GAAKmI,UC5K7C,IAAaC,GAAkB,SAAC/C,0DAQxBgD,cACI7D,EAAQ+B,EAAK+B,UACb9D,IACKrF,EAAQqF,QACAA,MAELA,EAAMhB,OAAO,SAAC+E,EAAKC,OAClB,GAAI9E,KAAK8E,KACN9E,GAAK1D,EAAKwI,EAAa9E,UAExB6E,qBAKRvD,iBAAqB,oBACjBR,YACG,gBACI,OAEdiE,GAAWlC,EAAKhD,YAAYmF,kCACvBhF,MACD1D,GAAOwE,EAAMd,KACZ0D,MAAM1D,GACNmD,QAAQ,SAAC7G,EAAMiH,EAAUN,SACtBJ,GAAKoC,wBAAwB3I,EAAK4E,KAAM+B,EAAUM,KAErDgB,WACCX,GAAwBtH,EAAxBsH,SAAUM,EAAc5H,EAAd4H,SACXN,IAAYmB,EAAS7F,QAAQc,MAAO,MAChCiE,cACMjE,IAEX4D,GAAYM,MACPf,QAAQ,WACLS,KACaf,EAAKhH,KAAM+H,EAAUf,EAAKvG,EAAK4E,OAE5CgD,KACSrB,EAAKhH,KAAMqI,UAlB/B,GAAIlE,KAAKc,KAALd,sCA8Bb4B,yCACUA,gCACFd,GAAQN,KAAKoE,eACZ,GAAI5E,KAAKc,GAAO,IACbxE,GAAOwE,EAAMd,GACX4D,EAAmBtH,EAAnBsH,SAAU1C,EAAS5E,EAAT4E,IACZ0C,KACIpI,EAAYgF,KAAKU,IACbV,KAAK3E,KAAKqJ,aAAatB,UAClB1C,GAAQzE,EAASH,EAAMkE,KAAK3E,KAAK0B,aAAaqG,OAG1CpD,KAAK3E,KAAM+H,EAAUpD,KAAKU,mBAevDY,kCAAyB1E,EAAM+H,EAAQC,eAC7BtD,mCAAyB1E,EAAM+H,EAAQC,MACzCtE,GAAQN,KAAKoE,eACZ,GAAI5E,KAAKc,GAAO,IACbxE,GAAOwE,EAAMd,MACb1D,EAAKsH,WAAaxG,mBACbd,EAAK4E,MAAQzE,EAASH,EAAM8I,kBAgB7CH,iDAWAI,yBAAgBC,EAAU3H,SACf6C,MAAKoE,WAAWU,GAAUnC,QAAQxF,gBAW7C4H,2BAAkBD,EAAU3H,QACnBiH,WAAWU,GAAUlC,UAAUzF,OApIiBgE,IU3EvD6D,EAAaC,QAAQpK,UAEdqK,EAAUF,EAAWE,SAC9BF,EAAWG,oBACXH,EAAWI,mBACXJ,EAAWK,kBACXL,EAAWM,sBTDTC,EAAiB,gBA0CVC,EAAc,SAACrE,8GAOxBC,oDACUA,gCAEF9D,GAAS0C,KAAK1C,sBACTkC,MACDrC,GAAWzC,EAAS4C,EAAOkC,IAC3BoE,EAAKtG,EAAOkC,IACZlC,EAAOkC,OACPhF,EAAW2C,QAcL,IAAIzB,WAAU,kCAbhB+C,GAAOe,EAAEiG,MAAMF,GACfjK,EAASmD,EAAK,GACdiH,GAAYjH,EAAK,IAAM,IAAIkH,UAC3BD,IACKE,SAAStK,EAAQoK,EAAUvI,OAC7B,IACC0I,GAAe,SAACpE,KACP1G,OAAW0G,QAEnBpG,KAAKyK,iBAAiBxK,EAAQuK,OAChBvK,EAAQuK,SAflC,GAAIrG,KAAKlC,KAALkC,gBA4Bb6B,uDACUA,mCACF/D,GAAS0C,KAAK3C,kBACTmC,KACEA,GAAGuG,QAAQ,SAAC5I,SAAa6I,GAAK3K,KAAK4K,oBAAoBzG,EAAGrC,UADhE,GAAIqC,KAAKlC,KAALkC,gBAcboG,kBAAStK,EAAQoK,EAAUvI,cACnB0I,EAAe,SAACpE,UACZyE,GAASzE,EAAMyE,OACf7K,EAAO8K,EAAK9K,KACT6K,GAAUA,IAAW7K,GACpB6J,EAAQnK,KAAKmL,EAAQR,MACZ3K,OAAW0G,EAAOyE,KAEtBA,EAAOE,iBAGnB/K,KAAKyK,iBAAiBxK,EAAQuK,KACtB7F,KAAM1E,EAAQuK,gBAc/BQ,iBAAQ/K,EAAQC,MAAMC,8DAAgBC,mEAC3BL,GAAS4E,KAAK3E,KAAMC,EAAQC,EAAMC,EAASC,OAnFD0F,IC5CnDxC,EAAa,wBACbT,EAAkB,wCAClBK,EAAkB,QAClBd,EAAUmE,SA8FH0E,EAAa,SAACnF,8GACvBC,4CACUA,6BACFpB,KAAKhC,OACDgC,KAAK3E,KAAK6D,WAAY,KACjBc,KAAKb,GAAe,IACjBF,GAAQe,KAAKb,GAAgBzB,EAAYsC,KAAK3E,WAC7CA,KAAK6D,WAAWqB,YAAYtB,KAE3Be,UACP,KAAKA,KAAKX,YAAYF,GAAe,IACpCF,GAAQe,KAAKX,YAAYF,GAAgBzB,EAAYsC,KAAK3E,QAChD2E,KAAK3E,MAAMkL,KAAKhG,YAAYtB,KAChCe,WAGb3E,KAAKmL,UAAUC,IAAIzG,KAAKlC,QAhBmBqD,ISnE3CuF,EAAgB,SAACvF,8GAO1BC,6BACSjG,EAAQ6E,KAAK2G,gBACTvG,qBAEHgB,0CAQVqD,iCAAwBK,EAAUrC,EAAUM,eAClC0B,kCAAwBK,EAAUrC,EAAUM,GAC7C5H,EAAQ6E,KAAK2G,gBACTvG,sBAabA,gBAAOwG,QACGA,GAAO5G,KAAK2G,SACdnM,EAAWoM,KACP7L,KAAKiF,UACN,IAAItF,EAASkM,IACf5G,KAAK3E,KAAK6D,YAAcc,KAAK3E,MAAMwL,UAAYD,MAC7C,KAAKzL,EAAQyL,QACV,IAAIlL,WAAU,kCA1C2ByF,IRkBrD2F,wBAKUC,eACKA,sDACRA,WAAaA,qBAOtBC,mBAEQC,MAAU5I,MAAMtD,KAAKmM,UAAW,SAC7B5H,GAAO2H,EAAM,SAACE,EAAGC,SAAUA,GAAMD,IAAInH,KAAK+G,kBAQ5CM,EAAM,SAACC,SAAe,IAAIR,GAAMQ,ISrDhCC,kFCrBAC,EAAqB,SAACF,0DAY3BG,uBACKhH,0DAJGT,KAAK3E,KAAK0B,aAAa,OAASiD,KAAK3E,KAAKqM,WAAW7G,qBATLyG,GRMhEC,GAIOC,mBAAqBA,CAE5B,IAEarH,GAAWoB,KAAKoG,eAahBC,6FAAsBP,EAC/B1H,EAAK4B,KAAKsG,cACZb,KACEO,EAAOrG,eACPqG,EAAOrD,gBACPqD,EAAOjB,WACPiB,EAAO/B,YACP+B,EAAOb,cACPc"}