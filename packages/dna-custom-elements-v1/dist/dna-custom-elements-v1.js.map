{"version":3,"file":"dna-custom-elements-v1.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/lib/dom.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/polyfills/custom-event.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/polyfills/matches.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/lib/style.js","node_modules/@dnajs/core/src/mixins/style-component.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/polyfills/reduce.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/lib/shim.js","node_modules/@dnajs/core/src/core.js","packages/dna-custom-elements-v1/src/lib/shim.js","packages/dna-custom-elements-v1/index.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n","import { isFunction, isString } from './typeof.js';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace registry\n * @memberof! DNA.\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @type {Object}\n     */\n    components: {},\n    /**\n     * Register a new component.\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        this.components[name.toLowerCase()] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component descriptor by id.\n     * @private\n     * @param {String} name The component id.\n     * @return {Object} The component descriptor.\n     */\n    getDescriptor(name) {\n        if (isString(name)) {\n            return this.components[name.toLowerCase()];\n        } else if (isFunction(name)) {\n            for (let k in this.components) {\n                let desc = this.components[k];\n                if (desc.Ctr === name) {\n                    return desc;\n                }\n            }\n        }\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @param {String} name The component id.\n     * @return {Function} The component constructor.\n     */\n    get(name) {\n        let desc = this.getDescriptor(name);\n        if (desc) {\n            return desc.Ctr;\n        }\n    },\n};\n","export const COMPONENT_SYMBOL = '__component';\n","import { isFunction } from './typeof.js';\nimport { registry } from './registry.js';\nimport { COMPONENT_SYMBOL } from './symbols.js';\n\n/**\n * The `connectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst CONNECTED = 'connectedCallback';\n/**\n * The `disconnectedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst DISCONNECTED = 'disconnectedCallback';\n/**\n * The `attributeChangedCallback` name.\n * @private\n *\n * @type {String}\n * @see [W3C spec](https://www.w3.org/TR/custom-elements/#custom-element-reactions)\n */\nconst UPDATED = 'attributeChangedCallback';\n/**\n * Retrieve a component constructor from an Element or from a tag name.\n * @method getComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component|String} element The element or the tag name.\n * @param {Boolean} full Retrieve full component information.\n * @return {Function} The component constructor for the given param.\n */\nexport function getComponent(element, full = false) {\n    if (element.node) {\n        element = element.node;\n    }\n    if (element.nodeType === Node.ELEMENT_NODE) {\n        element = element.getAttribute('is') || element.tagName;\n    }\n    return full ? registry.getDescriptor(element) : registry.get(element);\n}\n/**\n * Check if a node is an instance of a component.\n * @method isComponent\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to check.\n * @return {Boolean}\n */\nexport function isComponent(element) {\n    let Ctr = getComponent(element);\n    return Ctr && (element instanceof Ctr);\n}\n/**\n * An helper for dynamically trigger the `connectedCallback` reaction on components.\n * @method connect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The attached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function connect(element) {\n    if (isComponent(element)) {\n        element[CONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `disconnectedCallback` reaction on components.\n * @method disconnect\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The detached node.\n * @return {Boolean} The callback has been triggered.\n */\nexport function disconnect(element) {\n    if (isComponent(element)) {\n        element[DISCONNECTED].call(element);\n        return true;\n    }\n}\n/**\n * An helper for dynamically trigger the `attributeChangedCallback` reaction on components.\n * @method update\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The updated element.\n * @return {Boolean} The callback has been triggered.\n */\nexport function update(element, name, oldValue, newValue) {\n    if (isComponent(element)) {\n        element[UPDATED].call(element, name, oldValue, newValue);\n        return true;\n    }\n}\n/**\n * Attach a component prototype to an already instantiated HTMLElement.\n * @method bind\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} node The node to update.\n * @param {Function} Ctr The component class to use (leave empty for auto detect).\n * @return {Boolean} The prototype has been attached.\n */\nexport function bind(node, Ctr) {\n    if (!isFunction(Ctr)) {\n        Ctr = getComponent(node);\n    }\n    if (isFunction(Ctr)) {\n        node.__proto__ = Ctr.prototype;\n        Object.defineProperty(node, 'constructor', {\n            value: Ctr,\n            configurable: true,\n            writable: true,\n        });\n        Ctr.call(node);\n        return true;\n    }\n    return false;\n}\n/**\n * Create a component instance.\n * @method createElement\n * @memberof DNA.DOM\n * @static\n *\n * @param {String} is The component tag name.\n * @return {HTMLElement} The component instance.\n */\nexport function createElement(is) {\n    let Ctr = getComponent(is);\n    if (Ctr) {\n        return new Ctr();\n    }\n}\n/**\n * Dynamically append a node and call the `connectedCallback`.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method appendChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to append.\n * @return {Boolean} The node has been appended.\n */\nexport function appendChild(parent, element) {\n    if (element.node) {\n        let node = element.node;\n        if (parent !== node.parentNode || parent.lastElementChild !== node) {\n            if (node.parentNode) {\n                removeChild(node.parentNode, element);\n            }\n            parent.appendChild(node);\n            return connect(element);\n        }\n    }\n    return false;\n}\n/**\n * Dynamically remove a node and call the `disconnectedCallback`.\n * @method removeChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to remove.\n * @return {Boolean} The node has been removed.\n */\nexport function removeChild(parent, element) {\n    if (element.node) {\n        parent.removeChild(element.node);\n        return disconnect(element);\n    }\n}\n/**\n * Dynamically insert a node before another and call all the reactions.\n * - disconnect the node if already in the tree\n * - connect the node after the insertion\n * @method insertBefore\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node for positioning.\n * @return {Boolean} The node has been appended.\n */\nexport function insertBefore(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        if (node.nextSibling !== refNode) {\n            if (node.parentNode) {\n                disconnect(element);\n            }\n            parent.insertBefore(node, refNode);\n            return connect(element);\n        }\n    }\n}\n/**\n * Dynamically replace a node with another and call all the reactions.\n * - disconnect the node if already in the tree\n * - disconnect the replaced node\n * - connect the first node after the insertion\n * @method replaceChild\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} parent The parent element.\n * @param {Component} element The element to insert.\n * @param {HTMLElement} refNode The node to replace.\n * @return {Boolean} The node has been appended.\n */\nexport function replaceChild(parent, element, refNode) {\n    if (element.node) {\n        let node = element.node;\n        if (node.parentNode) {\n            disconnect(element);\n        }\n        parent.replaceChild(node, refNode);\n        if (refNode[COMPONENT_SYMBOL]) {\n            disconnect(refNode[COMPONENT_SYMBOL]);\n        }\n        return connect(node);\n    }\n}\n/**\n * Dynamically update a node attribute and call all the reactions.\n * @method setAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @param {String} value The attribute value.\n * @return {Boolean} The node has been updated.\n */\nexport function setAttribute(element, name, value) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.setAttribute(name, value);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, value);\n        }\n    }\n}\n/**\n * Dynamically remove a node attribute and call all the reactions.\n * @method removeAttribute\n * @memberof DNA.DOM\n * @static\n *\n * @param {Component} element The element to update.\n * @param {String} name The attribute name.\n * @return {Boolean} The node has been updated.\n */\nexport function removeAttribute(element, name) {\n    if (element.node) {\n        let node = element.node;\n        let oldValue = node.getAttribute(name);\n        node.removeAttribute(name);\n        let attrs = element.constructor.observedAttributes || [];\n        if (attrs.indexOf(name) !== -1) {\n            return update(element, name, oldValue, null);\n        }\n    }\n}\n","import { COMPONENT_SYMBOL } from '../lib/symbols.js';\n\n/**\n * THe base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @property {String} is Get component id.\n     * @name is\n     * @type {String}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get is() {\n        return (this.getAttribute('is') || this.localName).toLowerCase();\n    }\n    get node() {\n        return this;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","let CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    let ev = new self.CustomEvent('test');\n    CustomEvent = self.CustomEvent;\n} catch(ex) {\n    CustomEvent = function(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined,\n        };\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\nexport { CustomEvent };\n","import { isString } from './typeof.js';\nimport { CustomEvent } from '../polyfills/custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\n\n/**\n * Shortcut to `Object.defineProperty`.\n * @type {Function}\n * @private\n */\nconst define = Object.defineProperty;\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n * @private\n */\nclass Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    this.changed(val, oldValue);\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Property|Function|Array} ctrs A Property to clone or a single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    if (ctrs instanceof Property) {\n        return ctrs;\n    }\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { isArray } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { isUndefined } from '../lib/typeof.js';\nimport { prop } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (value !== null && value !== undefined && value !== false) {\n            switch (typeof value) {\n            case 'string':\n            case 'number':\n                context.setAttribute(attr, value);\n                break;\n            case 'boolean':\n                context.setAttribute(attr, '');\n            }\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = this.properties;\n        if (props) {\n            if (!isArray(props)) {\n                props = [props];\n            }\n            props = props.reduce((res, partialProps) => {\n                for (let k in partialProps) {\n                    res[k] = prop(partialProps[k]);\n                }\n                return res;\n            }, {});\n        } else {\n            props = {};\n        }\n        Object.defineProperty(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k).init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName } = prop;\n            if (attrName) {\n                if (isUndefined(this[prop.name])) {\n                    if (this.node.hasAttribute(attrName)) {\n                        this[prop.name] = getValue(prop, this.node.getAttribute(attrName));\n                    }\n                } else {\n                    setAttribute(this.node, attrName, this[prop.name]);\n                }\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","const ELEM_PROTO = Element.prototype;\n\nexport const matches = ELEM_PROTO.matches ||\n    ELEM_PROTO.matchesSelector ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n","import { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../polyfills/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\nconst SPLIT_SELECTOR = /([^\\s]+)(.*)?/;\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach and delegate events to the component.\n     * @method constructor\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        // bind events\n        let events = this.events || {};\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let rule = k.match(SPLIT_SELECTOR);\n                let evName = rule[1];\n                let selector = (rule[2] || '').trim();\n                if (selector) {\n                    this.delegate(evName, selector, callback);\n                } else {\n                    this.node.addEventListener(evName, (ev) => {\n                        callback.call(this, ev, this);\n                    });\n                }\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire when the event fires.\n     */\n    delegate(evName, selector, callback) {\n        this.node.addEventListener(evName, (event) => {\n            let target = event.target;\n            while (target && target !== this) {\n                if (matches.call(target, selector)) {\n                    callback.call(this, event, target);\n                }\n                target = target.parentNode;\n            }\n        });\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this, evName, data, bubbles, cancelable);\n    }\n};\n","const rootDoc = document;\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nexport function createStyle(node) {\n    let doc = node.ownerDocument || rootDoc;\n    let styleElem = doc.createElement('style');\n    styleElem.type = 'text/css';\n    styleElem.setAttribute('id', `style-${node.is}`);\n    let head = doc.head;\n    /* istanbul ignore else */\n    if (head.firstElementChild) {\n        head.insertBefore(styleElem, head.firstElementChild);\n    } else {\n        head.appendChild(styleElem);\n    }\n    return styleElem;\n}\n","import { isString } from '../lib/typeof.js';\nimport { createStyle } from '../lib/style.js';\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return '.my-component p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Fires when an instance of the element is created.\n     */\n    constructor() {\n        super();\n        if (!this.constructor.styleElem) {\n            let Ctr = this.constructor;\n            Object.defineProperty(Ctr, 'styleElem', {\n                value: createStyle(this),\n            });\n        }\n        this.updateCSS();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.node.classList.add(this.is);\n    }\n\n    updateCSS() {\n        let style = this.css;\n        if (isString(style)) {\n            this.constructor.styleElem.textContent = style;\n        }\n    }\n};\n","import { isUndefined, isFunction, isString } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    get autoRender() {\n        return true;\n    }\n    /**\n     * Attach properties observers in order to update children.\n     * @method constructor\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        if (this.autoRender && !isUndefined(this.template)) {\n            let props = this.properties;\n            if (props) {\n                let callback = () => {\n                    this.render();\n                };\n                for (let k in props) {\n                    props[k].observe(callback);\n                }\n            }\n        }\n    }\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (!isUndefined(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        /* istanbul ignore else */\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            this.node.innerHTML = tpl;\n        } else {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","/* eslint-disable prefer-rest-params */\nexport const reduce = Array.prototype.reduce || function(callback /*, initialValue*/ ) {\n    'use strict';\n    let t = this;\n    let len = t.length;\n    let k = 0;\n    let value;\n    if (arguments.length === 2) {\n        value = arguments[1];\n    } else {\n        while (k < len && !(k in t)) {\n            k++;\n        }\n        value = t[k++];\n    }\n    for (; k < len; k++) {\n        if (k in t) {\n            value = callback(value, t[k], k, t);\n        }\n    }\n    return value;\n};\n","/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n */\nimport { reduce } from '../polyfills/reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extend superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce.call(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import { registry } from './registry.js';\nimport { isString } from './typeof.js';\n\n/**\n * Check if a node is already instantiated HTMLElement for programmatically `constructor` calls.\n * @private\n * @param {HTMLElement} node The node to check.\n * @return {Boolean} The node should be instantiated.\n */\nfunction isNew(node) {\n    try {\n        return !isString(node.outerHTML);\n    } catch (ex) {\n        return true;\n    }\n}\n\n/**\n * Shim original Element constructors in order to be used with `new`.\n * @method shim\n * @memberof! DNA.\n * @static\n *\n * @param {Function} Original The original constructor to shim.\n * @return {Function} The shimmed constructor.\n *\n * @example\n * ```js\n * // shim audio element\n * import { shim } from '@dnajs/core';\n *\n * class MyAudio extends shim(HTMLAudioElement) {\n *     ...\n * }\n *\n * let audio = new MyAudio();\n * ```\n */\nexport function shim(Original) {\n    class Polyfilled {\n        constructor() {\n            if (!isNew(this)) {\n                return this;\n            }\n            let desc = registry.getDescriptor(this.constructor);\n            let config = desc.config;\n            // Find the tagname of the constructor and create a new element with it\n            let element = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            element.__proto__ = desc.Ctr.prototype;\n            if (config.extends) {\n                element.setAttribute('is', desc.is);\n            }\n            return element;\n        }\n    }\n    // Clone the prototype overriding the constructor.\n    Polyfilled.prototype = Object.create(Original.prototype, {\n        constructor: {\n            value: Polyfilled,\n            configurable: true,\n            writable: true,\n        },\n    });\n    return Polyfilled;\n}\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DOM\n * @memberof! DNA.\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace MIXINS\n * @memberof! DNA.\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport { shim } from './lib/shim.js';\nexport * from './lib/symbols.js';\nexport * from './lib/typeof.js';\n","export function shim(Elem) {\n    const ShimElement = function() {\n        return Reflect.construct(Elem, [], this.constructor);\n    };\n\n    ShimElement.prototype = Object.create(Elem.prototype, {\n        constructor: {\n            value: ShimElement,\n            configurable: true,\n            writable: true,\n        },\n    });\n\n    return ShimElement;\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements spec.\n */\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\nimport { shim } from './src/lib/shim.js';\n\nexport { prop } from '@dnajs/core/src/core.js';\nexport { shim, mix, MIXINS };\nexport const registry = self.customElements;\nexport function define(...args) {\n    return registry.define(...args);\n}\nexport function render(node, Component, props = {}) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    node.appendChild(element);\n    return element;\n}\n\nexport class BaseComponent extends mix(\n    shim(self.HTMLElement)\n).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {}\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","registry","name","Ctr","config","components","toLowerCase","k","desc","getDescriptor","COMPONENT_SYMBOL","getComponent","element","full","node","nodeType","Node","ELEMENT_NODE","getAttribute","tagName","get","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","localName","CustomEvent","ev","self","ex","event","params","undefined","evt","document","createEvent","initCustomEvent","bubbles","cancelable","detail","dispatch","evName","data","TypeError","dispatchEvent","define","defineProperty","Property","ctrs","_","validator","_setter","val","getterFn","value","setterFn","validateType","oldValue","changed","scope","is","observe","callback","push","unobserve","io","indexOf","splice","newValue","i","len","length","clb","accepts","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","setter","validate","constructor","init","bind","prop","String","Boolean","Number","getValue","property","attrVal","JSON","parse","setAttribute","context","attr","currentAttrValue","removeAttribute","PropertiesMixin","props","properties","reduce","res","partialProps","observed","observedAttributes","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","SPLIT_SELECTOR","EventsMixin","events","rule","match","selector","trim","delegate","addEventListener","target","parentNode","trigger","rootDoc","createStyle","doc","ownerDocument","styleElem","createElement","type","head","firstElementChild","insertBefore","appendChild","StyleMixin","updateCSS","classList","add","style","css","textContent","TemplateMixin","autoRender","template","render","tpl","innerHTML","t","arguments","Mixin","superclass","with","args","slice","c","mixin","mix","superClass","isNew","outerHTML","MIXINS","shim","Elem","ShimElement","Reflect","construct","create","customElements","Component","BaseComponent","HTMLElement"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}