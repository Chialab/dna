{"version":3,"file":"dna-custom-elements-v1.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/reduce.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/lib/matches.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/mixins/style-component.js","packages/dna-custom-elements-v1/src/lib/shim.js","packages/dna-custom-elements-v1/index.js","node_modules/@dnajs/core/src/lib/obj-define.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/lib/custom-event.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/core.js","packages/dna-custom-elements-v1/src/mixins/custom-element.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @memberof! DNA.\n * @static\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","/**\n * Reduce an array to a single value.\n * Similar to `Array.prototype.reduce`.\n * @method reduce\n * @ignore\n *\n * @param {Array} arr The array to reduce.\n * @param {Function} callback The reducer function to fire for all value of the array.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced array.\n */\nexport function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n/**\n * Reduce an object prototype chain to a single value.\n * @method reducePrototype\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {Function} callback The reducer function to fire for all value of the prototype chain.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced prototype chain.\n */\nexport function reducePrototype(obj, callback, value) {\n    while (obj) {\n        value = callback(value, obj);\n        obj = obj.__proto__;\n    }\n    return value;\n}\n/**\n * Reduce to array of property values of a prototype chain.\n * @method reduceProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Array} A list of property values.\n */\nexport function reduceProperty(obj, key) {\n    return reducePrototype(obj, (properties, proto) => {\n        if (proto.hasOwnProperty(key)) {\n            properties.push(proto[key]);\n        }\n        return properties;\n    }, []);\n}\n/**\n * Marge an array of property values of a prototype chain.\n * @method reduceObjectProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Object} A merged list of property values.\n */\nexport function reduceObjectProperty(scope, prop) {\n    let protoProp = reduceProperty(scope, prop);\n    return reduce(protoProp, (res, proto) => {\n        for (let k in proto) {\n            if (!res.hasOwnProperty(k)) {\n                res[k] = proto[k];\n            }\n        }\n        return res;\n    }, {});\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from './custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\nimport { define } from './obj-define.js';\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n */\nexport class Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    this.changed(val, oldValue);\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb(this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Function|Array} ctrs A single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { define } from '../lib/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isFalsy, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop, Property } from '../lib/property.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = reduceObjectProperty(this, 'properties');\n        for (let k in props) {\n            if (!(props[k] instanceof Property)) {\n                props[k] = prop(props[k]);\n            }\n        }\n        define(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (isUndefined(this[name])) {\n                if (this.node.hasAttribute(attrName || name)) {\n                    this[name] = getValue(prop, this.node.getAttribute(attrName || name));\n                }\n            } else if (attrName) {\n                setAttribute(this.node, attrName, this[name]);\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback() {}\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","/** Polyfill for `Element.matches API`. */\n\nconst ELEM_PROTO = Element.prototype;\n\nconst MATCHES_SELECTOR = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n\nexport function matches(target, selector) {\n    return MATCHES_SELECTOR.call(target, selector);\n}\n","import { define } from '../lib/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../lib/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\n/**\n * Check if an event has a selector in mathc in target list.\n * @private\n *\n * @param {Event} event The event to check.\n * @param {HTMLElement} node The root node.\n * @param {String} selector The CSS selector to match.\n * @return {HTMLElement} The element in target list which matches the selector.\n */\nfunction checkDelegate(event, node, selector) {\n    if (!selector) {\n        return node;\n    }\n    let target = event.target;\n    while (target && target !== node) {\n        if (matches(target, selector)) {\n            return target;\n        }\n        target = target.parentNode;\n    }\n    return null;\n}\n/**\n * Generate a delegate listener for an event.\n * @private\n *\n * @param {String} selector The CSS selector to match.\n * @param {Function} callback The original callback for the event.\n * @return {Function} Wrapped callback with a delegation check.\n */\nfunction delegateCallback(selector, callback) {\n    return (ev) => {\n        let target = checkDelegate(ev, this.node, selector);\n        if (target) {\n            callback.call(this, ev, target);\n        }\n    };\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        let events = reduceObjectProperty(this, 'events');\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let selector = k.split(' ').slice(1).join(' ').trim();\n                events[k] = delegateCallback.call(this, selector, callback);\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n        define(this, 'events', { value: events });\n    }\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events;\n        for (let k in events) {\n            let evName = k.split(' ').shift();\n            this.node.addEventListener(evName, events[k]);\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        let events = this.events || {};\n        for (let k in events) {\n            let evName = k.split(' ').shift();\n            this.node.removeEventListener(evName, events[k]);\n        }\n        super.disconnectedCallback();\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = delegateCallback.call(this, selector, callback);\n        this.node.addEventListener(evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this.node, evName, data, bubbles, cancelable);\n    }\n};\n","import { define } from '../lib/obj-define.js';\nimport { reduceProperty } from '../lib/reduce.js';\nimport { isString } from '../lib/typeof.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * A regex to match css `:host` selector.\n * @type {RegExp}\n * @private\n */\nconst HOST_REGEX = /(\\:host)(\\([^)]*\\))?/g;\n/**\n * A regex to match css rules.\n * @type {RegExp}\n * @private\n */\nconst CSS_RULES_REGEX = /(#|\\.|\\@|\\[|[a-zA-Z]|\\:)([^{\\;\\}]*){/g;\n/**\n * A regex to split css rules.\n * @type {RegExp}\n * @private\n */\nconst SEPARATOR_REGEX = /\\,\\s*/;\n/**\n * The root document element.\n * @type {DocumentFragment}\n * @private\n */\nconst ROOT_DOC = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || ROOT_DOC;\n}\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {HTMLElement} node A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(node) {\n    let styleElem = ownerDocument(node).createElement('style');\n    styleElem.id = `style-${node.is}`;\n    return styleElem;\n}\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nfunction convertShadowCSS(css, is) {\n    const scope = `.${is}`;\n    return css\n        .replace(CSS_RULES_REGEX, (fullMatch) => {\n            let rules = fullMatch\n                .slice(0, -1)\n                .split(SEPARATOR_REGEX)\n                .map((rule) => {\n                    if (rule.indexOf(':host') === 0) {\n                        return rule.replace(HOST_REGEX, (fullMatch, host, state) => {\n                            state = state ? state.slice(1, -1) : '';\n                            return `${scope}${state}`;\n                        });\n                    } else {\n                        return `${scope} ${rule}`;\n                    }\n                })\n                .join(', ');\n            return `${rules}{`;\n        });\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Inherit all css properties.\n     */\n    constructor() {\n        super();\n        let css = reduceProperty(this, 'css')\n            .filter((protoCSS) => isString(protoCSS))\n            .join('\\n');\n        define(this, 'css', { value: css });\n    }\n    /**\n     * Create or update a style element for a component.\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (isString(this.css)) {\n            if (this.node.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this.node);\n                    this.node.shadowRoot.appendChild(style);\n                    style.textContent = this.css;\n                }\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this.node);\n                ownerDocument(this.node).head.appendChild(style);\n                style.textContent = convertShadowCSS(this.css, this.is);\n            }\n        }\n        this.node.classList.add(this.is);\n    }\n};\n","export function shim(Elem) {\n    const ShimElement = function() {\n        return Reflect.construct(Elem, [], this.constructor);\n    };\n\n    ShimElement.prototype = Object.create(Elem.prototype, {\n        constructor: {\n            value: ShimElement,\n            configurable: true,\n            writable: true,\n        },\n    });\n\n    return ShimElement;\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements spec.\n */\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\nimport { CustomElementMixin } from './src/mixins/custom-element.js';\nimport { shim } from './src/lib/shim.js';\n\nMIXINS.CustomElementMixin = CustomElementMixin;\n\nexport { prop } from '@dnajs/core/src/core.js';\nexport { shim, mix, MIXINS };\nexport const registry = self.customElements;\nexport function define(...args) {\n    return registry.define(...args);\n}\nexport function render(node, Component, props = {}) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    node.appendChild(element);\n    return element;\n}\n\nexport class BaseComponent extends mix(\n    shim(self.HTMLElement)\n).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin,\n    CustomElementMixin\n) {}\n","/**\n * A shortande to `Object.defineProperty` method.\n * @ignore\n */\nexport const define = Object.defineProperty;\n","import { define } from './obj-define.js';\nconst sym = 'components';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace registry\n * @memberof! DNA.\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @type {Object}\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        define(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","/**\n * Symbol for component instance.\n * Bound to a node.\n * @type {String}\n * @memberof DNA\n */\nexport const COMPONENT_SYMBOL = '__component';\n/**\n * Symbol for node instance.\n * Bound to a component instance.\n * @type {String}\n * @memberof DNA\n */\nexport const NODE_SYMBOL = '__node';\n/**\n * Symbol for style element.\n * Bound to a component instance.\n * @type {String}\n * @memberof DNA\n */\nexport const STYLE_SYMBOL = '__style';\n","import { COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @property {HTMLElement} node Get component node reference.\n     * @name node\n     * @type {HTMLElement}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get node() {\n        return this[NODE_SYMBOL];\n    }\n    set node(node) {\n        node[COMPONENT_SYMBOL] = this;\n        this[NODE_SYMBOL] = node;\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {}\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","/** Polyfill for CustomEvent constructor. */\n\nlet CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    CustomEvent = function(ev, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\nexport { CustomEvent };\n","import { isFunction, isString, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|string} tpl A template to use instead of `this.template`.\n     *\n     * @throws {TypeError} Will throw if the template type is not supported.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            tpl.call(this);\n        } else if (isString(tpl)) {\n            (this.node.shadowRoot || this.node).innerHTML = tpl;\n        } else if (!isFalsy(tpl)) {\n            throw new TypeError('Invalid template property.');\n        }\n    }\n};\n","import { reduce } from './reduce.js';\n\n/**\n * @author Justin Fagnani\n * @see https://github.com/justinfagnani/mixwith.js\n * Mix a class with a mixin.\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extend superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DOM\n * @memberof! DNA.\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace MIXINS\n * @memberof! DNA.\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport * from './lib/symbols.js';\n","import { COMPONENT_SYMBOL } from '@dnajs/core/src/core.js';\n\nexport const CustomElementMixin = (superClass) => class extends superClass {\n    /**\n     * @property {String} is Get component id.\n     * @name is\n     * @type {String}\n     * @memberof DNA.MIXINS.CustomElementMixin\n     * @instance\n     */\n    get is() {\n        return (this.node.getAttribute('is') || this.node.localName).toLowerCase();\n    }\n    constructor() {\n        super();\n        this[COMPONENT_SYMBOL] = this;\n    }\n};\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","reduce","arr","callback","value","k","len","length","reducePrototype","__proto__","reduceProperty","key","properties","proto","hasOwnProperty","push","reduceObjectProperty","scope","prop","protoProp","res","dispatch","node","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","setAttribute","context","attr","currentAttrValue","getAttribute","removeAttribute","matches","target","selector","MATCHES_SELECTOR","checkDelegate","event","parentNode","delegateCallback","_this","ownerDocument","ROOT_DOC","createStyle","styleElem","createElement","id","is","convertShadowCSS","css","replace","CSS_RULES_REGEX","fullMatch","rules","slice","split","SEPARATOR_REGEX","map","rule","indexOf","HOST_REGEX","host","state","join","shim","Elem","ShimElement","Reflect","construct","this","constructor","create","define","registry","render","Component","props","element","appendChild","defineProperty","sym","COMPONENT_SYMBOL","name","Ctr","config","toLowerCase","full","desc","NODE_SYMBOL","STYLE_SYMBOL","ComponentMixin","SuperClass","connectedCallback","disconnectedCallback","attributeChangedCallback","self","params","evt","document","createEvent","initCustomEvent","detail","_","validator","_setter","val","getterFn","setterFn","undefined","validateType","oldValue","changed","observe","unobserve","io","splice","newValue","i","clb","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","init","bind","Number","PropertiesMixin","_SuperClass","observed","observedAttributes","propertyChangedCallback","hasAttribute","oldVal","newVal","observeProperty","propName","unobserveProperty","ELEM_PROTO","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","EventsMixin","events","trim","shift","addEventListener","removeEventListener","delegate","wrapCallback","trigger","StyleMixin","filter","protoCSS","shadowRoot","style","textContent","head","classList","add","TemplateMixin","template","tpl","innerHTML","Mixin","superclass","with","args","arguments","c","mixin","mix","superClass","MIXINS","CustomElementMixin","_superClass","localName","customElements","BaseComponent","HTMLElement"],"mappings":"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"}