{"version":3,"file":"dna-custom-elements-v0.js","sources":["node_modules/@dnajs/core/src/lib/typeof.js","node_modules/@dnajs/core/src/lib/symbols.js","node_modules/@dnajs/core/src/lib/reduce.js","node_modules/@dnajs/core/src/lib/dispatch.js","node_modules/@dnajs/core/src/lib/property.js","node_modules/@dnajs/core/src/mixins/properties-component.js","node_modules/@dnajs/core/src/lib/matches.js","node_modules/@dnajs/core/src/mixins/events-component.js","node_modules/@dnajs/core/src/mixins/style-component.js","packages/dna-custom-elements-v0/src/lib/shim.js","packages/dna-custom-elements-v0/src/lib/bind.js","packages/dna-custom-elements-v0/src/lib/define.js","packages/dna-custom-elements-v0/src/lib/render.js","node_modules/@dnajs/core/src/lib/obj-define.js","node_modules/@dnajs/core/src/lib/registry.js","node_modules/@dnajs/core/src/lib/notifications.js","node_modules/@dnajs/core/src/mixins/component.js","node_modules/@dnajs/core/src/lib/custom-event.js","node_modules/@dnajs/core/src/mixins/template-component.js","node_modules/@dnajs/core/src/lib/mixins.js","node_modules/@dnajs/core/src/core.js","packages/dna-custom-elements-v0/src/mixins/custom-element.js","node_modules/@dnajs/core/index.js","packages/dna-custom-elements-v0/index.js"],"sourcesContent":["/**\n * Check if an value is a function.\n * @method isFunction\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\n/**\n * Check if an value is a string.\n * @method isString\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * Check if an value is an object.\n * @method isObject\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Check if an value is undefined.\n * @method isUndefined\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined';\n}\n/**\n * Check if an value is an array.\n * @method isArray\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isArray(obj) {\n    return Array.isArray(obj);\n}\n/**\n * Check if falsy value.\n * @method isFalsy\n * @static\n * @private\n *\n * @param {*} obj The value to check.\n * @return {Boolean}\n */\nexport function isFalsy(obj) {\n    return isUndefined(obj) || obj === null || obj === false;\n}\n","/**\n * Wrap Symbol function.\n * @private\n *\n * @param {String} name The symbol name.\n * @return {Symbol|String} A real symbol if supported or a string key.\n */\nfunction Sym(name) {\n    if (self.Symbol) {\n        return self.Symbol(name);\n    }\n    return `__${name}`;\n}\n\n/**\n * Symbol for DNA component mixin.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const DNA_SYMBOL = Sym('dna');\n/**\n * Symbol for component instance.\n * Bound to a node.\n * @type {String}\n * @private\n */\nexport const COMPONENT_SYMBOL = Sym('component');\n/**\n * Symbol for node instance.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const NODE_SYMBOL = Sym('node');\n/**\n * Symbol for style element.\n * Bound to a component instance.\n * @type {String}\n * @private\n */\nexport const STYLE_SYMBOL = Sym('style');\n","/**\n * Reduce an array to a single value.\n * Similar to `Array.prototype.reduce`.\n * @method reduce\n * @ignore\n *\n * @param {Array} arr The array to reduce.\n * @param {Function} callback The reducer function to fire for all value of the array.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced array.\n */\nexport function reduce(arr, callback, value) {\n    for (let k = 0, len = arr.length; k < len; k++) {\n        value = callback(value, arr[k], k, arr);\n    }\n    return value;\n}\n/**\n * Reduce an object prototype chain to a single value.\n * @method reducePrototype\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {Function} callback The reducer function to fire for all value of the prototype chain.\n * @param {*} value Optional initial value.\n * @return {*} The value for the reduced prototype chain.\n */\nexport function reducePrototype(obj, callback, value) {\n    while (obj) {\n        value = callback(value, obj);\n        obj = obj.__proto__;\n    }\n    return value;\n}\n/**\n * Reduce to array of property values of a prototype chain.\n * @method reduceProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Array} A list of property values.\n */\nexport function reduceProperty(obj, key) {\n    return reducePrototype(obj, (properties, proto) => {\n        if (proto.hasOwnProperty(key)) {\n            properties.push(proto[key]);\n        }\n        return properties;\n    }, []);\n}\n/**\n * Marge an array of property values of a prototype chain.\n * @method reduceObjectProperty\n * @ignore\n *\n * @param {*} obj The object prototype scope to iterate.\n * @param {String} key The property name.\n * @return {Object} A merged list of property values.\n */\nexport function reduceObjectProperty(scope, prop) {\n    let protoProp = reduceProperty(scope, prop);\n    return reduce(protoProp, (res, proto) => {\n        for (let k in proto) {\n            if (!res.hasOwnProperty(k)) {\n                res[k] = proto[k];\n            }\n        }\n        return res;\n    }, {});\n}\n","import { isString } from './typeof.js';\nimport { CustomEvent } from './custom-event.js';\n\n/**\n * Trigger a custom DOM Event.\n * @private\n *\n * @param {Node} node The event target.\n * @param {String} evName The custom event name.\n * @param {Object} data Extra data to pass to the event.\n * @param {Boolean} bubbles Enable event bubbling.\n * @param {Boolean} cancelable Make event cancelable.\n * @return {Boolean} True if event propagation has not be stopped.\n */\nexport function dispatch(node, evName, data, bubbles = true, cancelable = true) {\n    if (!isString(evName)) {\n        throw new TypeError('Event name is undefined');\n    }\n    let ev = new CustomEvent(evName, {\n        detail: data,\n        bubbles,\n        cancelable,\n    });\n    return node.dispatchEvent(ev);\n}\n","import { isUndefined, isFunction, isArray, isObject, isString } from './typeof.js';\nimport { define } from './obj-define.js';\n\n/**\n * Power to the component's properties.\n * Type checking, validation, callbacks, events and attribute syncing.\n */\nexport class Property {\n    /**\n     * Create a Property instance.\n     * @param {Function|Array} A single or a list of valid constructors for the property value.\n     * @return {Property}\n     */\n    constructor(ctrs) {\n        this._ = [];\n        ctrs = ctrs || [];\n        if (!isArray(ctrs)) {\n            ctrs = [ctrs];\n        }\n        this.ctrs = ctrs;\n        this.validator = () => true;\n        this._setter = (val) => val;\n        this.getterFn = () => this.value;\n        this.setterFn = (val) => {\n            val = this._setter(val);\n            if ((val === null || val === undefined) ||\n                this.validateType(val) && this.validator(val)) {\n                let oldValue = this.value;\n                if (oldValue !== val) {\n                    this.value = val;\n                    if (this.initialized) {\n                        this.changed(val, oldValue);\n                    }\n                }\n            } else {\n                // eslint-disable-next-line\n                throw new TypeError(\n                    `Invalid \\`${val}\\` value for \\`${this.name}\\` property for \\`${this.scope.is}\\`.`\n                );\n            }\n        };\n    }\n    /**\n     * Add a callback when the property changes.\n     * @param {Function} callback The callback to trigger.\n     * @return {Property} The property instance for chaining.\n     */\n    observe(callback) {\n        if (isFunction(callback) || isString(callback)) {\n            this._.push(callback);\n        }\n        return this;\n    }\n    /**\n     * Remove a callback on property changes.\n     * @param {Function} callback The callback to remove.\n     * @return {Property} The property instance for chaining.\n     */\n    unobserve(callback) {\n        let io = this._.indexOf(callback);\n        if (io !== -1) {\n            this._.splice(io, 1);\n        }\n        return this;\n    }\n    /**\n     * Trigger callbacks after a change.\n     * @private\n     * @param {*} newValue The current property value.\n     * @param {*} oldValue The previous property value.\n     */\n    changed(newValue, oldValue) {\n        for (let i = 0, len = this._.length; i < len; i++) {\n            let clb = this._[i];\n            if (isString(clb)) {\n                this.scope[clb].call(this.scope, this, newValue, oldValue);\n            } else {\n                clb.call(this.scope, this, newValue, oldValue);\n            }\n        }\n    }\n    /**\n     * Check if a property accepts a given type as value.\n     * @param {Function} Ctr The constructor for the given type.\n     * @return {Boolean}\n     */\n    accepts(Ctr) {\n        return this.ctrs.indexOf(Ctr) !== -1;\n    }\n    /**\n     * Set the property name.\n     * It also set the attrName if `.attribute` method as been previously\n     * invoked without arguments.\n     * @param {String} name The property name.\n     * @return {Property} The property instance for chaining.\n     */\n    named(name) {\n        this.name = name;\n        if (this.attrRequested === true) {\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Set the property initial value.\n     * @param {*} initValue The property initial value.\n     * @return {Property} The property instance for chaining.\n     */\n    default(initValue) {\n        this.defaultValue = isObject(initValue) ?\n            Object.freeze(initValue) :\n            initValue;\n        return this;\n    }\n    /**\n     * Set the attribute name to sync.\n     * Invoked without arguments, it retrieve the name of the property.\n     * @param {String} attrName The attribute name.\n     * @return {Property} The property instance for chaining.\n     */\n    attribute(attrName = true) {\n        if (isString(attrName)) {\n            this.attrRequested = false;\n            this.attrName = attrName;\n        } else {\n            this.attrRequested = !!attrName;\n            this.attrName = this.name;\n        }\n        return this;\n    }\n    /**\n     * Add a DOM event name to dispatch on changes.\n     * @param {String} evName The event name.\n     * @return {Property} The property instance for chaining.\n     */\n    dispatch(evName) {\n        this.eventName = evName;\n        return this;\n    }\n    /**\n     * Set a getter function for the property.\n     * By default, the property value will be return.\n     * @param {Function} callback The property getter.\n     * @return {Property} The property instance for chaining.\n     */\n    getter(callback) {\n        if (isFunction(callback)) {\n            this.getterFn = () => callback(this.value);\n        }\n        return this;\n    }\n    /**\n     * Set a setter function for the property.\n     * By default, the property value will be updated with given value\n     * without any modification.\n     * @param {Function} callback The property setter.\n     * @return {Property} The property instance for chaining.\n     */\n    setter(callback) {\n        if (isFunction(callback)) {\n            this._setter = callback;\n        }\n        return this;\n    }\n    /**\n     * Set the property validator.\n     * A validator should return `true` if the value is acceptable\n     * or `false` if unaccaptable.\n     * @param {Function} callback The property validtor.\n     * @return {Property} The property instance for chaining.\n     */\n    validate(callback) {\n        if (isFunction(callback)) {\n            this.validator = callback;\n        }\n        return this;\n    }\n    /**\n     * Check if the given value is a valid type.\n     * @private\n     * @param {*} val The value to check.\n     * @return {Boolean}\n     */\n    validateType(val) {\n        let i = 0;\n        let ctrs = this.ctrs;\n        if (ctrs.length === 0) {\n            return true;\n        }\n        while (i < ctrs.length) {\n            if (val instanceof ctrs[i] || (\n                val.constructor && val.constructor === ctrs[i]\n            )) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n    /**\n     * Attach the property to a scope (a component instance).\n     * Set the default value if provided.\n     * @param {Object} scope The scope which needs to be bound with the property.\n     */\n    init(scope) {\n        this.scope = scope;\n        define(scope, this.name, {\n            get: this.getterFn.bind(this),\n            set: this.setterFn.bind(this),\n            configurable: true,\n        });\n        if (!isUndefined(this.defaultValue)) {\n            scope[this.name] = this.defaultValue;\n        }\n        this.initialized = true;\n    }\n}\n\n/**\n * Helper method for Property creation.\n * @method prop\n * @memberof! DNA.\n * @static\n *\n * @property {Property} ANY A property without type validation.\n * @property {Property} STRING A property which accepts only strings.\n * @property {Property} BOOLEAN A property which accepts only booleans.\n * @property {Property} NUMBER A property which accepts only numbers.\n *\n * @param {Function|Array} ctrs A single or a list of valid constructors for the property value.\n * @return {Property} The new property.\n */\nexport function prop(ctrs) {\n    return new Property(ctrs);\n}\n\n// Define some helpers for default types\ndefine(prop, 'ANY', { get() { return prop(); } });\ndefine(prop, 'STRING', { get() { return prop(String); } });\ndefine(prop, 'BOOLEAN', { get() { return prop(Boolean); } });\ndefine(prop, 'NUMBER', { get() { return prop(Number); } });\n","import { define } from '../lib/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isFalsy, isUndefined } from '../lib/typeof.js';\nimport { dispatch } from '../lib/dispatch.js';\nimport { prop, Property } from '../lib/property.js';\nimport { notifications } from '../lib/notifications.js';\n\n/**\n * Try to parse attribute value checking the property validation types.\n * @private\n *\n * @param {Property} property The property to update.\n * @param {String} attrVal The attribute value.\n * @return {*} The parsed value.\n */\nfunction getValue(property, attrVal) {\n    if (attrVal === '' && property.accepts(Boolean)) {\n        return true;\n    }\n    if (!property.accepts(String)) {\n        try {\n            return JSON.parse(attrVal);\n        } catch (ex) {\n            //\n        }\n    }\n    return attrVal;\n}\n\n/**\n * Set an attribute value checking its type.\n * @private\n *\n * @param {HTMLElement} context The node to update.\n * @param {String} attr The attribute name to update.\n * @param {*} value The value to set.\n */\nfunction setAttribute(context, attr, value) {\n    let currentAttrValue = context.getAttribute(attr);\n    if (currentAttrValue !== value) {\n        if (!isFalsy(value)) {\n            if (typeof value === 'boolean') {\n                value = '';\n            }\n            context.setAttribute(attr, value);\n        } else if (currentAttrValue !== null) {\n            context.removeAttribute(attr);\n        }\n    }\n}\n\n/**\n * Simple Custom Component for properties initialization via attributes.\n * @mixin PropertiesMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get properties() {\n *     return { name: String };\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var temp = document.createElement('div');\n * temp.innerHTML = '<my-component name=\"Albert\"></my-component>';\n * var element = temp.firstChild;\n * console.log(element.name); // logs \"Albert\"\n * ```\n */\nexport const PropertiesMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Attach properties on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let props = reduceObjectProperty(this, 'properties');\n        for (let k in props) {\n            if (!(props[k] instanceof Property)) {\n                props[k] = prop(props[k]);\n            }\n        }\n        define(this, 'properties', {\n            value: props,\n            writable: false,\n            configurable: true,\n        });\n        let observed = this.constructor.observedAttributes || [];\n        for (let k in props) {\n            let prop = props[k];\n            prop.named(k)\n                .observe((prop, newValue, oldValue) =>\n                    this.propertyChangedCallback(prop.name, oldValue, newValue)\n                )\n                .init(this);\n            let { attrName, eventName } = prop;\n            if (!attrName && observed.indexOf(k) !== -1) {\n                prop.attribute();\n                attrName = k;\n            }\n            if (attrName || eventName) {\n                prop.observe(() => {\n                    if (attrName) {\n                        setAttribute(this.node, attrName, this[prop.name]);\n                    }\n                    if (eventName) {\n                        dispatch(this.node, eventName);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Sync initial attributes with properties.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            let { attrName, name } = prop;\n            if (isUndefined(this[name])) {\n                if (this.node.hasAttribute(attrName || name)) {\n                    this[name] = getValue(prop, this.node.getAttribute(attrName || name));\n                } else if (!isUndefined(this.node[name])) {\n                    this[name] = this.node[name];\n                }\n            } else if (attrName) {\n                setAttribute(this.node, attrName, this[name]);\n            }\n        }\n    }\n    /**\n     * Sync attributes with properties.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {\n        super.attributeChangedCallback(attr, oldVal, newVal);\n        let props = this.properties;\n        for (let k in props) {\n            let prop = props[k];\n            if (prop.attrName === attr) {\n                this[prop.name] = getValue(prop, newVal);\n                return;\n            }\n        }\n    }\n    /**\n     * Callback for property changes.\n     * - Just define the callback, do nothing.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {String} propName The changed property name.\n     * @param {String} oldVal The value of the property before the change.\n     * @param {String} newVal The value of the property after the change.\n     */\n    propertyChangedCallback(propName, oldVal, newVal) {\n        notifications.trigger('updated', this, propName, oldVal, newVal);\n    }\n    /**\n     * Create a listener for node's property changes.\n     * @method observeProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to observe.\n     * @param {Function} callback The callback to fire.\n     * @return {Object} An object with `cancel` method.\n     */\n    observeProperty(propName, callback) {\n        return this.properties[propName].observe(callback);\n    }\n    /**\n     * Remove a listener for node's property changes.\n     * @method unobserveProperty\n     * @memberof DNA.MIXINS.PropertiesMixin\n     * @instance\n     *\n     * @param {string} propName The property name to unobserve.\n     * @param {Function} callback The callback to remove.\n     */\n    unobserveProperty(propName, callback) {\n        this.properties[propName].unobserve(callback);\n    }\n};\n","/**\n * Alias to Element prototype.\n * @type {Object}\n * @private\n */\nconst ELEM_PROTO = Element.prototype;\n\n/**\n * Alias to `Element.prototype.matches`.\n * @type {Function}\n * @private\n */\nconst MATCHES_SELECTOR = ELEM_PROTO.matches ||\n    ELEM_PROTO.mozMatchesSelector ||\n    ELEM_PROTO.msMatchesSelector ||\n    ELEM_PROTO.oMatchesSelector ||\n    ELEM_PROTO.webkitMatchesSelector;\n\n/**\n * Polyfill for `Element.matches API`.\n * @private\n *\n * @param {HTMLElement} target The node to check.\n * @param {String} selector The selector to match.\n * @return {Boolean} The target matches the selector.\n */\nexport function matches(target, selector) {\n    return MATCHES_SELECTOR.call(target, selector);\n}\n","import { define } from '../lib/obj-define.js';\nimport { reduceObjectProperty } from '../lib/reduce.js';\nimport { isString, isFunction } from '../lib/typeof.js';\nimport { matches } from '../lib/matches.js';\nimport { dispatch } from '../lib/dispatch.js';\n\n/**\n * Check if an event has a selector in mathc in target list.\n * @private\n *\n * @param {Event} event The event to check.\n * @param {HTMLElement} node The root node.\n * @param {String} selector The CSS selector to match.\n * @return {HTMLElement} The element in target list which matches the selector.\n */\nfunction checkDelegate(event, node, selector) {\n    if (!selector) {\n        return node;\n    }\n    let target = event.target;\n    while (target && target !== node) {\n        if (matches(target, selector)) {\n            return target;\n        }\n        target = target.parentNode;\n    }\n    return null;\n}\n/**\n * Generate a delegate listener for an event.\n * @private\n *\n * @param {String} selector The CSS selector to match.\n * @param {Function} callback The original callback for the event.\n * @return {Function} Wrapped callback with a delegation check.\n */\nfunction delegateCallback(selector, callback) {\n    return (ev) => {\n        let target = checkDelegate(ev, this.node, selector);\n        if (target) {\n            callback.call(this, ev, target);\n        }\n    };\n}\n\n/**\n * Simple Custom Component with events delegation,\n * It also implement a `dispatchEvent` wrapper named `trigger`.\n * @mixin EventsMixin\n * @memberof DNA.MIXINS.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get events() {\n *     return {\n *       'click button': 'onButtonClick'\n *     }\n *   }\n *   onButtonClick() {\n *     console.log('button clicked');\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var button = document.createElement('button');\n * button.innerText = 'Click me';\n * element.appendChild(button);\n * button.click(); // logs \"button clicked\"\n * ```\n */\nexport const EventsMixin = (SuperClass) => class extends SuperClass {\n    constructor() {\n        super();\n        let events = reduceObjectProperty(this, 'events');\n        for (let k in events) {\n            let callback = isString(events[k]) ?\n                this[events[k]] :\n                events[k];\n            if (isFunction(callback)) {\n                let selector = k.split(' ').slice(1).join(' ').trim();\n                events[k] = delegateCallback.call(this, selector, callback);\n            } else {\n                throw new TypeError('Invalid callback for event.');\n            }\n        }\n        define(this, 'events', { value: events });\n    }\n    /**\n     * Attach and delegate events to the component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // bind events\n        let events = this.events;\n        for (let k in events) {\n            let evName = k.split(' ').shift();\n            this.node.addEventListener(evName, events[k]);\n        }\n    }\n    /**\n     * Detach and undelegate events from the component.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        let events = this.events;\n        for (let k in events) {\n            let evName = k.split(' ').shift();\n            this.node.removeEventListener(evName, events[k]);\n        }\n        super.disconnectedCallback();\n    }\n    /**\n     * Delegate events to the component descendents.\n     * @method delegate\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to delegate.\n     * @param {String} selector A CSS selector for descendents.\n     * @param {Function} callback The callback to fire.\n     */\n    delegate(evName, selector, callback) {\n        let wrapCallback = delegateCallback.call(this, selector, callback);\n        this.node.addEventListener(evName, wrapCallback);\n    }\n    /**\n     * `Node.prototype.dispatchEvent` wrapper.\n     * @method trigger\n     * @memberof DNA.MIXINS.EventsMixin\n     * @instance\n     *\n     * @param {String} evName The name of the event to fire.\n     * @param {Object} data A set of custom data to pass to the event.\n     * @param {Boolean} bubbles Should the event bubble throw the DOM tree.\n     * @param {Boolean} cancelable Can be the event cancel by a callback.\n     * @return {Boolean} True if event propagation has not be stopped.\n     */\n    trigger(evName, data, bubbles = true, cancelable = true) {\n        return dispatch(this.node, evName, data, bubbles, cancelable);\n    }\n};\n","import { define } from '../lib/obj-define.js';\nimport { reduceProperty } from '../lib/reduce.js';\nimport { isString } from '../lib/typeof.js';\nimport { STYLE_SYMBOL } from '../lib/symbols.js';\n\n/**\n * A regex to match css `:host` selector.\n * @type {RegExp}\n * @private\n */\nconst HOST_REGEX = /(\\:host)(\\([^)]*\\))?/g;\n/**\n * A regex to match css blocks.\n * @type {RegExp}\n * @private\n */\nconst CSS_BLOCKS = /(#|\\.|\\@|\\[|[a-zA-Z]|\\:)([^{\\;\\}]*)({({(.|\\n)*?}|.|\\n)*?})/g;\n/**\n * A regex to match css rules in block.\n * @type {RegExp}\n * @private\n */\nconst CSS_RULES = /[^{]*{/;\n/**\n * A regex to split css rules.\n * @type {RegExp}\n * @private\n */\nconst SEPARATOR_REGEX = /\\,\\s*/;\n/**\n * The root document element.\n * @type {DocumentFragment}\n * @private\n */\nconst ROOT_DOC = document;\n\n/**\n * Get the owner document for a node.\n * @private\n *\n * @param {HTMLElement} node A node.\n * @return {DocumentFragment} The node document parent.\n */\nfunction ownerDocument(node) {\n    return node.ownerDocument || ROOT_DOC;\n}\n/**\n * Create and attach a style element for a component.\n * @private\n *\n * @param {Object} component A component instance.\n * @return {HTMLElement} The created style element.\n */\nfunction createStyle(component) {\n    let styleElem = ownerDocument(component.node).createElement('style');\n    styleElem.id = `style-${component.is}`;\n    return styleElem;\n}\n/**\n * Convert a shadowDOM css string into a normal scoped css.\n * @private\n *\n * @param {String} css The css string to convert.\n * @param {String} is The component name for scoping.\n * @return {String} The converted string.\n */\nfunction convertShadowCSS(css, is) {\n    const scope = `.${is}`;\n    return css\n        // split blocks\n        .replace(CSS_BLOCKS, (fullMatch) =>\n            fullMatch\n                // get rules\n                .replace(CSS_RULES, (chunk) => {\n                    if (chunk[0] === '@') {\n                        return chunk;\n                    }\n                    // split rules\n                    return chunk.split(SEPARATOR_REGEX)\n                        .map((rule) => {\n                            if (rule.indexOf(':host') === 0) {\n                                return rule.replace(HOST_REGEX, (fullMatch, host, state) => {\n                                    state = state ? state.slice(1, -1) : '';\n                                    return `${scope}${state}`;\n                                });\n                            } else {\n                                return `${scope} ${rule}`;\n                            }\n                        })\n                        .join(', ');\n                })\n        );\n}\n\n/**\n * Simple Custom Component with css style handling using the `css` property.\n * @mixin StyleMixin\n * @memberof DNA.MIXINS\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get css() {\n *     return 'p { color: red; }'\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * var p = document.createElement('p');\n * p.innerText = 'Paragraph';\n * element.appendChild(p); // text inside `p` gets the red color\n * ```\n */\nexport const StyleMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Inherit all css properties.\n     * @method constructor\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        let css = reduceProperty(this, 'css')\n            .filter((protoCSS) => isString(protoCSS))\n            .join('\\n');\n        if (css) {\n            define(this, 'css', { value: css });\n        }\n    }\n    /**\n     * Create or update a style element for a component.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.StyleMixin\n     * @instance\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (isString(this.css)) {\n            if (this.node.shadowRoot) {\n                if (!this[STYLE_SYMBOL]) {\n                    let style = this[STYLE_SYMBOL] = createStyle(this);\n                    this.node.shadowRoot.appendChild(style);\n                    style.textContent = this.css;\n                }\n            } else if (!this.constructor[STYLE_SYMBOL]) {\n                let style = this.constructor[STYLE_SYMBOL] = createStyle(this);\n                ownerDocument(this.node).head.appendChild(style);\n                style.textContent = convertShadowCSS(this.css, this.is);\n            }\n        }\n        this.node.classList.add(this.is);\n    }\n};\n","import { isString } from '@dnajs/core/src/lib/typeof.js';\nimport { registry } from '@dnajs/core/src/lib/registry.js';\n\n/**\n * Check if a node is already instantiated HTMLElement for programmatically `constructor` calls.\n * @private\n *\n * @param {HTMLElement} node The node to check.\n * @return {Boolean} The node should be instantiated.\n */\nfunction isNew(node) {\n    try {\n        return !isString(node.outerHTML);\n    } catch (ex) {\n        return true;\n    }\n}\n\n/**\n * Shim original Element constructors in order to be used with `new`.\n * @method shim\n * @static\n * @private\n *\n * @param {Function} Original The original constructor to shim.\n * @return {Function} The shimmed constructor.\n *\n * @example\n * ```js\n * // shim audio element\n * import { shim } from '@dnajs/core';\n *\n * class MyAudio extends shim(HTMLAudioElement) {\n *     ...\n * }\n *\n * let audio = new MyAudio();\n * ```\n */\nexport function shim(Original) {\n    class Polyfilled {\n        constructor() {\n            if (!isNew(this)) {\n                return this;\n            }\n            let desc = registry.get(this.is, true);\n            let config = desc.config;\n            // Find the tagname of the constructor and create a new element with it\n            let element = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            element.__proto__ = desc.Ctr.prototype;\n            if (config.extends) {\n                element.setAttribute('is', desc.is);\n            }\n            return element;\n        }\n    }\n    // Clone the prototype overriding the constructor.\n    Polyfilled.prototype = Object.create(Original.prototype, {\n        constructor: {\n            value: Polyfilled,\n            configurable: true,\n            writable: true,\n        },\n    });\n    return Polyfilled;\n}\n","import { isFunction } from '@dnajs/core/src/lib/typeof.js';\nimport { define } from '@dnajs/core/src/lib/obj-define.js';\n\n/**\n * Attach a component prototype to an already instantiated HTMLElement.\n * @method bind\n * @memberof DNA.DOM\n * @static\n *\n * @param {HTMLElement} node The node to update.\n * @param {Function} Ctr The component class to use (leave empty for auto detect).\n * @return {Boolean} The prototype has been attached.\n */\nexport function bind(node, Ctr) {\n    if (isFunction(Ctr)) {\n        node.__proto__ = Ctr.prototype;\n        define(node, 'constructor', {\n            value: Ctr,\n            configurable: true,\n            writable: true,\n        });\n        Ctr.call(node);\n        return true;\n    }\n    return false;\n}\n","import { registry } from '@dnajs/core/src/lib/registry.js';\n\nexport function define(tagName, Component, config = {}) {\n    registry.define(tagName, Component, config);\n    let opts = {\n        prototype: Component.prototype,\n    };\n    if (config.extends) {\n        opts.extends = config.extends;\n    }\n    return document.registerElement(tagName, opts);\n}\n","export function render(node, Component, props = {}) {\n    let element = new Component();\n    for (let k in props) {\n        element[k] = props[k];\n    }\n    node.appendChild(element);\n    return element;\n}\n","/**\n * A shortande to `Object.defineProperty` method.\n * @ignore\n */\nexport const define = Object.defineProperty;\n","import { define } from './obj-define.js';\nconst sym = 'components';\n\n/**\n * A custom components registry.\n * It replicates the [CustomElementRegistry interface](https://www.w3.org/TR/custom-elements/#custom-elements-api).\n * @name registry\n * @namespace DNA.registry\n * @memberof DNA\n * @static\n */\nexport const registry = {\n    /**\n     * The list of defined components.\n     * @memberof DNA.registry\n     * @type {Object}\n     * @private\n     */\n    [sym]: {},\n    /**\n     * Register a new component.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The id of the component.\n     * @param {Function} Ctr The component constructor.\n     * @param {Object} config Optional component configuration.\n     */\n    define(name, Ctr, config = {}) {\n        name = name.toLowerCase();\n        define(Ctr.prototype, 'is', {\n            get: () => name,\n        });\n        this[sym][name] = {\n            is: name,\n            Ctr,\n            config,\n        };\n    },\n    /**\n     * Retrieve a component constructor by id.\n     * @memberof DNA.registry\n     *\n     * @param {String} name The component id.\n     * @param {Boolean} full Get the full component descriptor.\n     * @return {Function|Object} The component constructor or a component descriptor.\n     */\n    get(name, full) {\n        let desc = this[sym][name.toLowerCase()];\n        if (desc) {\n            return full ? desc : desc.Ctr;\n        }\n    },\n};\n","import { isArray, isFunction } from './typeof.js';\n\n/**\n * Notifications handler for DNA components.\n * @namespace DNA.notifications\n * @memberof DNA\n */\nexport const notifications = {\n    /**\n     * A list of callbacks for component creation.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    created: [],\n    /**\n     * A list of callbacks for component connection.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    connected: [],\n    /**\n     * A list of callbacks for component disconnection.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    disconnected: [],\n    /**\n     * A list of callbacks for component update.\n     * @type {Array}\n     * @memberof DNA.notifications\n     */\n    updated: [],\n    /**\n     * Attach a callback for a notifications.\n     * @method on\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name.\n     * @param {Function} callback The callback to trigger.\n     */\n    on(notification, callback) {\n        if (isArray(this[notification]) && isFunction(callback)) {\n            this[notification].push(callback);\n        }\n    },\n    /**\n     * Remove a callback for a notifications.\n     * @method off\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name.\n     * @param {Function} callback The callback to remove.\n     */\n    off(notification, callback) {\n        if (isArray(this[notification]) && isFunction(callback)) {\n            let io = this[notification].indexOf(callback);\n            if (io !== -1) {\n                this[notification].splice(io);\n            }\n        }\n    },\n    /**\n     * Trigger a list of callbacks.\n     * @method trigger\n     * @memberof DNA.notifications\n     *\n     * @param {String} notification The notification name to trigger.\n     * @param {Object} elem The component scope.\n     * @param {*} ...args All the arguments to pass to the callback.\n     */\n    trigger(notification, elem, ...args) {\n        if (isArray(this[notification])) {\n            this[notification].forEach((clb) => clb.call(null, elem, ...args));\n        }\n    },\n};\n","import { DNA_SYMBOL, COMPONENT_SYMBOL, NODE_SYMBOL } from '../lib/symbols.js';\nimport { notifications } from '../lib/notifications.js';\n\n/**\n * The base custom component mixins. Just add life cycles callback and `is` getter.\n * @mixin ComponentMixin\n * @memberof DNA.MIXINS\n * @static\n */\nexport const ComponentMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * @private\n     */\n    get [DNA_SYMBOL]() {\n        return true;\n    }\n    /**\n     * @property {HTMLElement} node Get component node reference.\n     * @name node\n     * @type {HTMLElement}\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    get node() {\n        return this[NODE_SYMBOL];\n    }\n    set node(node) {\n        node[COMPONENT_SYMBOL] = this;\n        this[NODE_SYMBOL] = node;\n    }\n    /**\n     * Fires on component creation.\n     * @method constructor\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    constructor() {\n        super();\n        notifications.trigger('created', this);\n    }\n    /**\n     * Fires when an instance was inserted into the document.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    connectedCallback() {\n        this.node[COMPONENT_SYMBOL] = this;\n        notifications.trigger('connected', this);\n    }\n    /**\n     * Fires when an instance was detached from the document.\n     * @method disconnectedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     */\n    disconnectedCallback() {\n        notifications.trigger('disconnected', this);\n    }\n    /**\n     * Fires when an attribute was added, removed, or updated.\n     * @method attributeChangedCallback\n     * @memberof DNA.MIXINS.ComponentMixin\n     * @instance\n     *\n     * @param {String} attrName The changed attribute name.\n     * @param {String} oldVal The value of the attribute before the change.\n     * @param {String} newVal The value of the attribute after the change.\n     */\n    attributeChangedCallback() {}\n};\n","/**\n * Alias to native `CustomEvent`.\n * @type {Function}\n * @private\n */\nlet CustomEvent = self.CustomEvent;\n\ntry {\n    // eslint-disable-next-line\n    new CustomEvent('test');\n} catch(ex) {\n    /**\n     * Polyfill `CustomEvent`.\n     * @type {Function}\n     * @private\n     */\n    CustomEvent = function(ev, params) {\n        let evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    };\n    CustomEvent.prototype = self.CustomEvent.prototype;\n}\n\n/** Polyfill for CustomEvent constructor. */\nexport { CustomEvent };\n","import { isFunction, isFalsy } from '../lib/typeof.js';\n\n/**\n * Simple Custom Component with template handling using the `template` property.\n * @memberof DNA.MIXINS\n * @mixin TemplateMixin\n * @static\n *\n * @param {Function} SuperClass The class to extend.\n * @return {Function} The extended class.\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   get template() {\n *     return `<h1>${this.name}</h1>`;\n *   }\n *   get name() {\n *     return 'Newton';\n *   }\n * }\n * ```\n * ```js\n * // app.js\n * import { define } from '@dnajs/core';\n * import { MyComponent } from './my-component.js';\n * define('my-component', MyComponent);\n * var element = new MyComponent();\n * console.log(element.innerHTML); // logs \"<h1>Newton</h1>\"\n * ```\n */\nexport const TemplateMixin = (SuperClass) => class extends SuperClass {\n    /**\n     * Render the component when connected.\n     * @method connectedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    connectedCallback() {\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Trigger rerender on property changes.\n     * @method propertyChangedCallback\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     */\n    propertyChangedCallback(propName, oldValue, newValue) {\n        super.propertyChangedCallback(propName, oldValue, newValue);\n        if (!isFalsy(this.template)) {\n            this.render();\n        }\n    }\n    /**\n     * Update Component child nodes.\n     * @method render\n     * @memberof DNA.MIXINS.TemplateMixin\n     * @instance\n     *\n     * @param {Function|*} tpl A template to use instead of `this.template`.\n     */\n    render(tpl) {\n        tpl = tpl || this.template;\n        if (isFunction(tpl)) {\n            return tpl.call(this);\n        }\n        (this.node.shadowRoot || this.node).innerHTML = tpl;\n    }\n};\n","import { reduce } from './reduce.js';\n\n/**\n * Mix a class with a mixin.\n * @author Justin Fagnani (https://github.com/justinfagnani)\n * @method mix(...).with(...)\n * @memberof! DNA.\n * @static\n *\n * @param {Function} superClass The class to extend.\n * @return {Function} A mixed class.\n *\n * @example\n * ```js\n * // my-super.js\n * export class MySuperClass {\n *     constructor() {\n *         // do something\n *     }\n * }\n * ```\n * ```js\n * // mixin.js\n * export const Mixin = (superClass) => class extends superClass {\n *     constructor() {\n *         super();\n *         // do something else\n *     }\n * };\n * ```\n * ```js\n * import { mix } from '@dnajs/core';\n * import { MySuperClass } from './my-super.js';\n * import { Mixin } from './mixin.js';\n *\n * export class MixedClass extends mix(MySuperClass).with(Mixin) {\n *     ...\n * }\n * ```\n */\n\n/**\n * A Mixin helper class.\n * @ignore\n */\nclass Mixin {\n    /**\n     * Create a mixable class.\n     * @param {Function} superClass The class to extend.\n     */\n    constructor(superclass) {\n        superclass = superclass || class {};\n        this.superclass = superclass;\n    }\n    /**\n     * Mix the super class with a list of mixins.\n     * @param {...Function} mixins *N* mixin functions.\n     * @return {Function} The extended class.\n     */\n    with() {\n        // eslint-disable-next-line\n        let args = [].slice.call(arguments, 0);\n        return reduce(args, (c, mixin) => mixin(c), this.superclass);\n    }\n}\n\n/**\n * Create a Mixin instance.\n * @ignore\n */\nexport const mix = (superClass) => new Mixin(superClass);\n","import * as DOM_HELPERS from './lib/dom.js';\nimport { ComponentMixin } from './mixins/component.js';\nimport { PropertiesMixin } from './mixins/properties-component.js';\nimport { EventsMixin } from './mixins/events-component.js';\nimport { StyleMixin } from './mixins/style-component.js';\nimport { TemplateMixin } from './mixins/template-component.js';\n\n/**\n * A set of DOM helpers for callbacks trigger when Custom Elements\n * are not supported by the browser.\n * @name DOM\n * @namespace DNA.DOM\n * @memberof DNA\n * @static\n */\nexport const DOM = DOM_HELPERS;\n/**\n * A set of core mixins.\n * @name MIXINS\n * @namespace DNA.MIXINS\n * @memberof DNA\n * @static\n */\nexport const MIXINS = {\n    ComponentMixin,\n    PropertiesMixin,\n    EventsMixin,\n    StyleMixin,\n    TemplateMixin,\n};\nexport { mix } from './lib/mixins.js';\nexport { prop } from './lib/property.js';\nexport * from './lib/notifications.js';\n","import { bind } from '../lib/bind.js';\n\nexport const CustomElementMixin = (superClass) => class extends superClass {\n    get node() {\n        return this;\n    }\n    createdCallback() {\n        bind(this, this.constructor);\n    }\n    attachedCallback() {\n        this.connectedCallback();\n    }\n    detachedCallback() {\n        this.detachedCallback();\n    }\n};\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements specs.\n */\nimport { mix, MIXINS } from './src/core.js';\nimport { registry } from './src/lib/registry.js';\n\n/**\n * @namespace DNA\n */\nexport * from './src/core.js';\nexport { registry };\nexport { bootstrap } from './src/lib/bootstrap.js';\nexport { define } from './src/lib/define.js';\nexport { render } from './src/lib/render.js';\n\n\n/**\n * Simple Custom Component with some behaviors.\n * @class BaseComponent\n * @memberof DNA.\n * @static\n *\n * @example\n * ```js\n * // my-component.js\n * import { BaseComponent } from '@dnajs/core';\n * export class MyComponent extends BaseComponent {\n *   static get observedAttributes() {\n *     return ['...', '...'];\n *   }\n *   get css() {\n *     return '...';\n *   }\n *   get events() {\n *     return {\n *       '...': '...'\n *     };\n *   }\n *   get template() {\n *     return '...';\n *   }\n *   get properties() {\n *     return { ... };\n *   }\n * }\n * ```\n */\nexport class BaseComponent extends mix().with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin\n) {\n    constructor(node) {\n        super();\n        if (!node) {\n            let desc = registry.get(this.is, true);\n            let config = desc.config;\n            node = document.createElement(\n                config.extends ? config.extends : desc.is\n            );\n            if (config.extends) {\n                node.setAttribute('is', desc.is);\n            }\n        }\n        this.node = node;\n    }\n}\n","/**\n * DNA\n * (c) 2015-2016 Chialab (http://www.chialab.com) <dev@chialab.io>\n * http://dna.chialab.io\n *\n * Just another components pattern.\n * Use with Custom Elements v0 spec.\n */\nimport { mix, MIXINS } from '@dnajs/core/src/core.js';\nimport { registry } from '@dnajs/core';\nimport { shim } from './src/lib/shim.js';\nimport { CustomElementMixin } from './src/mixins/custom-element.js';\n\nMIXINS.CustomElementMixin = CustomElementMixin;\n\nexport { prop } from '@dnajs/core/src/core.js';\nexport { shim, mix, registry, MIXINS };\nexport { define } from './src/lib/define.js';\nexport { render } from './src/lib/render.js';\n\nexport class BaseComponent extends mix(\n    shim(self.HTMLElement)\n).with(\n    MIXINS.ComponentMixin,\n    MIXINS.PropertiesMixin,\n    MIXINS.StyleMixin,\n    MIXINS.EventsMixin,\n    MIXINS.TemplateMixin,\n    CustomElementMixin\n) {}\n"],"names":["isFunction","obj","isString","isObject","Object","prototype","toString","call","isUndefined","isArray","Array","isFalsy","Sym","name","self","Symbol","reduce","arr","callback","value","k","len","length","reducePrototype","__proto__","reduceProperty","key","properties","proto","hasOwnProperty","push","reduceObjectProperty","scope","prop","protoProp","res","dispatch","node","evName","data","bubbles","cancelable","TypeError","ev","CustomEvent","dispatchEvent","ctrs","Property","getValue","property","attrVal","accepts","Boolean","String","JSON","parse","ex","setAttribute","context","attr","currentAttrValue","getAttribute","removeAttribute","matches","target","selector","MATCHES_SELECTOR","checkDelegate","event","parentNode","delegateCallback","_this","ownerDocument","ROOT_DOC","createStyle","component","styleElem","createElement","id","is","convertShadowCSS","css","replace","CSS_BLOCKS","fullMatch","CSS_RULES","chunk","split","SEPARATOR_REGEX","map","rule","indexOf","HOST_REGEX","host","state","slice","join","isNew","outerHTML","shim","Original","Polyfilled","this","desc","registry","get","config","element","document","extends","Ctr","create","bind","define","tagName","Component","opts","registerElement","render","props","appendChild","defineProperty","sym","toLowerCase","full","DNA_SYMBOL","COMPONENT_SYMBOL","NODE_SYMBOL","STYLE_SYMBOL","notifications","notification","io","splice","elem","args","forEach","clb","ComponentMixin","SuperClass","_SuperClass","trigger","connectedCallback","disconnectedCallback","attributeChangedCallback","params","evt","createEvent","initCustomEvent","detail","_","validator","_setter","val","getterFn","setterFn","undefined","validateType","oldValue","initialized","changed","observe","unobserve","newValue","i","named","attrRequested","attrName","default","initValue","defaultValue","freeze","attribute","eventName","getter","_this2","setter","validate","constructor","init","Number","PropertiesMixin","observed","observedAttributes","propertyChangedCallback","hasAttribute","oldVal","newVal","propName","observeProperty","unobserveProperty","ELEM_PROTO","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","EventsMixin","events","trim","shift","addEventListener","removeEventListener","delegate","wrapCallback","StyleMixin","filter","protoCSS","shadowRoot","style","textContent","head","classList","add","TemplateMixin","template","tpl","innerHTML","Mixin","superclass","with","arguments","c","mixin","mix","superClass","MIXINS","CustomElementMixin","_mix$with","createdCallback","attachedCallback","detachedCallback","BaseComponent","HTMLElement"],"mappings":"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"}